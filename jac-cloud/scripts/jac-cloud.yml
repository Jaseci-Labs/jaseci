# 1. Namespace: littlex
apiVersion: v1
kind: Namespace
metadata:
  name: littlex
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-script
  namespace: littlex
data:
  init_jac_cloud.sh: |
    #!/bin/bash
    set -e
    echo "=== Starting jac-cloud Pod Initialization ==="

    NAMESPACE=${NAMESPACE:-default}
    CONFIGMAP_NAME=${CONFIGMAP_NAME:-module-config}
    FILE_NAME=${FILE_NAME:-example.jac}

    echo "Using Namespace: $NAMESPACE"
    echo "Running Jac File: $FILE_NAME"

    jac orc_initialize "$NAMESPACE" || exit 1
    jac serve "$FILE_NAME" || exit 1
---

# 2. ServiceAccount: jac-cloud-sa (in the littlex namespace)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jac-cloud-sa
  namespace: littlex
---
# 3. ClusterRole: Define permissions for the jac-cloud system
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jac-cloud-cluster-role
rules:
  # Core Kubernetes resources permissions
  - apiGroups: [""]
    resources:
      - "namespaces"
      - "pods"
      - "services"
      - "configmaps"
    verbs: ["get", "list", "create", "delete", "watch", "patch", "update"]

  # ServiceAccount permissions
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list", "create", "delete", "watch", "patch", "update"]

  # RBAC permissions
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings"]
    verbs: ["get", "list", "create", "delete", "watch", "patch", "update"]

  # Apps API group for managing deployments
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "create", "delete", "watch", "patch", "update"]

  # Allow access to secrets (e.g., for OpenAI API key)
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
---
# 4. ClusterRoleBinding: Bind ClusterRole to the ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jac-cloud-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: jac-cloud-sa
    namespace: littlex
roleRef:
  kind: ClusterRole
  name: jac-cloud-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# 5. Deployment: jac-cloud application deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jac-cloud
  namespace: littlex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jac-cloud
  template:
    metadata:
      labels:
        app: jac-cloud
    spec:
      # Attach the ServiceAccount for RBAC
      serviceAccountName: jac-cloud-sa
      containers:
      - name: jac-cloud
        image: python:3.12-slim  # Use the Python base image
        imagePullPolicy: IfNotPresent

        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Installing dependencies..."
            apt-get update && apt-get install -y --no-install-recommends git && apt-get clean && rm -rf /var/lib/apt/lists/*
            echo "Cloning littleX repository..."
            git clone --branch main --depth 1 https://github.com/Jaseci-Labs/littleX.git /app/littleX
            echo "Installing Python dependencies..."
            pip install --no-cache-dir -r /app/littleX/littleX_BE/requirements.txt openai jac-splice-orc
            echo "Starting initialization script..."
            /bin/bash /app/init_jac_cloud.sh

        # Environment variables for dynamic configuration
        env:
          - name: CONFIG_FILE_PATH
            value: "/cfg/module_config.json"
          - name: NAMESPACE
            value: "littlex"
          - name: CONFIGMAP_NAME
            value: "module-config"
          - name: FILE_NAME
            value: "/app/littleX/littleX_BE/_archive/littleX_full.jac"
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: openai-secret
                key: openai-key

        # Mount ConfigMap for application configuration
        volumeMounts:
          - name: config-vol
            mountPath: /cfg
          - name: init-script-vol
            mountPath: /app/init_jac_cloud.sh
            subPath: init_jac_cloud.sh

      volumes:
        - name: config-vol
          configMap:
            name: module-config
            items:
              - key: module_config.json
                path: module_config.json
        - name: init-script-vol
          configMap:
            name: init-script

      # Restart policy
      restartPolicy: Always
---
# 6. Secret: OpenAI API key
apiVersion: v1
kind: Secret
metadata:
  name: openai-secret
  namespace: littlex
type: Opaque
data:
  openai-key: "<your_openai_key>"