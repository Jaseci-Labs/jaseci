/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Walker } from "./components/jsc-graph/jsc-graph";
import { ItemsPropValue, JustifyPropValue } from "./types/propTypes";
export namespace Components {
    interface GraphNodeInfo {
        "context": { [key: string]: any };
        "details": { [key: string]: any };
        "info": { [key: string]: any };
        "selectedInfoTab": 'details' | 'context' | 'info';
    }
    interface GraphWalkerRunner {
        "nodeId": string;
        "sentinel": string;
        "serverUrl": string;
        "walkers": Walker[];
    }
    interface JscAlert {
        "css": string;
        "events": string;
        "message": string;
        "name": string;
        "operations": any;
        "palette": 'success' | 'info' | 'warning' | 'error';
    }
    interface JscAnchor {
        "css": string;
        "events": string;
        "hover": 'true' | 'false';
        "href": string;
        "label": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent' | 'neutral';
        "target": string;
    }
    interface JscApp {
        "markup": JaseciComponent[];
        "setGlobalConfig": (config: Record<string, any> & { css: Record<string, string>; }) => Promise<void>;
        "setMarkup": (value: any) => Promise<void>;
    }
    interface JscAuthForm {
        "css": string;
        "events": string;
        "hideNameField": string;
        "mode": 'signup' | 'login';
        "name": string;
        "operations": any;
        "redirectURL": string;
        "requireActivation": 'true' | 'false';
        "serverURL": string;
        "tokenKey": string;
    }
    interface JscAvatar {
        "css": string;
        "events": string;
        "name": string;
        "operations": any;
        "placeholder": string;
        "size": string;
        "src": string;
        "variant": string;
    }
    interface JscBadge {
        "css": string;
        "events": string;
        "label": string;
        "name": string;
        "operations": any;
        "palette": string;
        "size": string;
    }
    interface JscBreadcrumbs {
        "css": string;
        "events": string;
        "label": string;
        "links": string;
        "name": string;
        "operations": string;
    }
    interface JscButton {
        "active": string;
        "block": string;
        "color": string;
        "css": string;
        "events": string;
        "fullWidth": string;
        "label": string;
        "name": string;
        "noRadius": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent' | 'link' | 'info' | 'success' | 'warning' | 'error' | 'ghost';
        "size": 'sm' | 'md' | 'lg' | 'xs';
        "tooltip": string;
        "tooltipPalette": string;
        "tooltipPosition": string;
        "variant": 'default' | 'link' | 'ghost';
    }
    interface JscButtonGroup {
        "buttons": string;
        "css": string;
        "events": string;
        "name": string;
        "operations": any;
    }
    interface JscCard {
        "css": string;
        "events": string;
        "name": string;
        "operations": any;
        "radius": 'sm' | 'md' | 'lg' | 'full';
        "shadow": 'sm' | 'md' | 'lg' | 'xl';
        "title": string;
        "variant": 'shadow' | 'outline';
    }
    interface JscCarousel {
        "css": string;
        "events": string;
        "label": string;
        "name": string;
        "operations": any;
        "palette": string;
        "placeholder": string;
        "size": string;
        "slide": string;
    }
    interface JscCheckbox {
        "css": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent';
        "placeholder": string;
        "size": 'xs' | 'sm' | 'md' | 'lg';
        "type": string;
        "value": string;
    }
    interface JscChip {
        "css": string;
        "events": string;
        "label": string;
        "name": string;
        "operations": any;
    }
    interface JscCollapse {
        "css": string;
        "events": string;
        "icon": 'plus' | 'arrow';
        "label": string;
        "name": string;
        "operations": any;
        "palette": 'primary' | 'secondary' | 'accent';
    }
    interface JscColumn {
        "css": string;
        "events": string;
        "items": ItemsPropValue;
        "justify": JustifyPropValue;
        "name": string;
        "operations": string;
    }
    interface JscContainer {
        "css": string;
        "events": string;
        "name": string;
        "operations": any;
    }
    interface JscDatagrid {
        "css": string;
        "currentPage": number;
        "events": string;
        "headings": string;
        "itemsPerPage": number;
        "maxPages": number;
        "name": string;
        "operations": any;
        "refetchData": () => Promise<void>;
        "rowData": [][];
        "rows": { context: any }[];
        "server": string;
        "snt": string;
        "sortOrder": {};
        "token": string;
        "variant": 'striped' | 'default';
        "walker": string;
    }
    interface JscDatalist {
        "body": string;
        "css": string;
        "data": [];
        "events": string;
        "getters": string;
        "layout": 'Column' | 'Row' | 'None';
        "layoutProps": string;
        "name": string;
        "operations": string;
        "server": string;
        "snt": string;
        "template": string;
        "token": string;
        "walker": string;
    }
    interface JscDatePicker {
        "css": string;
        "events": string;
        "label": string;
        "name": string;
        "operations": any;
        "type": 'date' | 'datetime';
        "value": string;
    }
    interface JscDialog {
        "closeDialog": () => Promise<void>;
        "css": string;
        "events": string;
        "listeners": string;
        "name": string;
        "open": string;
        "operations": any;
        "title": string;
    }
    interface JscDialogContainer {
        "closeDialog": () => void;
        "label"?: string;
        "playExitAnimation": () => Promise<any>;
        "setLabel": (label: string) => Promise<void>;
    }
    interface JscDivider {
        "color"?: string;
        "css": string;
        "events": string;
        "label"?: string;
        "name": string;
        "operations": any;
        "orientation"?: string;
        "size"?: string;
    }
    interface JscDrawer {
        "closeDrawer": () => Promise<void>;
        "css": string;
        "events": string;
        "listeners": string;
        "name": string;
        "open": string;
        "operations": any;
        "title": string;
    }
    interface JscDropdown {
        "buttonProps": string;
        "css": string;
        "events": string;
        "items": string;
        "label": string;
        "name": string;
        "operations": any;
    }
    interface JscDropdownItem {
        "css": string;
        "events": string;
        "href": string;
        "label": string;
        "name": string;
        "operations": string;
        "target": string;
    }
    interface JscGraph {
        "css": string;
        "events": string;
        "graphId": string;
        "height": string;
        "onFocus": 'expand' | 'isolate';
        "token": string;
    }
    interface JscGraphContextMenu {
        "hide": () => Promise<void>;
        "setClickedItem": ({ clickedNode, clickedEdge }: { clickedNode?: GraphNode; clickedEdge?: GraphEdge; }) => Promise<void>;
        "setPos": (x: number, y: number) => Promise<void>;
        "show": () => Promise<void>;
    }
    interface JscHero {
        "action": string;
        "backgroundImage": string;
        "css": string;
        "description": string;
        "events": string;
        "label": string;
        "name": string;
        "operations": any;
    }
    interface JscInputbox {
        "altLabel": string;
        "css": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent' | 'ghost' | 'link' | 'info' | 'success' | 'warning' | 'error';
        "placeholder": string;
        "size": 'xs' | 'lg' | 'md' | 'sm';
        "type": string;
        "value": string;
    }
    interface JscLabel {
        "htmlFor": string;
        "label": string;
        "name": string;
        "operations": string;
    }
    interface JscNavBar {
        "css": string;
        "events": string;
        /**
          * The title of the app bar.
         */
        "label": string;
        "links": string;
        "name": string;
        "operations": string;
    }
    interface JscNavLink {
        "css": string;
        "events": string;
        "href": string;
        "label": string;
        "name": string;
        "operations": string;
        "target": string;
    }
    interface JscPopover {
        "closePopover": () => Promise<void>;
        "css": string;
        "events": string;
        "left": string;
        "listeners": string;
        "name": string;
        "open": string;
        "openPopover": () => Promise<void>;
        "operations": any;
        "target": string;
        "title": string;
        "togglePopover": () => Promise<void>;
        "top": string;
    }
    interface JscPopoverContainer {
        "closePopover": () => void;
        "label": string;
        "left": string;
        "open": boolean;
        "playExitAnimation": () => Promise<any>;
        "playPresenceAnimation": () => Promise<void>;
        "top": string;
    }
    interface JscProgress {
        "css": string;
        "events": string;
        "max": number;
        "name": string;
        "operations": any;
        "palette": string;
        "size": string;
        "value": number;
    }
    interface JscRadio {
        "altLabel": string;
        "css": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent' | 'ghost' | 'link' | 'info' | 'success' | 'warning' | 'error';
        "placeholder": string;
        "type": string;
        "value": string;
    }
    interface JscRadioGroup {
        "css": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "name": string;
        "operations": string;
        "options": string;
        "palette": string;
        "placeholder": string;
        "type": string;
        "value": string;
    }
    interface JscRange {
        "altLabel": string;
        "css": string;
        "defaultValue": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "max": string;
        "min": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent';
        "placeholder": string;
        "showValue": string;
        "size": 'xs' | 'sm' | 'md' | 'lg';
        "type": string;
        "value": string;
    }
    interface JscRating {
        "css": string;
        "events": string;
        "label": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent' | 'neutral' | 'warning' | 'error' | 'info' | 'success';
        "stars": string;
        "value": string;
    }
    interface JscRow {
        "css": string;
        "events": string;
        "gap": string;
        "items": ItemsPropValue;
        "justify": JustifyPropValue;
        "name": string;
        "operations": string;
    }
    interface JscSelect {
        "altLabel": string;
        "css": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "name": string;
        "operations": string;
        "options": string | { label: string }[];
        "palette": 'primary' | 'secondary' | 'accent' | 'ghost' | 'link' | 'info' | 'success' | 'warning' | 'error';
        "placeholder": string;
        "selected": string;
        "size": 'xs' | 'sm' | 'md' | 'lg';
        "type": string;
        "value": string;
    }
    interface JscSpeechInput {
        "active": boolean;
        "altLabel": string;
        "css": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent' | 'ghost' | 'link' | 'info' | 'success' | 'warning' | 'error';
        "placeholder": string;
        "type": string;
        "value": string;
    }
    interface JscStat {
        "css": string;
        "description": string;
        "events": string;
        "label": string;
        "name": string;
        "operations": any;
        "stats": string;
        "total": string;
        "value": string;
    }
    interface JscTabs {
        "container": HTMLElement;
        "content": string;
        "css": string;
        "events": string;
        "name": string;
        "openTab": (tabName: string) => Promise<void>;
        "operations": any;
        "selectedTab": string;
        "tabs": string;
        "tabsComps": { name: string; label: string; render: JaseciComponent[] }[];
        "variant": 'boxed' | 'lifted' | 'basic' | 'bordered';
    }
    interface JscText {
        "css": string;
        "events": string;
        "name": string;
        "operations": string;
        "value": string;
        "variant": 'p' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface JscTextbox {
        "altLabel": string;
        "css": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent';
        "placeholder": string;
        "value": string;
    }
    interface JscToast {
        "css": string;
        "events": string;
        "name": string;
        "operations": any;
    }
    interface JscToggle {
        "altLabel": string;
        "css": string;
        "events": string;
        "fullwidth": string;
        "label": string;
        "name": string;
        "operations": string;
        "palette": 'primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error';
        "placeholder": string;
        "size": 'xs' | 'sm' | 'md' | 'lg';
        "type": string;
        "value": string;
    }
    interface JscTooltip {
        "css": string;
        "events": string;
        "label": string;
        "name": string;
        "operations": any;
        "target": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface GraphWalkerRunnerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGraphWalkerRunnerElement;
}
export interface JscAppCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscAppElement;
}
export interface JscAuthFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscAuthFormElement;
}
export interface JscCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscCheckboxElement;
}
export interface JscGraphContextMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscGraphContextMenuElement;
}
export interface JscInputboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscInputboxElement;
}
export interface JscRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscRadioElement;
}
export interface JscRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscRangeElement;
}
export interface JscSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscSelectElement;
}
export interface JscSpeechInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscSpeechInputElement;
}
export interface JscTextboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscTextboxElement;
}
export interface JscToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJscToggleElement;
}
declare global {
    interface HTMLGraphNodeInfoElement extends Components.GraphNodeInfo, HTMLStencilElement {
    }
    var HTMLGraphNodeInfoElement: {
        prototype: HTMLGraphNodeInfoElement;
        new (): HTMLGraphNodeInfoElement;
    };
    interface HTMLGraphWalkerRunnerElement extends Components.GraphWalkerRunner, HTMLStencilElement {
    }
    var HTMLGraphWalkerRunnerElement: {
        prototype: HTMLGraphWalkerRunnerElement;
        new (): HTMLGraphWalkerRunnerElement;
    };
    interface HTMLJscAlertElement extends Components.JscAlert, HTMLStencilElement {
    }
    var HTMLJscAlertElement: {
        prototype: HTMLJscAlertElement;
        new (): HTMLJscAlertElement;
    };
    interface HTMLJscAnchorElement extends Components.JscAnchor, HTMLStencilElement {
    }
    var HTMLJscAnchorElement: {
        prototype: HTMLJscAnchorElement;
        new (): HTMLJscAnchorElement;
    };
    interface HTMLJscAppElement extends Components.JscApp, HTMLStencilElement {
    }
    var HTMLJscAppElement: {
        prototype: HTMLJscAppElement;
        new (): HTMLJscAppElement;
    };
    interface HTMLJscAuthFormElement extends Components.JscAuthForm, HTMLStencilElement {
    }
    var HTMLJscAuthFormElement: {
        prototype: HTMLJscAuthFormElement;
        new (): HTMLJscAuthFormElement;
    };
    interface HTMLJscAvatarElement extends Components.JscAvatar, HTMLStencilElement {
    }
    var HTMLJscAvatarElement: {
        prototype: HTMLJscAvatarElement;
        new (): HTMLJscAvatarElement;
    };
    interface HTMLJscBadgeElement extends Components.JscBadge, HTMLStencilElement {
    }
    var HTMLJscBadgeElement: {
        prototype: HTMLJscBadgeElement;
        new (): HTMLJscBadgeElement;
    };
    interface HTMLJscBreadcrumbsElement extends Components.JscBreadcrumbs, HTMLStencilElement {
    }
    var HTMLJscBreadcrumbsElement: {
        prototype: HTMLJscBreadcrumbsElement;
        new (): HTMLJscBreadcrumbsElement;
    };
    interface HTMLJscButtonElement extends Components.JscButton, HTMLStencilElement {
    }
    var HTMLJscButtonElement: {
        prototype: HTMLJscButtonElement;
        new (): HTMLJscButtonElement;
    };
    interface HTMLJscButtonGroupElement extends Components.JscButtonGroup, HTMLStencilElement {
    }
    var HTMLJscButtonGroupElement: {
        prototype: HTMLJscButtonGroupElement;
        new (): HTMLJscButtonGroupElement;
    };
    interface HTMLJscCardElement extends Components.JscCard, HTMLStencilElement {
    }
    var HTMLJscCardElement: {
        prototype: HTMLJscCardElement;
        new (): HTMLJscCardElement;
    };
    interface HTMLJscCarouselElement extends Components.JscCarousel, HTMLStencilElement {
    }
    var HTMLJscCarouselElement: {
        prototype: HTMLJscCarouselElement;
        new (): HTMLJscCarouselElement;
    };
    interface HTMLJscCheckboxElement extends Components.JscCheckbox, HTMLStencilElement {
    }
    var HTMLJscCheckboxElement: {
        prototype: HTMLJscCheckboxElement;
        new (): HTMLJscCheckboxElement;
    };
    interface HTMLJscChipElement extends Components.JscChip, HTMLStencilElement {
    }
    var HTMLJscChipElement: {
        prototype: HTMLJscChipElement;
        new (): HTMLJscChipElement;
    };
    interface HTMLJscCollapseElement extends Components.JscCollapse, HTMLStencilElement {
    }
    var HTMLJscCollapseElement: {
        prototype: HTMLJscCollapseElement;
        new (): HTMLJscCollapseElement;
    };
    interface HTMLJscColumnElement extends Components.JscColumn, HTMLStencilElement {
    }
    var HTMLJscColumnElement: {
        prototype: HTMLJscColumnElement;
        new (): HTMLJscColumnElement;
    };
    interface HTMLJscContainerElement extends Components.JscContainer, HTMLStencilElement {
    }
    var HTMLJscContainerElement: {
        prototype: HTMLJscContainerElement;
        new (): HTMLJscContainerElement;
    };
    interface HTMLJscDatagridElement extends Components.JscDatagrid, HTMLStencilElement {
    }
    var HTMLJscDatagridElement: {
        prototype: HTMLJscDatagridElement;
        new (): HTMLJscDatagridElement;
    };
    interface HTMLJscDatalistElement extends Components.JscDatalist, HTMLStencilElement {
    }
    var HTMLJscDatalistElement: {
        prototype: HTMLJscDatalistElement;
        new (): HTMLJscDatalistElement;
    };
    interface HTMLJscDatePickerElement extends Components.JscDatePicker, HTMLStencilElement {
    }
    var HTMLJscDatePickerElement: {
        prototype: HTMLJscDatePickerElement;
        new (): HTMLJscDatePickerElement;
    };
    interface HTMLJscDialogElement extends Components.JscDialog, HTMLStencilElement {
    }
    var HTMLJscDialogElement: {
        prototype: HTMLJscDialogElement;
        new (): HTMLJscDialogElement;
    };
    interface HTMLJscDialogContainerElement extends Components.JscDialogContainer, HTMLStencilElement {
    }
    var HTMLJscDialogContainerElement: {
        prototype: HTMLJscDialogContainerElement;
        new (): HTMLJscDialogContainerElement;
    };
    interface HTMLJscDividerElement extends Components.JscDivider, HTMLStencilElement {
    }
    var HTMLJscDividerElement: {
        prototype: HTMLJscDividerElement;
        new (): HTMLJscDividerElement;
    };
    interface HTMLJscDrawerElement extends Components.JscDrawer, HTMLStencilElement {
    }
    var HTMLJscDrawerElement: {
        prototype: HTMLJscDrawerElement;
        new (): HTMLJscDrawerElement;
    };
    interface HTMLJscDropdownElement extends Components.JscDropdown, HTMLStencilElement {
    }
    var HTMLJscDropdownElement: {
        prototype: HTMLJscDropdownElement;
        new (): HTMLJscDropdownElement;
    };
    interface HTMLJscDropdownItemElement extends Components.JscDropdownItem, HTMLStencilElement {
    }
    var HTMLJscDropdownItemElement: {
        prototype: HTMLJscDropdownItemElement;
        new (): HTMLJscDropdownItemElement;
    };
    interface HTMLJscGraphElement extends Components.JscGraph, HTMLStencilElement {
    }
    var HTMLJscGraphElement: {
        prototype: HTMLJscGraphElement;
        new (): HTMLJscGraphElement;
    };
    interface HTMLJscGraphContextMenuElement extends Components.JscGraphContextMenu, HTMLStencilElement {
    }
    var HTMLJscGraphContextMenuElement: {
        prototype: HTMLJscGraphContextMenuElement;
        new (): HTMLJscGraphContextMenuElement;
    };
    interface HTMLJscHeroElement extends Components.JscHero, HTMLStencilElement {
    }
    var HTMLJscHeroElement: {
        prototype: HTMLJscHeroElement;
        new (): HTMLJscHeroElement;
    };
    interface HTMLJscInputboxElement extends Components.JscInputbox, HTMLStencilElement {
    }
    var HTMLJscInputboxElement: {
        prototype: HTMLJscInputboxElement;
        new (): HTMLJscInputboxElement;
    };
    interface HTMLJscLabelElement extends Components.JscLabel, HTMLStencilElement {
    }
    var HTMLJscLabelElement: {
        prototype: HTMLJscLabelElement;
        new (): HTMLJscLabelElement;
    };
    interface HTMLJscNavBarElement extends Components.JscNavBar, HTMLStencilElement {
    }
    var HTMLJscNavBarElement: {
        prototype: HTMLJscNavBarElement;
        new (): HTMLJscNavBarElement;
    };
    interface HTMLJscNavLinkElement extends Components.JscNavLink, HTMLStencilElement {
    }
    var HTMLJscNavLinkElement: {
        prototype: HTMLJscNavLinkElement;
        new (): HTMLJscNavLinkElement;
    };
    interface HTMLJscPopoverElement extends Components.JscPopover, HTMLStencilElement {
    }
    var HTMLJscPopoverElement: {
        prototype: HTMLJscPopoverElement;
        new (): HTMLJscPopoverElement;
    };
    interface HTMLJscPopoverContainerElement extends Components.JscPopoverContainer, HTMLStencilElement {
    }
    var HTMLJscPopoverContainerElement: {
        prototype: HTMLJscPopoverContainerElement;
        new (): HTMLJscPopoverContainerElement;
    };
    interface HTMLJscProgressElement extends Components.JscProgress, HTMLStencilElement {
    }
    var HTMLJscProgressElement: {
        prototype: HTMLJscProgressElement;
        new (): HTMLJscProgressElement;
    };
    interface HTMLJscRadioElement extends Components.JscRadio, HTMLStencilElement {
    }
    var HTMLJscRadioElement: {
        prototype: HTMLJscRadioElement;
        new (): HTMLJscRadioElement;
    };
    interface HTMLJscRadioGroupElement extends Components.JscRadioGroup, HTMLStencilElement {
    }
    var HTMLJscRadioGroupElement: {
        prototype: HTMLJscRadioGroupElement;
        new (): HTMLJscRadioGroupElement;
    };
    interface HTMLJscRangeElement extends Components.JscRange, HTMLStencilElement {
    }
    var HTMLJscRangeElement: {
        prototype: HTMLJscRangeElement;
        new (): HTMLJscRangeElement;
    };
    interface HTMLJscRatingElement extends Components.JscRating, HTMLStencilElement {
    }
    var HTMLJscRatingElement: {
        prototype: HTMLJscRatingElement;
        new (): HTMLJscRatingElement;
    };
    interface HTMLJscRowElement extends Components.JscRow, HTMLStencilElement {
    }
    var HTMLJscRowElement: {
        prototype: HTMLJscRowElement;
        new (): HTMLJscRowElement;
    };
    interface HTMLJscSelectElement extends Components.JscSelect, HTMLStencilElement {
    }
    var HTMLJscSelectElement: {
        prototype: HTMLJscSelectElement;
        new (): HTMLJscSelectElement;
    };
    interface HTMLJscSpeechInputElement extends Components.JscSpeechInput, HTMLStencilElement {
    }
    var HTMLJscSpeechInputElement: {
        prototype: HTMLJscSpeechInputElement;
        new (): HTMLJscSpeechInputElement;
    };
    interface HTMLJscStatElement extends Components.JscStat, HTMLStencilElement {
    }
    var HTMLJscStatElement: {
        prototype: HTMLJscStatElement;
        new (): HTMLJscStatElement;
    };
    interface HTMLJscTabsElement extends Components.JscTabs, HTMLStencilElement {
    }
    var HTMLJscTabsElement: {
        prototype: HTMLJscTabsElement;
        new (): HTMLJscTabsElement;
    };
    interface HTMLJscTextElement extends Components.JscText, HTMLStencilElement {
    }
    var HTMLJscTextElement: {
        prototype: HTMLJscTextElement;
        new (): HTMLJscTextElement;
    };
    interface HTMLJscTextboxElement extends Components.JscTextbox, HTMLStencilElement {
    }
    var HTMLJscTextboxElement: {
        prototype: HTMLJscTextboxElement;
        new (): HTMLJscTextboxElement;
    };
    interface HTMLJscToastElement extends Components.JscToast, HTMLStencilElement {
    }
    var HTMLJscToastElement: {
        prototype: HTMLJscToastElement;
        new (): HTMLJscToastElement;
    };
    interface HTMLJscToggleElement extends Components.JscToggle, HTMLStencilElement {
    }
    var HTMLJscToggleElement: {
        prototype: HTMLJscToggleElement;
        new (): HTMLJscToggleElement;
    };
    interface HTMLJscTooltipElement extends Components.JscTooltip, HTMLStencilElement {
    }
    var HTMLJscTooltipElement: {
        prototype: HTMLJscTooltipElement;
        new (): HTMLJscTooltipElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "graph-node-info": HTMLGraphNodeInfoElement;
        "graph-walker-runner": HTMLGraphWalkerRunnerElement;
        "jsc-alert": HTMLJscAlertElement;
        "jsc-anchor": HTMLJscAnchorElement;
        "jsc-app": HTMLJscAppElement;
        "jsc-auth-form": HTMLJscAuthFormElement;
        "jsc-avatar": HTMLJscAvatarElement;
        "jsc-badge": HTMLJscBadgeElement;
        "jsc-breadcrumbs": HTMLJscBreadcrumbsElement;
        "jsc-button": HTMLJscButtonElement;
        "jsc-button-group": HTMLJscButtonGroupElement;
        "jsc-card": HTMLJscCardElement;
        "jsc-carousel": HTMLJscCarouselElement;
        "jsc-checkbox": HTMLJscCheckboxElement;
        "jsc-chip": HTMLJscChipElement;
        "jsc-collapse": HTMLJscCollapseElement;
        "jsc-column": HTMLJscColumnElement;
        "jsc-container": HTMLJscContainerElement;
        "jsc-datagrid": HTMLJscDatagridElement;
        "jsc-datalist": HTMLJscDatalistElement;
        "jsc-date-picker": HTMLJscDatePickerElement;
        "jsc-dialog": HTMLJscDialogElement;
        "jsc-dialog-container": HTMLJscDialogContainerElement;
        "jsc-divider": HTMLJscDividerElement;
        "jsc-drawer": HTMLJscDrawerElement;
        "jsc-dropdown": HTMLJscDropdownElement;
        "jsc-dropdown-item": HTMLJscDropdownItemElement;
        "jsc-graph": HTMLJscGraphElement;
        "jsc-graph-context-menu": HTMLJscGraphContextMenuElement;
        "jsc-hero": HTMLJscHeroElement;
        "jsc-inputbox": HTMLJscInputboxElement;
        "jsc-label": HTMLJscLabelElement;
        "jsc-nav-bar": HTMLJscNavBarElement;
        "jsc-nav-link": HTMLJscNavLinkElement;
        "jsc-popover": HTMLJscPopoverElement;
        "jsc-popover-container": HTMLJscPopoverContainerElement;
        "jsc-progress": HTMLJscProgressElement;
        "jsc-radio": HTMLJscRadioElement;
        "jsc-radio-group": HTMLJscRadioGroupElement;
        "jsc-range": HTMLJscRangeElement;
        "jsc-rating": HTMLJscRatingElement;
        "jsc-row": HTMLJscRowElement;
        "jsc-select": HTMLJscSelectElement;
        "jsc-speech-input": HTMLJscSpeechInputElement;
        "jsc-stat": HTMLJscStatElement;
        "jsc-tabs": HTMLJscTabsElement;
        "jsc-text": HTMLJscTextElement;
        "jsc-textbox": HTMLJscTextboxElement;
        "jsc-toast": HTMLJscToastElement;
        "jsc-toggle": HTMLJscToggleElement;
        "jsc-tooltip": HTMLJscTooltipElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface GraphNodeInfo {
        "context"?: { [key: string]: any };
        "details"?: { [key: string]: any };
        "info"?: { [key: string]: any };
        "selectedInfoTab"?: 'details' | 'context' | 'info';
    }
    interface GraphWalkerRunner {
        "nodeId"?: string;
        "onWalkerCompleted"?: (event: GraphWalkerRunnerCustomEvent<string>) => void;
        "sentinel"?: string;
        "serverUrl"?: string;
        "walkers"?: Walker[];
    }
    interface JscAlert {
        "css"?: string;
        "events"?: string;
        "message"?: string;
        "name"?: string;
        "operations"?: any;
        "palette"?: 'success' | 'info' | 'warning' | 'error';
    }
    interface JscAnchor {
        "css"?: string;
        "events"?: string;
        "hover"?: 'true' | 'false';
        "href"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent' | 'neutral';
        "target"?: string;
    }
    interface JscApp {
        "markup"?: JaseciComponent[];
        "onOnRender"?: (event: JscAppCustomEvent<string>) => void;
    }
    interface JscAuthForm {
        "css"?: string;
        "events"?: string;
        "hideNameField"?: string;
        "mode"?: 'signup' | 'login';
        "name"?: string;
        "onServerUrlChanged"?: (event: JscAuthFormCustomEvent<string>) => void;
        "operations"?: any;
        "redirectURL"?: string;
        "requireActivation"?: 'true' | 'false';
        "serverURL"?: string;
        "tokenKey"?: string;
    }
    interface JscAvatar {
        "css"?: string;
        "events"?: string;
        "name"?: string;
        "operations"?: any;
        "placeholder"?: string;
        "size"?: string;
        "src"?: string;
        "variant"?: string;
    }
    interface JscBadge {
        "css"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
        "palette"?: string;
        "size"?: string;
    }
    interface JscBreadcrumbs {
        "css"?: string;
        "events"?: string;
        "label"?: string;
        "links"?: string;
        "name"?: string;
        "operations"?: string;
    }
    interface JscButton {
        "active"?: string;
        "block"?: string;
        "color"?: string;
        "css"?: string;
        "events"?: string;
        "fullWidth"?: string;
        "label"?: string;
        "name"?: string;
        "noRadius"?: string;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent' | 'link' | 'info' | 'success' | 'warning' | 'error' | 'ghost';
        "size"?: 'sm' | 'md' | 'lg' | 'xs';
        "tooltip"?: string;
        "tooltipPalette"?: string;
        "tooltipPosition"?: string;
        "variant"?: 'default' | 'link' | 'ghost';
    }
    interface JscButtonGroup {
        "buttons"?: string;
        "css"?: string;
        "events"?: string;
        "name"?: string;
        "operations"?: any;
    }
    interface JscCard {
        "css"?: string;
        "events"?: string;
        "name"?: string;
        "operations"?: any;
        "radius"?: 'sm' | 'md' | 'lg' | 'full';
        "shadow"?: 'sm' | 'md' | 'lg' | 'xl';
        "title"?: string;
        "variant"?: 'shadow' | 'outline';
    }
    interface JscCarousel {
        "css"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
        "palette"?: string;
        "placeholder"?: string;
        "size"?: string;
        "slide"?: string;
    }
    interface JscCheckbox {
        "css"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChanged"?: (event: JscCheckboxCustomEvent<string>) => void;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent';
        "placeholder"?: string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg';
        "type"?: string;
        "value"?: string;
    }
    interface JscChip {
        "css"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
    }
    interface JscCollapse {
        "css"?: string;
        "events"?: string;
        "icon"?: 'plus' | 'arrow';
        "label"?: string;
        "name"?: string;
        "operations"?: any;
        "palette"?: 'primary' | 'secondary' | 'accent';
    }
    interface JscColumn {
        "css"?: string;
        "events"?: string;
        "items"?: ItemsPropValue;
        "justify"?: JustifyPropValue;
        "name"?: string;
        "operations"?: string;
    }
    interface JscContainer {
        "css"?: string;
        "events"?: string;
        "name"?: string;
        "operations"?: any;
    }
    interface JscDatagrid {
        "css"?: string;
        "currentPage"?: number;
        "events"?: string;
        "headings"?: string;
        "itemsPerPage"?: number;
        "maxPages"?: number;
        "name"?: string;
        "operations"?: any;
        "rowData"?: [][];
        "rows"?: { context: any }[];
        "server"?: string;
        "snt"?: string;
        "sortOrder"?: {};
        "token"?: string;
        "variant"?: 'striped' | 'default';
        "walker"?: string;
    }
    interface JscDatalist {
        "body"?: string;
        "css"?: string;
        "data"?: [];
        "events"?: string;
        "getters"?: string;
        "layout"?: 'Column' | 'Row' | 'None';
        "layoutProps"?: string;
        "name"?: string;
        "operations"?: string;
        "server"?: string;
        "snt"?: string;
        "template"?: string;
        "token"?: string;
        "walker"?: string;
    }
    interface JscDatePicker {
        "css"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
        "type"?: 'date' | 'datetime';
        "value"?: string;
    }
    interface JscDialog {
        "css"?: string;
        "events"?: string;
        "listeners"?: string;
        "name"?: string;
        "open"?: string;
        "operations"?: any;
        "title"?: string;
    }
    interface JscDialogContainer {
        "closeDialog"?: () => void;
        "label"?: string;
    }
    interface JscDivider {
        "color"?: string;
        "css"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
        "orientation"?: string;
        "size"?: string;
    }
    interface JscDrawer {
        "css"?: string;
        "events"?: string;
        "listeners"?: string;
        "name"?: string;
        "open"?: string;
        "operations"?: any;
        "title"?: string;
    }
    interface JscDropdown {
        "buttonProps"?: string;
        "css"?: string;
        "events"?: string;
        "items"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
    }
    interface JscDropdownItem {
        "css"?: string;
        "events"?: string;
        "href"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: string;
        "target"?: string;
    }
    interface JscGraph {
        "css"?: string;
        "events"?: string;
        "graphId"?: string;
        "height"?: string;
        "onFocus"?: 'expand' | 'isolate';
        "token"?: string;
    }
    interface JscGraphContextMenu {
        "onDisableZoom"?: (event: JscGraphContextMenuCustomEvent<any>) => void;
        "onEnableZoom"?: (event: JscGraphContextMenuCustomEvent<any>) => void;
        "onExpandNode"?: (event: JscGraphContextMenuCustomEvent<GraphNode>) => void;
        "onExpandNodeRecursively"?: (event: JscGraphContextMenuCustomEvent<GraphNode>) => void;
        "onHideEdgeGroup"?: (event: JscGraphContextMenuCustomEvent<GraphEdge>) => void;
        "onHideNodeGroup"?: (event: JscGraphContextMenuCustomEvent<GraphNode>) => void;
    }
    interface JscHero {
        "action"?: string;
        "backgroundImage"?: string;
        "css"?: string;
        "description"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
    }
    interface JscInputbox {
        "altLabel"?: string;
        "css"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChanged"?: (event: JscInputboxCustomEvent<string>) => void;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'link' | 'info' | 'success' | 'warning' | 'error';
        "placeholder"?: string;
        "size"?: 'xs' | 'lg' | 'md' | 'sm';
        "type"?: string;
        "value"?: string;
    }
    interface JscLabel {
        "htmlFor"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: string;
    }
    interface JscNavBar {
        "css"?: string;
        "events"?: string;
        /**
          * The title of the app bar.
         */
        "label"?: string;
        "links"?: string;
        "name"?: string;
        "operations"?: string;
    }
    interface JscNavLink {
        "css"?: string;
        "events"?: string;
        "href"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: string;
        "target"?: string;
    }
    interface JscPopover {
        "css"?: string;
        "events"?: string;
        "left"?: string;
        "listeners"?: string;
        "name"?: string;
        "open"?: string;
        "operations"?: any;
        "target"?: string;
        "title"?: string;
        "top"?: string;
    }
    interface JscPopoverContainer {
        "closePopover"?: () => void;
        "label"?: string;
        "left"?: string;
        "open"?: boolean;
        "top"?: string;
    }
    interface JscProgress {
        "css"?: string;
        "events"?: string;
        "max"?: number;
        "name"?: string;
        "operations"?: any;
        "palette"?: string;
        "size"?: string;
        "value"?: number;
    }
    interface JscRadio {
        "altLabel"?: string;
        "css"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChanged"?: (event: JscRadioCustomEvent<string>) => void;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'link' | 'info' | 'success' | 'warning' | 'error';
        "placeholder"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface JscRadioGroup {
        "css"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: string;
        "options"?: string;
        "palette"?: string;
        "placeholder"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface JscRange {
        "altLabel"?: string;
        "css"?: string;
        "defaultValue"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "max"?: string;
        "min"?: string;
        "name"?: string;
        "onValueChanged"?: (event: JscRangeCustomEvent<string>) => void;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent';
        "placeholder"?: string;
        "showValue"?: string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg';
        "type"?: string;
        "value"?: string;
    }
    interface JscRating {
        "css"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent' | 'neutral' | 'warning' | 'error' | 'info' | 'success';
        "stars"?: string;
        "value"?: string;
    }
    interface JscRow {
        "css"?: string;
        "events"?: string;
        "gap"?: string;
        "items"?: ItemsPropValue;
        "justify"?: JustifyPropValue;
        "name"?: string;
        "operations"?: string;
    }
    interface JscSelect {
        "altLabel"?: string;
        "css"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChanged"?: (event: JscSelectCustomEvent<string>) => void;
        "operations"?: string;
        "options"?: string | { label: string }[];
        "palette"?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'link' | 'info' | 'success' | 'warning' | 'error';
        "placeholder"?: string;
        "selected"?: string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg';
        "type"?: string;
        "value"?: string;
    }
    interface JscSpeechInput {
        "active"?: boolean;
        "altLabel"?: string;
        "css"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChanged"?: (event: JscSpeechInputCustomEvent<string>) => void;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'link' | 'info' | 'success' | 'warning' | 'error';
        "placeholder"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface JscStat {
        "css"?: string;
        "description"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
        "stats"?: string;
        "total"?: string;
        "value"?: string;
    }
    interface JscTabs {
        "container"?: HTMLElement;
        "content"?: string;
        "css"?: string;
        "events"?: string;
        "name"?: string;
        "operations"?: any;
        "selectedTab"?: string;
        "tabs"?: string;
        "tabsComps"?: { name: string; label: string; render: JaseciComponent[] }[];
        "variant"?: 'boxed' | 'lifted' | 'basic' | 'bordered';
    }
    interface JscText {
        "css"?: string;
        "events"?: string;
        "name"?: string;
        "operations"?: string;
        "value"?: string;
        "variant"?: 'p' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface JscTextbox {
        "altLabel"?: string;
        "css"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChanged"?: (event: JscTextboxCustomEvent<string>) => void;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent';
        "placeholder"?: string;
        "value"?: string;
    }
    interface JscToast {
        "css"?: string;
        "events"?: string;
        "name"?: string;
        "operations"?: any;
    }
    interface JscToggle {
        "altLabel"?: string;
        "css"?: string;
        "events"?: string;
        "fullwidth"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChanged"?: (event: JscToggleCustomEvent<string>) => void;
        "operations"?: string;
        "palette"?: 'primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error';
        "placeholder"?: string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg';
        "type"?: string;
        "value"?: string;
    }
    interface JscTooltip {
        "css"?: string;
        "events"?: string;
        "label"?: string;
        "name"?: string;
        "operations"?: any;
        "target"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "graph-node-info": GraphNodeInfo;
        "graph-walker-runner": GraphWalkerRunner;
        "jsc-alert": JscAlert;
        "jsc-anchor": JscAnchor;
        "jsc-app": JscApp;
        "jsc-auth-form": JscAuthForm;
        "jsc-avatar": JscAvatar;
        "jsc-badge": JscBadge;
        "jsc-breadcrumbs": JscBreadcrumbs;
        "jsc-button": JscButton;
        "jsc-button-group": JscButtonGroup;
        "jsc-card": JscCard;
        "jsc-carousel": JscCarousel;
        "jsc-checkbox": JscCheckbox;
        "jsc-chip": JscChip;
        "jsc-collapse": JscCollapse;
        "jsc-column": JscColumn;
        "jsc-container": JscContainer;
        "jsc-datagrid": JscDatagrid;
        "jsc-datalist": JscDatalist;
        "jsc-date-picker": JscDatePicker;
        "jsc-dialog": JscDialog;
        "jsc-dialog-container": JscDialogContainer;
        "jsc-divider": JscDivider;
        "jsc-drawer": JscDrawer;
        "jsc-dropdown": JscDropdown;
        "jsc-dropdown-item": JscDropdownItem;
        "jsc-graph": JscGraph;
        "jsc-graph-context-menu": JscGraphContextMenu;
        "jsc-hero": JscHero;
        "jsc-inputbox": JscInputbox;
        "jsc-label": JscLabel;
        "jsc-nav-bar": JscNavBar;
        "jsc-nav-link": JscNavLink;
        "jsc-popover": JscPopover;
        "jsc-popover-container": JscPopoverContainer;
        "jsc-progress": JscProgress;
        "jsc-radio": JscRadio;
        "jsc-radio-group": JscRadioGroup;
        "jsc-range": JscRange;
        "jsc-rating": JscRating;
        "jsc-row": JscRow;
        "jsc-select": JscSelect;
        "jsc-speech-input": JscSpeechInput;
        "jsc-stat": JscStat;
        "jsc-tabs": JscTabs;
        "jsc-text": JscText;
        "jsc-textbox": JscTextbox;
        "jsc-toast": JscToast;
        "jsc-toggle": JscToggle;
        "jsc-tooltip": JscTooltip;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "graph-node-info": LocalJSX.GraphNodeInfo & JSXBase.HTMLAttributes<HTMLGraphNodeInfoElement>;
            "graph-walker-runner": LocalJSX.GraphWalkerRunner & JSXBase.HTMLAttributes<HTMLGraphWalkerRunnerElement>;
            "jsc-alert": LocalJSX.JscAlert & JSXBase.HTMLAttributes<HTMLJscAlertElement>;
            "jsc-anchor": LocalJSX.JscAnchor & JSXBase.HTMLAttributes<HTMLJscAnchorElement>;
            "jsc-app": LocalJSX.JscApp & JSXBase.HTMLAttributes<HTMLJscAppElement>;
            "jsc-auth-form": LocalJSX.JscAuthForm & JSXBase.HTMLAttributes<HTMLJscAuthFormElement>;
            "jsc-avatar": LocalJSX.JscAvatar & JSXBase.HTMLAttributes<HTMLJscAvatarElement>;
            "jsc-badge": LocalJSX.JscBadge & JSXBase.HTMLAttributes<HTMLJscBadgeElement>;
            "jsc-breadcrumbs": LocalJSX.JscBreadcrumbs & JSXBase.HTMLAttributes<HTMLJscBreadcrumbsElement>;
            "jsc-button": LocalJSX.JscButton & JSXBase.HTMLAttributes<HTMLJscButtonElement>;
            "jsc-button-group": LocalJSX.JscButtonGroup & JSXBase.HTMLAttributes<HTMLJscButtonGroupElement>;
            "jsc-card": LocalJSX.JscCard & JSXBase.HTMLAttributes<HTMLJscCardElement>;
            "jsc-carousel": LocalJSX.JscCarousel & JSXBase.HTMLAttributes<HTMLJscCarouselElement>;
            "jsc-checkbox": LocalJSX.JscCheckbox & JSXBase.HTMLAttributes<HTMLJscCheckboxElement>;
            "jsc-chip": LocalJSX.JscChip & JSXBase.HTMLAttributes<HTMLJscChipElement>;
            "jsc-collapse": LocalJSX.JscCollapse & JSXBase.HTMLAttributes<HTMLJscCollapseElement>;
            "jsc-column": LocalJSX.JscColumn & JSXBase.HTMLAttributes<HTMLJscColumnElement>;
            "jsc-container": LocalJSX.JscContainer & JSXBase.HTMLAttributes<HTMLJscContainerElement>;
            "jsc-datagrid": LocalJSX.JscDatagrid & JSXBase.HTMLAttributes<HTMLJscDatagridElement>;
            "jsc-datalist": LocalJSX.JscDatalist & JSXBase.HTMLAttributes<HTMLJscDatalistElement>;
            "jsc-date-picker": LocalJSX.JscDatePicker & JSXBase.HTMLAttributes<HTMLJscDatePickerElement>;
            "jsc-dialog": LocalJSX.JscDialog & JSXBase.HTMLAttributes<HTMLJscDialogElement>;
            "jsc-dialog-container": LocalJSX.JscDialogContainer & JSXBase.HTMLAttributes<HTMLJscDialogContainerElement>;
            "jsc-divider": LocalJSX.JscDivider & JSXBase.HTMLAttributes<HTMLJscDividerElement>;
            "jsc-drawer": LocalJSX.JscDrawer & JSXBase.HTMLAttributes<HTMLJscDrawerElement>;
            "jsc-dropdown": LocalJSX.JscDropdown & JSXBase.HTMLAttributes<HTMLJscDropdownElement>;
            "jsc-dropdown-item": LocalJSX.JscDropdownItem & JSXBase.HTMLAttributes<HTMLJscDropdownItemElement>;
            "jsc-graph": LocalJSX.JscGraph & JSXBase.HTMLAttributes<HTMLJscGraphElement>;
            "jsc-graph-context-menu": LocalJSX.JscGraphContextMenu & JSXBase.HTMLAttributes<HTMLJscGraphContextMenuElement>;
            "jsc-hero": LocalJSX.JscHero & JSXBase.HTMLAttributes<HTMLJscHeroElement>;
            "jsc-inputbox": LocalJSX.JscInputbox & JSXBase.HTMLAttributes<HTMLJscInputboxElement>;
            "jsc-label": LocalJSX.JscLabel & JSXBase.HTMLAttributes<HTMLJscLabelElement>;
            "jsc-nav-bar": LocalJSX.JscNavBar & JSXBase.HTMLAttributes<HTMLJscNavBarElement>;
            "jsc-nav-link": LocalJSX.JscNavLink & JSXBase.HTMLAttributes<HTMLJscNavLinkElement>;
            "jsc-popover": LocalJSX.JscPopover & JSXBase.HTMLAttributes<HTMLJscPopoverElement>;
            "jsc-popover-container": LocalJSX.JscPopoverContainer & JSXBase.HTMLAttributes<HTMLJscPopoverContainerElement>;
            "jsc-progress": LocalJSX.JscProgress & JSXBase.HTMLAttributes<HTMLJscProgressElement>;
            "jsc-radio": LocalJSX.JscRadio & JSXBase.HTMLAttributes<HTMLJscRadioElement>;
            "jsc-radio-group": LocalJSX.JscRadioGroup & JSXBase.HTMLAttributes<HTMLJscRadioGroupElement>;
            "jsc-range": LocalJSX.JscRange & JSXBase.HTMLAttributes<HTMLJscRangeElement>;
            "jsc-rating": LocalJSX.JscRating & JSXBase.HTMLAttributes<HTMLJscRatingElement>;
            "jsc-row": LocalJSX.JscRow & JSXBase.HTMLAttributes<HTMLJscRowElement>;
            "jsc-select": LocalJSX.JscSelect & JSXBase.HTMLAttributes<HTMLJscSelectElement>;
            "jsc-speech-input": LocalJSX.JscSpeechInput & JSXBase.HTMLAttributes<HTMLJscSpeechInputElement>;
            "jsc-stat": LocalJSX.JscStat & JSXBase.HTMLAttributes<HTMLJscStatElement>;
            "jsc-tabs": LocalJSX.JscTabs & JSXBase.HTMLAttributes<HTMLJscTabsElement>;
            "jsc-text": LocalJSX.JscText & JSXBase.HTMLAttributes<HTMLJscTextElement>;
            "jsc-textbox": LocalJSX.JscTextbox & JSXBase.HTMLAttributes<HTMLJscTextboxElement>;
            "jsc-toast": LocalJSX.JscToast & JSXBase.HTMLAttributes<HTMLJscToastElement>;
            "jsc-toggle": LocalJSX.JscToggle & JSXBase.HTMLAttributes<HTMLJscToggleElement>;
            "jsc-tooltip": LocalJSX.JscTooltip & JSXBase.HTMLAttributes<HTMLJscTooltipElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
