"""Genrate a control flow graph from genarated bytecode.

This pass generates a control flow graph from the bytecode generated by the previous pass.
"""

import ast as ast3
import marshal


import jaclang.compiler.absyntree as ast
from jaclang.compiler.passes import Pass
from jaclang.runtimelib.machine import JacMachine, JacProgram, ShellGhost

class CfgGenPass(Pass):
    """Control flow graph generation pass."""

    def before_pass(self) -> None:
        """Before pass."""
        return super().before_pass()
    
    def enter_module(self, node: ast.Module) -> None:
        """Sub objects.

        name: str,
        doc: Token,
        body: Optional['Elements'],
        mod_path: str,
        is_imported: bool,
        sym_tab: Optional[SymbolTable],
        """

        pass