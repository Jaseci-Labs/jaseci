import jaclang.compiler.absyntree as ast
import lsprotocol.types as lspt
from jaclang.compiler.codeloc import CodeLocInfo as CodeLocInfo
from jaclang.compiler.constant import SymbolType as SymbolType
from jaclang.compiler.passes.transform import Alert as Alert
from jaclang.compiler.symtable import Symbol as Symbol, SymbolTable as SymbolTable
from jaclang.vendor.pygls import uris as uris
from typing import Any, Awaitable, Callable, Coroutine, ParamSpec, TypeVar

T = TypeVar("T", bound=Callable[..., Coroutine[Any, Any, Any]])
P = ParamSpec("P")

def gen_diagnostics(
    from_path: str, errors: list[Alert], warnings: list[Alert]
) -> list[lspt.Diagnostic]: ...
def debounce(wait: float) -> Callable[[T], Callable[..., Awaitable[None]]]: ...
def sym_tab_list(sym_tab: SymbolTable, file_path: str) -> list[SymbolTable]: ...
def find_node_by_position(
    tokens: list[tuple[lspt.Position, int, int, ast.AstSymbolNode]],
    line: int,
    position: int,
) -> ast.AstSymbolNode | None: ...
def find_index(sem_tokens: list[int], line: int, char: int) -> int | None: ...
def get_symbols_for_outline(node: SymbolTable) -> list[lspt.DocumentSymbol]: ...
def owner_sym(table: SymbolTable) -> Symbol | None: ...
def create_range(loc: CodeLocInfo) -> lspt.Range: ...
def kind_map(sub_tab: ast.AstNode) -> lspt.SymbolKind: ...
def label_map(sub_tab: SymbolType) -> lspt.CompletionItemKind: ...
def get_mod_path(mod_path: ast.ModulePath, name_node: ast.Name) -> str | None: ...
def get_item_path(mod_item: ast.ModuleItem) -> tuple[str, tuple[int, int]] | None: ...
def get_definition_range(
    filename: str, name: str
) -> tuple[str, tuple[int, int]] | None: ...
def collect_all_symbols_in_scope(
    sym_tab: SymbolTable, up_tree: bool = True
) -> list[lspt.CompletionItem]: ...
def parse_symbol_path(text: str, dot_position: int) -> list[str]: ...
def resolve_symbol_path(sym_name: str, node_tab: SymbolTable) -> str: ...
def find_symbol_table(path: str, current_tab: SymbolTable | None) -> SymbolTable: ...
def resolve_completion_symbol_table(
    mod_tab: SymbolTable,
    current_symbol_path: list[str],
    current_tab: SymbolTable | None,
) -> list[lspt.CompletionItem]: ...
def get_token_start(
    token_index: int | None, sem_tokens: list[int]
) -> tuple[int, int, int]: ...
def find_surrounding_tokens(
    change_start_line: int,
    change_start_char: int,
    change_end_line: int,
    change_end_char: int,
    sem_tokens: list[int],
) -> tuple[int | None, int | None, bool]: ...
def get_line_of_code(line_number: int, lines: list[str]) -> tuple[str, int] | None: ...
