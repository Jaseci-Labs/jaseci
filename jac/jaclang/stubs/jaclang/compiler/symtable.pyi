import jaclang.compiler.absyntree as ast
from _typeshed import Incomplete
from jaclang.compiler.constant import (
    SymbolAccess as SymbolAccess,
    SymbolType as SymbolType,
)
from typing import Sequence

__all__ = ["Symbol", "SymbolTable", "SymbolType", "SymbolAccess"]

class Symbol:
    defn: Incomplete
    uses: Incomplete
    access: Incomplete
    parent_tab: Incomplete
    def __init__(
        self, defn: ast.NameAtom, access: SymbolAccess, parent_tab: SymbolTable
    ) -> None: ...
    @property
    def decl(self) -> ast.NameAtom: ...
    @property
    def sym_name(self) -> str: ...
    @property
    def sym_type(self) -> SymbolType: ...
    @property
    def sym_dotted_name(self) -> str: ...
    def add_defn(self, node: ast.NameAtom) -> None: ...
    def add_use(self, node: ast.NameAtom) -> None: ...

class SymbolTable:
    name: Incomplete
    owner: Incomplete
    parent: Incomplete
    kid: Incomplete
    tab: Incomplete
    inherit: Incomplete
    def __init__(
        self, name: str, owner: ast.AstNode, parent: SymbolTable | None = None
    ) -> None: ...
    def get_parent(self) -> SymbolTable | None: ...
    def lookup(self, name: str, deep: bool = True) -> Symbol | None: ...
    def insert(
        self,
        node: ast.AstSymbolNode,
        access_spec: ast.AstAccessNode | None | SymbolAccess = None,
        single: bool = False,
    ) -> ast.AstNode | None: ...
    def find_scope(self, name: str) -> SymbolTable | None: ...
    def push_scope(self, name: str, key_node: ast.AstNode) -> SymbolTable: ...
    def inherit_sym_tab(self, target_sym_tab: SymbolTable) -> None: ...
    def def_insert(
        self,
        node: ast.AstSymbolNode,
        access_spec: ast.AstAccessNode | None | SymbolAccess = None,
        single_decl: str | None = None,
    ) -> Symbol | None: ...
    def chain_def_insert(self, node_list: list[ast.AstSymbolNode]) -> None: ...
    def use_lookup(
        self, node: ast.AstSymbolNode, sym_table: SymbolTable | None = None
    ) -> Symbol | None: ...
    def chain_use_lookup(self, node_list: Sequence[ast.AstSymbolNode]) -> None: ...
    def update_py_ctx_for_def(self, node: ast.AstSymbolNode) -> None: ...
    def inherit_baseclasses_sym(self, node: ast.Architype | ast.Enum) -> None: ...
    def pp(self, depth: int | None = None) -> str: ...
    def dotgen(self) -> str: ...
