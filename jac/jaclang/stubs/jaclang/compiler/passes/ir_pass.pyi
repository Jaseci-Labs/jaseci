import jaclang.compiler.absyntree as ast
from _typeshed import Incomplete
from jaclang.compiler.passes.transform import Transform as Transform
from jaclang.settings import settings as settings
from jaclang.utils.helpers import pascal_to_snake as pascal_to_snake
from typing import TypeVar

T = TypeVar("T", bound=ast.AstNode)

class Pass(Transform[T]):
    term_signal: bool
    prune_signal: bool
    ir: Incomplete
    time_taken: float
    def __init__(self, input_ir: T, prior: Transform | None) -> None: ...
    def before_pass(self) -> None: ...
    def after_pass(self) -> None: ...
    def enter_node(self, node: ast.AstNode) -> None: ...
    def exit_node(self, node: ast.AstNode) -> None: ...
    def terminate(self) -> None: ...
    def prune(self) -> None: ...
    @staticmethod
    def get_all_sub_nodes(
        node: ast.AstNode, typ: type[T], brute_force: bool = False
    ) -> list[T]: ...
    @staticmethod
    def has_parent_of_type(node: ast.AstNode, typ: type[T]) -> T | None: ...
    @staticmethod
    def has_parent_of_node(node: ast.AstNode, parent: ast.AstNode) -> bool: ...
    def recalculate_parents(self, node: ast.AstNode) -> None: ...
    def transform(self, ir: T) -> ast.AstNode: ...
    cur_node: Incomplete
    def traverse(self, node: ast.AstNode) -> ast.AstNode: ...
    def error(self, msg: str, node_override: ast.AstNode | None = None) -> None: ...
    def warning(self, msg: str, node_override: ast.AstNode | None = None) -> None: ...
    def ice(self, msg: str = "Something went horribly wrong!") -> RuntimeError: ...

class PrinterPass(Pass):
    def enter_node(self, node: ast.AstNode) -> None: ...
    def exit_node(self, node: ast.AstNode) -> None: ...
