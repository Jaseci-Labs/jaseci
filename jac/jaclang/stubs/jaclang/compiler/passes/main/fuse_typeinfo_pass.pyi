import jaclang.compiler.absyntree as ast
import mypy.nodes as MypyNodes
import mypy.types as MypyTypes
from jaclang.compiler.passes import Pass as Pass
from jaclang.compiler.symtable import SymbolTable as SymbolTable
from jaclang.settings import settings as settings
from jaclang.utils.helpers import pascal_to_snake as pascal_to_snake
from jaclang.vendor.mypy.nodes import Node as VNode
from mypy.checkexpr import Type as MyType
from typing import TypeVar

T = TypeVar("T", bound=ast.AstSymbolNode)

class FuseTypeInfoPass(Pass):
    node_type_hash: dict[MypyNodes.Node | VNode, MyType]
    def enter_name(self, node: ast.NameAtom) -> None: ...
    def enter_module_path(self, node: ast.ModulePath) -> None: ...
    def enter_module_item(self, node: ast.ModuleItem) -> None: ...
    def enter_architype(self, node: ast.Architype) -> None: ...
    def enter_arch_def(self, node: ast.ArchDef) -> None: ...
    def enter_enum(self, node: ast.Enum) -> None: ...
    def enter_enum_def(self, node: ast.EnumDef) -> None: ...
    def enter_ability(self, node: ast.Ability) -> None: ...
    def enter_ability_def(self, node: ast.AbilityDef) -> None: ...
    def enter_param_var(self, node: ast.ParamVar) -> None: ...
    def enter_has_var(self, node: ast.HasVar) -> None: ...
    def exit_has_var(self, node: ast.HasVar) -> None: ...
    def enter_multi_string(self, node: ast.MultiString) -> None: ...
    def enter_f_string(self, node: ast.FString) -> None: ...
    def enter_list_val(self, node: ast.ListVal) -> None: ...
    def enter_set_val(self, node: ast.SetVal) -> None: ...
    def enter_tuple_val(self, node: ast.TupleVal) -> None: ...
    def enter_dict_val(self, node: ast.DictVal) -> None: ...
    def enter_list_compr(self, node: ast.ListCompr) -> None: ...
    def enter_dict_compr(self, node: ast.DictCompr) -> None: ...
    def enter_index_slice(self, node: ast.IndexSlice) -> None: ...
    def enter_arch_ref(self, node: ast.ArchRef) -> None: ...
    def enter_special_var_ref(self, node: ast.SpecialVarRef) -> None: ...
    def enter_edge_op_ref(self, node: ast.EdgeOpRef) -> None: ...
    def enter_filter_compr(self, node: ast.FilterCompr) -> None: ...
    def enter_assign_compr(self, node: ast.AssignCompr) -> None: ...
    def enter_int(self, node: ast.Int) -> None: ...
    def enter_float(self, node: ast.Float) -> None: ...
    def enter_string(self, node: ast.String) -> None: ...
    def enter_bool(self, node: ast.Bool) -> None: ...
    def enter_builtin_type(self, node: ast.BuiltinType) -> None: ...
    def get_type_from_instance(
        self, node: ast.AstSymbolNode, mypy_type: MypyTypes.Instance
    ) -> None: ...
    def get_type_from_callable_type(
        self, node: ast.AstSymbolNode, mypy_type: MypyTypes.CallableType
    ) -> None: ...
    def get_type_from_overloaded(
        self, node: ast.AstSymbolNode, mypy_type: MypyTypes.Overloaded
    ) -> None: ...
    def get_type_from_none_type(
        self, node: ast.AstSymbolNode, mypy_type: MypyTypes.NoneType
    ) -> None: ...
    def get_type_from_any_type(
        self, node: ast.AstSymbolNode, mypy_type: MypyTypes.AnyType
    ) -> None: ...
    def get_type_from_tuple_type(
        self, node: ast.AstSymbolNode, mypy_type: MypyTypes.TupleType
    ) -> None: ...
    def exit_assignment(self, node: ast.Assignment) -> None: ...
    def exit_name(self, node: ast.Name) -> None: ...
