import jaclang.compiler.absyntree as ast
from _typeshed import Incomplete
from jaclang.compiler.passes import Pass as Pass
from jaclang.compiler.passes.main import SubNodeTabPass as SubNodeTabPass
from jaclang.compiler.symtable import Symbol as Symbol, SymbolTable as SymbolTable

class DeclImplMatchPass(Pass):
    def enter_module(self, node: ast.Module) -> None: ...
    ir: Incomplete
    def after_pass(self) -> None: ...
    def defn_lookup(self, lookup: Symbol) -> ast.NameAtom | None: ...
    def connect_def_impl(self, sym_tab: SymbolTable) -> None: ...
