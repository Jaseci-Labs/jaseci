import ast as py_ast
import jaclang.compiler.absyntree as ast
from _typeshed import Incomplete
from jaclang.compiler.constant import Tokens as Tok
from jaclang.compiler.passes.ir_pass import Pass as Pass
from jaclang.utils.helpers import pascal_to_snake as pascal_to_snake
from typing import TypeAlias, TypeVar

T = TypeVar("T", bound=ast.AstNode)

class PyastBuildPass(Pass[ast.PythonModuleAst]):
    mod_path: Incomplete
    def __init__(self, input_ir: ast.PythonModuleAst) -> None: ...
    cur_node: Incomplete
    def nu(self, node: T) -> T: ...
    def pp(self, node: py_ast.AST) -> None: ...
    def convert(self, node: py_ast.AST) -> ast.AstNode: ...
    ir: Incomplete
    def transform(self, ir: ast.PythonModuleAst) -> ast.Module: ...
    def extract_with_entry(
        self, body: list[ast.AstNode], exclude_types: TypeAlias = ...
    ) -> list[T | ast.ModuleCode]: ...
    def proc_module(self, node: py_ast.Module) -> ast.Module: ...
    def proc_function_def(
        self, node: py_ast.FunctionDef | py_ast.AsyncFunctionDef
    ) -> ast.Ability: ...
    def proc_async_function_def(self, node: py_ast.AsyncFunctionDef) -> ast.Ability: ...
    def proc_class_def(self, node: py_ast.ClassDef) -> ast.Architype | ast.Enum: ...
    def proc_return(self, node: py_ast.Return) -> ast.ReturnStmt | None: ...
    def proc_delete(self, node: py_ast.Delete) -> ast.DeleteStmt: ...
    def proc_assign(self, node: py_ast.Assign) -> ast.Assignment: ...
    def proc_aug_assign(self, node: py_ast.AugAssign) -> ast.Assignment: ...
    def proc_ann_assign(self, node: py_ast.AnnAssign) -> ast.Assignment: ...
    def proc_for(self, node: py_ast.For) -> ast.InForStmt: ...
    def proc_async_for(self, node: py_ast.AsyncFor) -> ast.InForStmt: ...
    def proc_while(self, node: py_ast.While) -> ast.WhileStmt: ...
    def proc_if(self, node: py_ast.If) -> ast.IfStmt: ...
    def proc_with(self, node: py_ast.With) -> ast.WithStmt: ...
    def proc_async_with(self, node: py_ast.AsyncWith) -> ast.WithStmt: ...
    def proc_raise(self, node: py_ast.Raise) -> ast.RaiseStmt: ...
    def proc_assert(self, node: py_ast.Assert) -> ast.AssertStmt: ...
    def proc_attribute(self, node: py_ast.Attribute) -> ast.AtomTrailer: ...
    def proc_await(self, node: py_ast.Await) -> ast.AwaitExpr: ...
    def proc_bin_op(self, node: py_ast.BinOp) -> ast.AtomUnit: ...
    def proc_unary_op(self, node: py_ast.UnaryOp) -> ast.UnaryExpr: ...
    def proc_bool_op(self, node: py_ast.BoolOp) -> ast.BoolExpr: ...
    def proc_break(self, node: py_ast.Break) -> ast.CtrlStmt: ...
    def proc_call(self, node: py_ast.Call) -> ast.FuncCall: ...
    def proc_compare(self, node: py_ast.Compare) -> ast.CompareExpr: ...
    def proc_constant(self, node: py_ast.Constant) -> ast.Literal: ...
    def proc_continue(self, node: py_ast.Continue) -> ast.CtrlStmt: ...
    def proc_dict(self, node: py_ast.Dict) -> ast.DictVal: ...
    def proc_dict_comp(self, node: py_ast.DictComp) -> ast.DictCompr: ...
    def proc_ellipsis(self, node: py_ast.Ellipsis) -> None: ...
    def proc_except_handler(self, node: py_ast.ExceptHandler) -> ast.Except: ...
    def proc_expr(self, node: py_ast.Expr) -> ast.ExprStmt: ...
    def proc_formatted_value(self, node: py_ast.FormattedValue) -> ast.ExprStmt: ...
    def proc_function_type(self, node: py_ast.FunctionType) -> None: ...
    def proc_generator_exp(self, node: py_ast.GeneratorExp) -> ast.GenCompr: ...
    def proc_global(self, node: py_ast.Global) -> ast.GlobalStmt: ...
    def proc_if_exp(self, node: py_ast.IfExp) -> ast.IfElseExpr: ...
    def proc_import(self, node: py_ast.Import) -> ast.Import: ...
    def proc_import_from(self, node: py_ast.ImportFrom) -> ast.Import: ...
    def proc_joined_str(self, node: py_ast.JoinedStr) -> ast.FString: ...
    def proc_lambda(self, node: py_ast.Lambda) -> ast.LambdaExpr: ...
    def proc_list(self, node: py_ast.List) -> ast.ListVal: ...
    def proc_list_comp(self, node: py_ast.ListComp) -> ast.ListCompr: ...
    def proc_match(self, node: py_ast.Match) -> ast.MatchStmt: ...
    def proc_match_as(self, node: py_ast.MatchAs) -> ast.MatchAs | ast.MatchWild: ...
    def proc_match_class(self, node: py_ast.MatchClass) -> ast.MatchArch: ...
    def proc_match_mapping(self, node: py_ast.MatchMapping) -> ast.MatchMapping: ...
    def proc_match_or(self, node: py_ast.MatchOr) -> ast.MatchOr: ...
    def proc_match_sequence(self, node: py_ast.MatchSequence) -> ast.MatchSequence: ...
    def proc_match_singleton(
        self, node: py_ast.MatchSingleton
    ) -> ast.MatchSingleton: ...
    def proc_match_star(self, node: py_ast.MatchStar) -> ast.MatchStar: ...
    def proc_match_value(self, node: py_ast.MatchValue) -> ast.MatchValue: ...
    def proc_name(self, node: py_ast.Name) -> ast.Name: ...
    def proc_named_expr(self, node: py_ast.NamedExpr) -> ast.BinaryExpr: ...
    def proc_nonlocal(self, node: py_ast.Nonlocal) -> ast.NonLocalStmt: ...
    def proc_pass(self, node: py_ast.Pass) -> ast.Semi: ...
    def proc_set(self, node: py_ast.Set) -> ast.SetVal: ...
    def proc_set_comp(self, node: py_ast.SetComp) -> ast.ListCompr: ...
    def proc_slice(self, node: py_ast.Slice) -> ast.IndexSlice: ...
    def proc_starred(self, node: py_ast.Starred) -> ast.UnaryExpr: ...
    def proc_subscript(self, node: py_ast.Subscript) -> ast.AtomTrailer: ...
    def proc_try(self, node: py_ast.Try | py_ast.TryStar) -> ast.TryStmt: ...
    def proc_try_star(self, node: py_ast.TryStar) -> ast.TryStmt: ...
    def proc_tuple(self, node: py_ast.Tuple) -> ast.TupleVal: ...
    def proc_yield(self, node: py_ast.Yield) -> ast.YieldExpr: ...
    def proc_yield_from(self, node: py_ast.YieldFrom) -> ast.YieldExpr: ...
    def proc_alias(self, node: py_ast.alias) -> ast.ExprAsItem: ...
    def proc_arg(self, node: py_ast.arg) -> ast.ParamVar: ...
    def proc_arguments(self, node: py_ast.arguments) -> ast.FuncSignature: ...
    def operator(self, tok: Tok, value: str) -> ast.Token: ...
    def proc_and(self, node: py_ast.And) -> ast.Token: ...
    def proc_or(self, node: py_ast.Or) -> ast.Token: ...
    def proc_add(self, node: py_ast.Add) -> ast.Token: ...
    def proc_bit_and(self, node: py_ast.BitAnd) -> ast.Token: ...
    def proc_bit_or(self, node: py_ast.BitOr) -> ast.Token: ...
    def proc_bit_xor(self, node: py_ast.BitXor) -> ast.Token: ...
    def proc_div(self, node: py_ast.Div) -> ast.Token: ...
    def proc_floor_div(self, node: py_ast.FloorDiv) -> ast.Token: ...
    def proc_l_shift(self, node: py_ast.LShift) -> ast.Token: ...
    def proc_mod(self, node: py_ast.Mod) -> ast.Token: ...
    def proc_mult(self, node: py_ast.Mult) -> ast.Token: ...
    def proc_mat_mult(self, node: py_ast.MatMult) -> ast.Token: ...
    def proc_pow(self, node: py_ast.Pow) -> ast.Token: ...
    def proc_r_shift(self, node: py_ast.RShift) -> ast.Token: ...
    def proc_sub(self, node: py_ast.Sub) -> ast.Token: ...
    def proc_invert(self, node: py_ast.Invert) -> ast.Token: ...
    def proc_not(self, node: py_ast.Not) -> ast.Token: ...
    def proc_u_add(self, node: py_ast.UAdd) -> ast.Token: ...
    def proc_u_sub(self, node: py_ast.USub) -> ast.Token: ...
    def proc_eq(self, node: py_ast.Eq) -> ast.Token: ...
    def proc_gt(self, node: py_ast.Gt) -> ast.Token: ...
    def proc_gt_e(self, node: py_ast.GtE) -> ast.Token: ...
    def proc_in(self, node: py_ast.In) -> ast.Token: ...
    def proc_is(self, node: py_ast.Is) -> ast.Token: ...
    def proc_is_not(self, node: py_ast.IsNot) -> ast.Token: ...
    def proc_lt(self, node: py_ast.Lt) -> ast.Token: ...
    def proc_lt_e(self, node: py_ast.LtE) -> ast.Token: ...
    def proc_not_eq(self, node: py_ast.NotEq) -> ast.Token: ...
    def proc_not_in(self, node: py_ast.NotIn) -> ast.Token: ...
    def proc_comprehension(self, node: py_ast.comprehension) -> ast.InnerCompr: ...
    def proc_keyword(self, node: py_ast.keyword) -> ast.KWPair: ...
    def proc_match_case(self, node: py_ast.match_case) -> ast.MatchCase: ...
    def proc_withitem(self, node: py_ast.withitem) -> ast.ExprAsItem: ...
    def proc_param_spec(self, node: py_ast.ParamSpec) -> None: ...
    def proc_type_alias(self, node: py_ast.TypeAlias) -> None: ...
    def proc_type_var(self, node: py_ast.TypeVar) -> None: ...
    def proc_type_var_tuple(self, node: py_ast.TypeVarTuple) -> None: ...
    def convert_to_doc(self, string: ast.String) -> None: ...
    def aug_op_map(self, tok_dict: dict, op: ast.Token) -> str: ...
