import jaclang.compiler.absyntree as ast
from _typeshed import Incomplete
from jaclang.compiler.passes import Pass as Pass
from jaclang.compiler.passes.main import SubNodeTabPass as SubNodeTabPass
from jaclang.settings import settings as settings
from jaclang.utils.helpers import is_standard_lib_module as is_standard_lib_module
from jaclang.utils.log import logging as logging

logger: Incomplete

class JacImportPass(Pass):
    import_table: Incomplete
    py_resolve_list: Incomplete
    def before_pass(self) -> None: ...
    cur_node: Incomplete
    run_again: bool
    def enter_module(self, node: ast.Module) -> None: ...
    def process_import(self, node: ast.Module, i: ast.ModulePath) -> None: ...
    def attach_mod_to_node(
        self, node: ast.ModulePath | ast.ModuleItem, mod: ast.Module | None
    ) -> None: ...
    def enter_module_path(self, node: ast.ModulePath) -> None: ...
    def enter_atom_trailer(self, node: ast.AtomTrailer) -> None: ...
    def import_jac_module(self, node: ast.ModulePath) -> None: ...
    def import_jac_mod_from_dir(self, target: str) -> ast.Module | None: ...
    def import_jac_mod_from_file(self, target: str) -> ast.Module | None: ...

class PyImportPass(JacImportPass):
    def before_pass(self) -> None: ...
    run_again: bool
    def process_import(self, node: ast.Module, i: ast.ModulePath) -> None: ...
    def import_py_module(
        self, node: ast.ModulePath, mod_path: str
    ) -> ast.Module | None: ...
