import shelve
from .architype import Architype as Architype
from _typeshed import Incomplete
from uuid import UUID

class Memory:
    mem: dict[UUID, Architype]
    save_obj_list: dict[UUID, Architype]
    def __init__(self) -> None: ...
    def get_obj(self, obj_id: UUID) -> Architype | None: ...
    def get_obj_from_store(self, obj_id: UUID) -> Architype | None: ...
    def has_obj(self, obj_id: UUID) -> bool: ...
    def has_obj_in_store(self, obj_id: UUID) -> bool: ...
    def save_obj(self, item: Architype, persistent: bool) -> None: ...
    def commit(self) -> None: ...
    def close(self) -> None: ...

class ShelveStorage(Memory):
    storage: shelve.Shelf | None
    def __init__(self, session: str = "") -> None: ...
    def get_obj_from_store(self, obj_id: UUID) -> Architype | None: ...
    def has_obj_in_store(self, obj_id: UUID | str) -> bool: ...
    def commit(self) -> None: ...
    session: Incomplete
    def connect(self, session: str) -> None: ...
    def close(self) -> None: ...
