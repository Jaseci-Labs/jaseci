kind: Namespace
apiVersion: v1
metadata:
  name: jsorc
  labels:
    name: jsorc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaseci-account
  namespace: jsorc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace: jsorc
  name: jaseci-orc
rules:
  - apiGroups: [
      "",
      "admissionregistration.k8s.io",
      "apps",
      "autoscaling",
      "batch",
      "certificates.k8s.io",
      "extensions",
      "networking.k8s.io",
      "policy",
      "rbac.authorization.k8s.io",
      "storage.k8s.io",
      "v1"
    ]
    resources: [
      "certificatesigningrequests",
      "clusterroles",
      "clusterrolebindings",
      "configmaps",
      "cronjobs",
      "daemonsets",
      "deployments.apps",
      "deployments",
      "endpoints",
      "horizontalpodautoscalers",
      "ingresses",
      "ingresses/status",
      "jobs",
      "limitranges",
      "mutatingwebhookconfigurations",
      "namespaces",
      "networkpolicies",
      "nodes",
      "nodes/metrics",
      "nodes/proxy",
      "persistentvolumeclaims",
      "persistentvolumes",
      "poddisruptionbudgets",
      "pods",
      "replicasets",
      "replicationcontrollers",
      "resourcequotas",
      "secrets",
      "serviceaccounts",
      "services",
      "statefulsets",
      "storageclasses",
      "validatingwebhookconfigurations",
      "volumeattachments"
    ]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
  - nonResourceURLs: [
      "/metrics"
    ]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jaseci-orc-rolebinding
  namespace: jsorc
subjects:
  - kind: ServiceAccount
    name: jaseci-account
    namespace: jsorc
roleRef:
  kind: ClusterRole
  name: jaseci-orc
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: jaseci
  namespace: jsorc
spec:
  selector:
    pod: jaseci
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaseci-up
  namespace: jsorc
data:
  prod_up: |-
    apt update; apt -y upgrade; apt -y install --no-install-recommends git g++;
    cd /jaseci;
    cd jaseci_core; source install_live.sh;
    cd ../jaseci_serv; source install_live.sh;
    jsserv wait_for_db && jsserv makemigrations base &&
    jsserv makemigrations && jsserv migrate;
    jsserv runserver 0.0.0.0:80;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaseci
  namespace: jsorc
spec:
  replicas: 1
  selector:
    matchLabels:
      pod: jaseci
  template:
    metadata:
      labels:
        pod: jaseci
      name: jaseci
    spec:
      serviceAccountName: jaseci-account
      containers:
        - name: jaseci
          image: jaseci/jee-ai:1.3.6.1
          resources:
            requests:
              memory: "6Gi"
            limits:
              memory: "10Gi"
          imagePullPolicy: IfNotPresent
          command: [bash, -c, "source script/prod_up"]
          ports:
            - containerPort: 80
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: jaseci-db-credentials
                  key: user

            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jaseci-db-credentials
                  key: password

            - name: POSTGRES_HOST
              value: jaseci-db

            - name: REDIS_HOST
              value: jaseci-redis

            - name: PROMON_HOST
              value: jaseci-prometheus-server

          volumeMounts:
            - name: prod-script
              mountPath: /script
            - name: host-mount
              mountPath: /jaseci/

      volumes:
        - name: prod-script
          configMap:
            name: jaseci-up
        - name: host-mount
          hostPath:
            path: /run/desktop/mnt/host/wsl/jaseci
            type: Directory
---
kind: Service
apiVersion: v1
metadata:
  name: jaseci-db
  namespace: jsorc
spec:
  selector:
    pod: jaseci-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: Secret
metadata:
  name: jaseci-db-credentials
  namespace: jsorc
type: Opaque
data:
  user: cG9zdGdyZXM=
  password: bGlmZWxvZ2lmeWphc2VjaQ==
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jaseci-db-pvc
  namespace: jsorc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaseci-db
  namespace: jsorc
spec:
  replicas: 1
  selector:
    matchLabels:
      pod: jaseci-db
  template:
    metadata:
      labels:
        pod: jaseci-db
    spec:
      containers:
        - name: jaseci-db
          image: postgres:alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: jaseci-db-credentials
                  key: user

            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jaseci-db-credentials
                  key: password

          ports:
            - containerPort: 5432
          volumeMounts:
            - name: jaseci-db-volume
              mountPath: /var/lib/postgresql/data
              subPath: jaseci

      volumes:
        - name: jaseci-db-volume
          persistentVolumeClaim:
            claimName: jaseci-db-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: jaseci-redis
  namespace: jsorc
spec:
  selector:
    pod: jaseci-redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaseci-redis
  namespace: jsorc
spec:
  replicas: 1
  selector:
    matchLabels:
      pod: jaseci-redis
  template:
    metadata:
      labels:
        pod: jaseci-redis
    spec:
      containers:
        - name: jaseci-redis-master
          image: redis
          imagePullPolicy: IfNotPresent
          command:
            - redis-server
            - "/redis-master/redis.conf"
          resources:
            limits:
              cpu: "0.2"
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /redis-master-data
              name: data
            - mountPath: /redis-master
              name: config
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: jaseci-redis-config
            items:
              - key: redis-config
                path: redis.conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaseci-redis-config
  namespace: jsorc
data:
  redis-config: |
    maxmemory 1000mb
    maxmemory-policy allkeys-lru
