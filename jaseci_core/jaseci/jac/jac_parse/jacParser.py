# Generated from jac.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3k")
        buf.write("\u04c0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\3")
        buf.write("\2\5\2\u00e2\n\2\3\2\7\2\u00e5\n\2\f\2\16\2\u00e8\13\2")
        buf.write("\3\2\7\2\u00eb\n\2\f\2\16\2\u00ee\13\2\3\2\3\2\3\3\3\3")
        buf.write("\3\3\3\3\5\3\u00f6\n\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4")
        buf.write("\3\4\5\4\u0101\n\4\3\5\3\5\3\5\5\5\u0106\n\5\3\5\3\5\5")
        buf.write("\5\u010a\n\5\3\5\3\5\3\5\5\5\u010f\n\5\3\5\3\5\5\5\u0113")
        buf.write("\n\5\3\5\3\5\3\5\5\5\u0118\n\5\3\5\3\5\5\5\u011c\n\5\3")
        buf.write("\5\3\5\3\5\5\5\u0121\n\5\3\5\3\5\5\5\u0125\n\5\3\5\3\5")
        buf.write("\3\5\5\5\u012a\n\5\3\5\3\5\5\5\u012e\n\5\5\5\u0130\n\5")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0139\n\6\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u013f\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b")
        buf.write("\u0149\n\b\f\b\16\b\u014c\13\b\3\b\3\b\3\t\3\t\3\t\3\t")
        buf.write("\7\t\u0154\n\t\f\t\16\t\u0157\13\t\3\t\3\t\5\t\u015b\n")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\7\t\u0162\n\t\f\t\16\t\u0165\13")
        buf.write("\t\3\t\3\t\3\t\3\t\5\t\u016b\n\t\3\n\3\n\3\n\5\n\u0170")
        buf.write("\n\n\3\n\3\n\3\13\3\13\7\13\u0176\n\13\f\13\16\13\u0179")
        buf.write("\13\13\3\13\5\13\u017c\n\13\3\13\3\13\7\13\u0180\n\13")
        buf.write("\f\13\16\13\u0183\13\13\3\13\5\13\u0186\n\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0190\n\f\3\f\3\f\3\f\5\f")
        buf.write("\u0195\n\f\3\f\3\f\5\f\u0199\n\f\3\f\3\f\5\f\u019d\n\f")
        buf.write("\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\3\20\3\21\3\21\7\21\u01b0\n\21\f\21\16\21")
        buf.write("\u01b3\13\21\3\21\3\21\3\21\3\21\5\21\u01b9\n\21\3\22")
        buf.write("\3\22\5\22\u01bd\n\22\3\23\7\23\u01c0\n\23\f\23\16\23")
        buf.write("\u01c3\13\23\3\24\3\24\5\24\u01c7\n\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u01d7\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u01e3\n\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\5\30\u01ec\n\30\3\30\5\30\u01ef\n\30\3\30\3")
        buf.write("\30\3\30\7\30\u01f4\n\30\f\30\16\30\u01f7\13\30\3\30\3")
        buf.write("\30\3\31\3\31\3\31\3\31\5\31\u01ff\n\31\3\32\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u0206\n\32\3\32\3\32\3\32\3\32\3\32\5")
        buf.write("\32\u020d\n\32\7\32\u020f\n\32\f\32\16\32\u0212\13\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\5\32\u0219\n\32\3\32\5\32\u021c")
        buf.write("\n\32\3\33\3\33\5\33\u0220\n\33\3\33\3\33\3\34\3\34\5")
        buf.write("\34\u0226\n\34\3\34\3\34\3\34\5\34\u022b\n\34\3\35\3\35")
        buf.write("\3\35\3\35\3\36\3\36\3\36\7\36\u0234\n\36\f\36\16\36\u0237")
        buf.write("\13\36\3\37\3\37\3\37\7\37\u023c\n\37\f\37\16\37\u023f")
        buf.write("\13\37\3 \3 \7 \u0243\n \f \16 \u0246\13 \3 \3 \3 \5 ")
        buf.write('\u024b\n \3!\3!\3!\3"\3"\3"\3"\3"\3"\3"\3"\3"')
        buf.write('\3"\3"\3"\3"\3"\3"\3"\3"\3"\5"\u0262\n"\3#')
        buf.write("\3#\3#\3#\7#\u0268\n#\f#\16#\u026b\13#\3#\5#\u026e\n#")
        buf.write("\3$\3$\3$\5$\u0273\n$\3%\3%\3%\3%\5%\u0279\n%\3%\3%\3")
        buf.write("%\3%\5%\u027f\n%\3%\5%\u0282\n%\3&\3&\3&\3&\3'\3'\3")
        buf.write("'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0297\n(\3(")
        buf.write("\3(\3(\3(\5(\u029d\n(\3)\3)\3)\3)\3*\3*\3+\3+\3+\3,\3")
        buf.write(",\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u02b7\n-\3")
        buf.write(".\3.\3.\3.\5.\u02bd\n.\3/\3/\3/\3/\3\60\3\60\3\60\5\60")
        buf.write("\u02c6\n\60\3\60\3\60\3\60\5\60\u02cb\n\60\3\61\3\61\3")
        buf.write("\61\5\61\u02d0\n\61\3\62\3\62\3\62\3\62\3\62\5\62\u02d7")
        buf.write("\n\62\3\63\3\63\3\63\3\63\5\63\u02dd\n\63\3\64\3\64\3")
        buf.write("\64\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67\5\67\u02ea")
        buf.write("\n\67\3\67\3\67\3\67\5\67\u02ef\n\67\38\38\38\78\u02f4")
        buf.write("\n8\f8\168\u02f7\138\39\39\39\39\39\39\79\u02ff\n9\f9")
        buf.write("\169\u0302\139\59\u0304\n9\3:\3:\3:\3:\3:\3:\3:\3:\5:")
        buf.write("\u030e\n:\3;\3;\3;\3<\3<\3<\7<\u0316\n<\f<\16<\u0319\13")
        buf.write("<\3=\3=\3=\7=\u031e\n=\f=\16=\u0321\13=\3>\3>\3>\5>\u0326")
        buf.write("\n>\3?\3?\3?\7?\u032b\n?\f?\16?\u032e\13?\3@\3@\3@\3@")
        buf.write("\5@\u0334\n@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\5A\u0348\nA\3A\3A\3A\3A\5A\u034e\nA\3A\3")
        buf.write("A\6A\u0352\nA\rA\16A\u0353\7A\u0356\nA\fA\16A\u0359\13")
        buf.write("A\3B\3B\3B\3B\3B\3B\3B\5B\u0362\nB\3B\3B\3B\3B\5B\u0368")
        buf.write("\nB\5B\u036a\nB\3C\3C\3C\3C\5C\u0370\nC\3D\3D\3D\3E\3")
        buf.write("E\3E\3F\3F\3F\3F\3F\3F\5F\u037e\nF\3G\3G\3H\3H\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\5I\u038c\nI\3I\3I\3I\3I\3I\5I\u0393\n")
        buf.write("I\5I\u0395\nI\3J\3J\3J\3J\5J\u039b\nJ\3J\3J\3J\3J\3J\5")
        buf.write("J\u03a2\nJ\5J\u03a4\nJ\3K\3K\3K\5K\u03a9\nK\3K\3K\3K\3")
        buf.write("K\3K\5K\u03b0\nK\3L\3L\5L\u03b4\nL\3L\3L\3L\5L\u03b9\n")
        buf.write("L\5L\u03bb\nL\5L\u03bd\nL\3M\3M\3M\3M\3N\3N\3N\3N\3O\3")
        buf.write("O\3O\3O\3P\3P\3P\5P\u03ce\nP\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u03d6")
        buf.write("\nQ\3Q\5Q\u03d9\nQ\3Q\5Q\u03dc\nQ\3R\3R\3R\3R\3R\3R\5")
        buf.write("R\u03e4\nR\3R\5R\u03e7\nR\3R\5R\u03ea\nR\3S\3S\3S\3S\3")
        buf.write("S\3S\5S\u03f2\nS\3S\5S\u03f5\nS\3S\5S\u03f8\nS\3T\3T\5")
        buf.write("T\u03fc\nT\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u040a")
        buf.write("\nU\3V\3V\3V\3V\7V\u0410\nV\fV\16V\u0413\13V\5V\u0415")
        buf.write("\nV\3V\3V\3W\3W\3W\3W\3X\3X\3X\3Y\3Y\3Y\5Y\u0423\nY\3")
        buf.write("Z\3Z\3Z\3[\5[\u0429\n[\3[\3[\5[\u042d\n[\3\\\5\\\u0430")
        buf.write("\n\\\3\\\3\\\3]\3]\3]\5]\u0437\n]\3^\3^\3^\3^\7^\u043d")
        buf.write("\n^\f^\16^\u0440\13^\5^\u0442\n^\3^\3^\3_\3_\3_\3_\7_")
        buf.write("\u044a\n_\f_\16_\u044d\13_\5_\u044f\n_\3_\3_\3`\3`\3`")
        buf.write("\3`\3a\3a\3a\3a\3b\3b\3c\5c\u045e\nc\3c\3c\5c\u0462\n")
        buf.write("c\3c\3c\3c\3c\3d\3d\5d\u046a\nd\7d\u046c\nd\fd\16d\u046f")
        buf.write("\13d\3e\3e\3e\3e\3e\3e\3e\3e\5e\u0479\ne\3f\3f\3f\3g\3")
        buf.write("g\5g\u0480\ng\3g\6g\u0483\ng\rg\16g\u0484\3h\3h\3h\5h")
        buf.write("\u048a\nh\3h\5h\u048d\nh\6h\u048f\nh\rh\16h\u0490\3i\3")
        buf.write("i\5i\u0495\ni\3i\3i\5i\u0499\ni\3j\3j\3j\5j\u049e\nj\6")
        buf.write("j\u04a0\nj\rj\16j\u04a1\3k\3k\3l\3l\5l\u04a8\nl\3m\3m")
        buf.write("\5m\u04ac\nm\3n\3n\3n\3n\5n\u04b2\nn\3o\3o\5o\u04b6\n")
        buf.write("o\5o\u04b8\no\3o\3o\3o\3o\3p\3p\3p\2\3\u0080q\2\4\6\b")
        buf.write('\n\f\16\20\22\24\26\30\32\34\36 "$&(*,.\60\62\64\668')
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write('\2\17\4\2\33\34""\4\2@ADD\3\2\62\65\3\2\678\3\2WX\3')
        buf.write("\2Y[\3\2\37!\4\2\36\36ff\5\2\13\21\26\26,,\4\2\22\22\24")
        buf.write("\24\5\2\22\22\26\26,,\4\2\6\6\n\n\b\2\22\22\26\26,,ab")
        buf.write("ddff\2\u051d\2\u00e1\3\2\2\2\4\u00f1\3\2\2\2\6\u00fc\3")
        buf.write("\2\2\2\b\u012f\3\2\2\2\n\u0138\3\2\2\2\f\u013e\3\2\2\2")
        buf.write("\16\u0140\3\2\2\2\20\u016a\3\2\2\2\22\u016c\3\2\2\2\24")
        buf.write("\u0173\3\2\2\2\26\u0189\3\2\2\2\30\u019e\3\2\2\2\32\u01a1")
        buf.write("\3\2\2\2\34\u01a5\3\2\2\2\36\u01a9\3\2\2\2 \u01b8\3\2")
        buf.write('\2\2"\u01bc\3\2\2\2$\u01c1\3\2\2\2&\u01c6\3\2\2\2(\u01d6')
        buf.write("\3\2\2\2*\u01e2\3\2\2\2,\u01e4\3\2\2\2.\u01e9\3\2\2\2")
        buf.write("\60\u01fe\3\2\2\2\62\u021b\3\2\2\2\64\u021d\3\2\2\2\66")
        buf.write("\u0223\3\2\2\28\u022c\3\2\2\2:\u0230\3\2\2\2<\u0238\3")
        buf.write("\2\2\2>\u024a\3\2\2\2@\u024c\3\2\2\2B\u0261\3\2\2\2D\u0263")
        buf.write("\3\2\2\2F\u026f\3\2\2\2H\u0281\3\2\2\2J\u0283\3\2\2\2")
        buf.write("L\u0287\3\2\2\2N\u029c\3\2\2\2P\u029e\3\2\2\2R\u02a2\3")
        buf.write("\2\2\2T\u02a4\3\2\2\2V\u02a7\3\2\2\2X\u02b6\3\2\2\2Z\u02bc")
        buf.write("\3\2\2\2\\\u02be\3\2\2\2^\u02c2\3\2\2\2`\u02cc\3\2\2\2")
        buf.write("b\u02d1\3\2\2\2d\u02d8\3\2\2\2f\u02de\3\2\2\2h\u02e1\3")
        buf.write("\2\2\2j\u02e4\3\2\2\2l\u02e7\3\2\2\2n\u02f0\3\2\2\2p\u0303")
        buf.write("\3\2\2\2r\u030d\3\2\2\2t\u030f\3\2\2\2v\u0312\3\2\2\2")
        buf.write("x\u031a\3\2\2\2z\u0325\3\2\2\2|\u0327\3\2\2\2~\u032f\3")
        buf.write("\2\2\2\u0080\u034d\3\2\2\2\u0082\u0369\3\2\2\2\u0084\u036f")
        buf.write("\3\2\2\2\u0086\u0371\3\2\2\2\u0088\u0374\3\2\2\2\u008a")
        buf.write("\u037d\3\2\2\2\u008c\u037f\3\2\2\2\u008e\u0381\3\2\2\2")
        buf.write("\u0090\u0394\3\2\2\2\u0092\u03a3\3\2\2\2\u0094\u03a8\3")
        buf.write("\2\2\2\u0096\u03bc\3\2\2\2\u0098\u03be\3\2\2\2\u009a\u03c2")
        buf.write("\3\2\2\2\u009c\u03c6\3\2\2\2\u009e\u03cd\3\2\2\2\u00a0")
        buf.write("\u03db\3\2\2\2\u00a2\u03e9\3\2\2\2\u00a4\u03f7\3\2\2\2")
        buf.write("\u00a6\u03f9\3\2\2\2\u00a8\u0409\3\2\2\2\u00aa\u040b\3")
        buf.write("\2\2\2\u00ac\u0418\3\2\2\2\u00ae\u041c\3\2\2\2\u00b0\u0422")
        buf.write("\3\2\2\2\u00b2\u0424\3\2\2\2\u00b4\u0428\3\2\2\2\u00b6")
        buf.write("\u042f\3\2\2\2\u00b8\u0433\3\2\2\2\u00ba\u0438\3\2\2\2")
        buf.write("\u00bc\u0445\3\2\2\2\u00be\u0452\3\2\2\2\u00c0\u0456\3")
        buf.write("\2\2\2\u00c2\u045a\3\2\2\2\u00c4\u045d\3\2\2\2\u00c6\u046d")
        buf.write("\3\2\2\2\u00c8\u0478\3\2\2\2\u00ca\u047a\3\2\2\2\u00cc")
        buf.write("\u0482\3\2\2\2\u00ce\u048e\3\2\2\2\u00d0\u0494\3\2\2\2")
        buf.write("\u00d2\u049f\3\2\2\2\u00d4\u04a3\3\2\2\2\u00d6\u04a5\3")
        buf.write("\2\2\2\u00d8\u04a9\3\2\2\2\u00da\u04ad\3\2\2\2\u00dc\u04b7")
        buf.write("\3\2\2\2\u00de\u04bd\3\2\2\2\u00e0\u00e2\5\6\4\2\u00e1")
        buf.write("\u00e0\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e6\3\2\2\2")
        buf.write("\u00e3\u00e5\5\4\3\2\u00e4\u00e3\3\2\2\2\u00e5\u00e8\3")
        buf.write("\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00ec")
        buf.write("\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00eb\5\f\7\2\u00ea")
        buf.write("\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec\u00ea\3\2\2\2")
        buf.write("\u00ec\u00ed\3\2\2\2\u00ed\u00ef\3\2\2\2\u00ee\u00ec\3")
        buf.write("\2\2\2\u00ef\u00f0\7\2\2\3\u00f0\3\3\2\2\2\u00f1\u00f2")
        buf.write("\7#\2\2\u00f2\u00f5\7*\2\2\u00f3\u00f6\5\b\5\2\u00f4\u00f6")
        buf.write("\7Y\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f4\3\2\2\2\u00f6")
        buf.write("\u00f7\3\2\2\2\u00f7\u00f8\7+\2\2\u00f8\u00f9\7\32\2\2")
        buf.write("\u00f9\u00fa\7b\2\2\u00fa\u00fb\7\60\2\2\u00fb\5\3\2\2")
        buf.write("\2\u00fc\u00fd\7\3\2\2\u00fd\u00fe\7$\2\2\u00fe\u0100")
        buf.write("\7b\2\2\u00ff\u0101\7\60\2\2\u0100\u00ff\3\2\2\2\u0100")
        buf.write("\u0101\3\2\2\2\u0101\7\3\2\2\2\u0102\u0105\7-\2\2\u0103")
        buf.write("\u0106\7Y\2\2\u0104\u0106\5\n\6\2\u0105\u0103\3\2\2\2")
        buf.write("\u0105\u0104\3\2\2\2\u0106\u0109\3\2\2\2\u0107\u0108\7")
        buf.write("U\2\2\u0108\u010a\5\b\5\2\u0109\u0107\3\2\2\2\u0109\u010a")
        buf.write("\3\2\2\2\u010a\u0130\3\2\2\2\u010b\u010e\7\26\2\2\u010c")
        buf.write("\u010f\7Y\2\2\u010d\u010f\5\n\6\2\u010e\u010c\3\2\2\2")
        buf.write("\u010e\u010d\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u0111\7")
        buf.write("U\2\2\u0111\u0113\5\b\5\2\u0112\u0110\3\2\2\2\u0112\u0113")
        buf.write("\3\2\2\2\u0113\u0130\3\2\2\2\u0114\u0117\7,\2\2\u0115")
        buf.write("\u0118\7Y\2\2\u0116\u0118\5\n\6\2\u0117\u0115\3\2\2\2")
        buf.write("\u0117\u0116\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u011a\7")
        buf.write("U\2\2\u011a\u011c\5\b\5\2\u011b\u0119\3\2\2\2\u011b\u011c")
        buf.write("\3\2\2\2\u011c\u0130\3\2\2\2\u011d\u0120\7\22\2\2\u011e")
        buf.write("\u0121\7Y\2\2\u011f\u0121\5\n\6\2\u0120\u011e\3\2\2\2")
        buf.write("\u0120\u011f\3\2\2\2\u0121\u0124\3\2\2\2\u0122\u0123\7")
        buf.write("U\2\2\u0123\u0125\5\b\5\2\u0124\u0122\3\2\2\2\u0124\u0125")
        buf.write("\3\2\2\2\u0125\u0130\3\2\2\2\u0126\u0129\7S\2\2\u0127")
        buf.write("\u012a\7Y\2\2\u0128\u012a\5\n\6\2\u0129\u0127\3\2\2\2")
        buf.write("\u0129\u0128\3\2\2\2\u012a\u012d\3\2\2\2\u012b\u012c\7")
        buf.write("U\2\2\u012c\u012e\5\b\5\2\u012d\u012b\3\2\2\2\u012d\u012e")
        buf.write("\3\2\2\2\u012e\u0130\3\2\2\2\u012f\u0102\3\2\2\2\u012f")
        buf.write("\u010b\3\2\2\2\u012f\u0114\3\2\2\2\u012f\u011d\3\2\2\2")
        buf.write("\u012f\u0126\3\2\2\2\u0130\t\3\2\2\2\u0131\u0132\7%\2")
        buf.write("\2\u0132\u0139\7f\2\2\u0133\u0134\7%\2\2\u0134\u0135\7")
        buf.write("*\2\2\u0135\u0136\5:\36\2\u0136\u0137\7+\2\2\u0137\u0139")
        buf.write("\3\2\2\2\u0138\u0131\3\2\2\2\u0138\u0133\3\2\2\2\u0139")
        buf.write("\13\3\2\2\2\u013a\u013f\5\16\b\2\u013b\u013f\5\20\t\2")
        buf.write("\u013c\u013f\5\22\n\2\u013d\u013f\5\26\f\2\u013e\u013a")
        buf.write("\3\2\2\2\u013e\u013b\3\2\2\2\u013e\u013c\3\2\2\2\u013e")
        buf.write("\u013d\3\2\2\2\u013f\r\3\2\2\2\u0140\u0141\7S\2\2\u0141")
        buf.write("\u0142\7f\2\2\u0142\u0143\7\61\2\2\u0143\u014a\5d\63\2")
        buf.write("\u0144\u0145\7U\2\2\u0145\u0146\7f\2\2\u0146\u0147\7\61")
        buf.write("\2\2\u0147\u0149\5d\63\2\u0148\u0144\3\2\2\2\u0149\u014c")
        buf.write("\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b")
        buf.write("\u014d\3\2\2\2\u014c\u014a\3\2\2\2\u014d\u014e\7\60\2")
        buf.write("\2\u014e\17\3\2\2\2\u014f\u0150\7\26\2\2\u0150\u0155\7")
        buf.write("f\2\2\u0151\u0152\7$\2\2\u0152\u0154\7f\2\2\u0153\u0151")
        buf.write("\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\u015a\3\2\2\2\u0157\u0155\3\2\2\2")
        buf.write("\u0158\u0159\7$\2\2\u0159\u015b\7d\2\2\u015a\u0158\3\2")
        buf.write("\2\2\u015a\u015b\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u016b")
        buf.write("\5 \21\2\u015d\u015e\7,\2\2\u015e\u0163\7f\2\2\u015f\u0160")
        buf.write("\7$\2\2\u0160\u0162\7f\2\2\u0161\u015f\3\2\2\2\u0162\u0165")
        buf.write("\3\2\2\2\u0163\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164")
        buf.write("\u0166\3\2\2\2\u0165\u0163\3\2\2\2\u0166\u016b\5 \21\2")
        buf.write("\u0167\u0168\7\22\2\2\u0168\u0169\7f\2\2\u0169\u016b\5")
        buf.write("&\24\2\u016a\u014f\3\2\2\2\u016a\u015d\3\2\2\2\u016a\u0167")
        buf.write("\3\2\2\2\u016b\21\3\2\2\2\u016c\u016d\7-\2\2\u016d\u016f")
        buf.write("\7f\2\2\u016e\u0170\5\30\r\2\u016f\u016e\3\2\2\2\u016f")
        buf.write("\u0170\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172\5\24\13")
        buf.write('\2\u0172\23\3\2\2\2\u0173\u0177\7*\2\2\u0174\u0176\5"')
        buf.write("\22\2\u0175\u0174\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175")
        buf.write("\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017b\3\2\2\2\u0179")
        buf.write("\u0177\3\2\2\2\u017a\u017c\5\32\16\2\u017b\u017a\3\2\2")
        buf.write("\2\u017b\u017c\3\2\2\2\u017c\u0181\3\2\2\2\u017d\u0180")
        buf.write('\5B"\2\u017e\u0180\5\36\20\2\u017f\u017d\3\2\2\2\u017f')
        buf.write("\u017e\3\2\2\2\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2")
        buf.write("\u0181\u0182\3\2\2\2\u0182\u0185\3\2\2\2\u0183\u0181\3")
        buf.write("\2\2\2\u0184\u0186\5\34\17\2\u0185\u0184\3\2\2\2\u0185")
        buf.write("\u0186\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u0188\7+\2\2")
        buf.write("\u0188\25\3\2\2\2\u0189\u018a\7.\2\2\u018a\u018b\7b\2")
        buf.write("\2\u018b\u018f\7\32\2\2\u018c\u0190\5\u009cO\2\u018d\u018e")
        buf.write("\7\22\2\2\u018e\u0190\5&\24\2\u018f\u018c\3\2\2\2\u018f")
        buf.write("\u018d\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u019c\7>\2\2")
        buf.write("\u0192\u0194\5\u009aN\2\u0193\u0195\5\u00ba^\2\u0194\u0193")
        buf.write("\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0198\3\2\2\2\u0196")
        buf.write("\u0199\5> \2\u0197\u0199\7\60\2\2\u0198\u0196\3\2\2\2")
        buf.write("\u0198\u0197\3\2\2\2\u0199\u019d\3\2\2\2\u019a\u019b\7")
        buf.write("-\2\2\u019b\u019d\5\24\13\2\u019c\u0192\3\2\2\2\u019c")
        buf.write("\u019a\3\2\2\2\u019d\27\3\2\2\2\u019e\u019f\7$\2\2\u019f")
        buf.write("\u01a0\5:\36\2\u01a0\31\3\2\2\2\u01a1\u01a2\7\32\2\2\u01a2")
        buf.write("\u01a3\7\33\2\2\u01a3\u01a4\5> \2\u01a4\33\3\2\2\2\u01a5")
        buf.write("\u01a6\7\32\2\2\u01a6\u01a7\7\34\2\2\u01a7\u01a8\5> \2")
        buf.write('\u01a8\35\3\2\2\2\u01a9\u01aa\7\32\2\2\u01aa\u01ab\7"')
        buf.write("\2\2\u01ab\u01ac\5> \2\u01ac\37\3\2\2\2\u01ad\u01b1\7")
        buf.write('*\2\2\u01ae\u01b0\5"\22\2\u01af\u01ae\3\2\2\2\u01b0\u01b3')
        buf.write("\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2")
        buf.write("\u01b4\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b4\u01b9\7+\2\2")
        buf.write('\u01b5\u01b6\7$\2\2\u01b6\u01b9\5"\22\2\u01b7\u01b9\7')
        buf.write("\60\2\2\u01b8\u01ad\3\2\2\2\u01b8\u01b5\3\2\2\2\u01b8")
        buf.write("\u01b7\3\2\2\2\u01b9!\3\2\2\2\u01ba\u01bd\5.\30\2\u01bb")
        buf.write("\u01bd\5\62\32\2\u01bc\u01ba\3\2\2\2\u01bc\u01bb\3\2\2")
        buf.write("\2\u01bd#\3\2\2\2\u01be\u01c0\5\62\32\2\u01bf\u01be\3")
        buf.write("\2\2\2\u01c0\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2")
        buf.write("\3\2\2\2\u01c2%\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c7")
        buf.write("\5(\25\2\u01c5\u01c7\5*\26\2\u01c6\u01c4\3\2\2\2\u01c6")
        buf.write("\u01c5\3\2\2\2\u01c7'\3\2\2\2\u01c8\u01c9\7*\2\2\u01c9")
        buf.write("\u01ca\5,\27\2\u01ca\u01cb\5$\23\2\u01cb\u01cc\7\31\2")
        buf.write("\2\u01cc\u01cd\5> \2\u01cd\u01ce\7+\2\2\u01ce\u01d7\3")
        buf.write("\2\2\2\u01cf\u01d0\7$\2\2\u01d0\u01d1\5,\27\2\u01d1\u01d2")
        buf.write("\5$\23\2\u01d2\u01d3\7\31\2\2\u01d3\u01d4\5> \2\u01d4")
        buf.write("\u01d5\7\60\2\2\u01d5\u01d7\3\2\2\2\u01d6\u01c8\3\2\2")
        buf.write("\2\u01d6\u01cf\3\2\2\2\u01d7)\3\2\2\2\u01d8\u01d9\7*\2")
        buf.write("\2\u01d9\u01da\5,\27\2\u01da\u01db\5\u00c4c\2\u01db\u01dc")
        buf.write("\7+\2\2\u01dc\u01e3\3\2\2\2\u01dd\u01de\7$\2\2\u01de\u01df")
        buf.write("\5,\27\2\u01df\u01e0\5\u00c4c\2\u01e0\u01e1\7\60\2\2\u01e1")
        buf.write("\u01e3\3\2\2\2\u01e2\u01d8\3\2\2\2\u01e2\u01dd\3\2\2\2")
        buf.write("\u01e3+\3\2\2\2\u01e4\u01e5\7R\2\2\u01e5\u01e6\7Q\2\2")
        buf.write("\u01e6\u01e7\7f\2\2\u01e7\u01e8\7\60\2\2\u01e8-\3\2\2")
        buf.write("\2\u01e9\u01eb\7R\2\2\u01ea\u01ec\7T\2\2\u01eb\u01ea\3")
        buf.write("\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01ef")
        buf.write("\7Q\2\2\u01ee\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef")
        buf.write("\u01f0\3\2\2\2\u01f0\u01f5\5\60\31\2\u01f1\u01f2\7U\2")
        buf.write("\2\u01f2\u01f4\5\60\31\2\u01f3\u01f1\3\2\2\2\u01f4\u01f7")
        buf.write("\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6")
        buf.write("\u01f8\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f8\u01f9\7\60\2")
        buf.write("\2\u01f9/\3\2\2\2\u01fa\u01ff\7f\2\2\u01fb\u01fc\7f\2")
        buf.write("\2\u01fc\u01fd\7\61\2\2\u01fd\u01ff\5d\63\2\u01fe\u01fa")
        buf.write("\3\2\2\2\u01fe\u01fb\3\2\2\2\u01ff\61\3\2\2\2\u0200\u0201")
        buf.write("\7V\2\2\u0201\u0205\58\35\2\u0202\u0203\5\66\34\2\u0203")
        buf.write("\u0204\5\64\33\2\u0204\u0206\3\2\2\2\u0205\u0202\3\2\2")
        buf.write("\2\u0205\u0206\3\2\2\2\u0206\u0210\3\2\2\2\u0207\u0208")
        buf.write("\7U\2\2\u0208\u020c\58\35\2\u0209\u020a\5\66\34\2\u020a")
        buf.write("\u020b\5\64\33\2\u020b\u020d\3\2\2\2\u020c\u0209\3\2\2")
        buf.write("\2\u020c\u020d\3\2\2\2\u020d\u020f\3\2\2\2\u020e\u0207")
        buf.write("\3\2\2\2\u020f\u0212\3\2\2\2\u0210\u020e\3\2\2\2\u0210")
        buf.write("\u0211\3\2\2\2\u0211\u0213\3\2\2\2\u0212\u0210\3\2\2\2")
        buf.write("\u0213\u0214\7\60\2\2\u0214\u021c\3\2\2\2\u0215\u0216")
        buf.write("\7V\2\2\u0216\u0218\7f\2\2\u0217\u0219\5\64\33\2\u0218")
        buf.write("\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021a\3\2\2\2")
        buf.write("\u021a\u021c\5> \2\u021b\u0200\3\2\2\2\u021b\u0215\3\2")
        buf.write("\2\2\u021c\63\3\2\2\2\u021d\u021f\7\32\2\2\u021e\u0220")
        buf.write("\5:\36\2\u021f\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220")
        buf.write("\u0221\3\2\2\2\u0221\u0222\t\2\2\2\u0222\65\3\2\2\2\u0223")
        buf.write("\u0225\7%\2\2\u0224\u0226\5<\37\2\u0225\u0224\3\2\2\2")
        buf.write("\u0225\u0226\3\2\2\2\u0226\u022a\3\2\2\2\u0227\u022b\7")
        buf.write("%\2\2\u0228\u0229\7)\2\2\u0229\u022b\5d\63\2\u022a\u0227")
        buf.write("\3\2\2\2\u022a\u0228\3\2\2\2\u022b\67\3\2\2\2\u022c\u022d")
        buf.write("\7f\2\2\u022d\u022e\7H\2\2\u022e\u022f\7f\2\2\u022f9\3")
        buf.write("\2\2\2\u0230\u0235\7f\2\2\u0231\u0232\7U\2\2\u0232\u0234")
        buf.write("\7f\2\2\u0233\u0231\3\2\2\2\u0234\u0237\3\2\2\2\u0235")
        buf.write("\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u0236;\3\2\2\2\u0237")
        buf.write("\u0235\3\2\2\2\u0238\u023d\5d\63\2\u0239\u023a\7U\2\2")
        buf.write("\u023a\u023c\5d\63\2\u023b\u0239\3\2\2\2\u023c\u023f\3")
        buf.write("\2\2\2\u023d\u023b\3\2\2\2\u023d\u023e\3\2\2\2\u023e=")
        buf.write("\3\2\2\2\u023f\u023d\3\2\2\2\u0240\u0244\7*\2\2\u0241")
        buf.write('\u0243\5B"\2\u0242\u0241\3\2\2\2\u0243\u0246\3\2\2\2')
        buf.write("\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0247\3")
        buf.write("\2\2\2\u0246\u0244\3\2\2\2\u0247\u024b\7+\2\2\u0248\u0249")
        buf.write('\7$\2\2\u0249\u024b\5B"\2\u024a\u0240\3\2\2\2\u024a\u0248')
        buf.write("\3\2\2\2\u024b?\3\2\2\2\u024c\u024d\5:\36\2\u024d\u024e")
        buf.write("\5> \2\u024eA\3\2\2\2\u024f\u0262\5> \2\u0250\u0262\5")
        buf.write("@!\2\u0251\u0252\5d\63\2\u0252\u0253\7\60\2\2\u0253\u0262")
        buf.write("\3\2\2\2\u0254\u0262\5D#\2\u0255\u0262\5F$\2\u0256\u0262")
        buf.write("\5N(\2\u0257\u0262\5P)\2\u0258\u0259\5T+\2\u0259\u025a")
        buf.write("\7\60\2\2\u025a\u0262\3\2\2\2\u025b\u025c\5R*\2\u025c")
        buf.write("\u025d\7\60\2\2\u025d\u0262\3\2\2\2\u025e\u0262\5V,\2")
        buf.write("\u025f\u0262\5X-\2\u0260\u0262\5Z.\2\u0261\u024f\3\2\2")
        buf.write("\2\u0261\u0250\3\2\2\2\u0261\u0251\3\2\2\2\u0261\u0254")
        buf.write("\3\2\2\2\u0261\u0255\3\2\2\2\u0261\u0256\3\2\2\2\u0261")
        buf.write("\u0257\3\2\2\2\u0261\u0258\3\2\2\2\u0261\u025b\3\2\2\2")
        buf.write("\u0261\u025e\3\2\2\2\u0261\u025f\3\2\2\2\u0261\u0260\3")
        buf.write("\2\2\2\u0262C\3\2\2\2\u0263\u0264\79\2\2\u0264\u0265\5")
        buf.write("d\63\2\u0265\u0269\5> \2\u0266\u0268\5J&\2\u0267\u0266")
        buf.write("\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267\3\2\2\2\u0269")
        buf.write("\u026a\3\2\2\2\u026a\u026d\3\2\2\2\u026b\u0269\3\2\2\2")
        buf.write("\u026c\u026e\5L'\2\u026d\u026c\3\2\2\2\u026d\u026e\3")
        buf.write("\2\2\2\u026eE\3\2\2\2\u026f\u0270\7G\2\2\u0270\u0272\5")
        buf.write("> \2\u0271\u0273\5H%\2\u0272\u0271\3\2\2\2\u0272\u0273")
        buf.write("\3\2\2\2\u0273G\3\2\2\2\u0274\u0278\7;\2\2\u0275\u0276")
        buf.write("\7]\2\2\u0276\u0277\7f\2\2\u0277\u0279\7^\2\2\u0278\u0275")
        buf.write("\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027a\3\2\2\2\u027a")
        buf.write("\u0282\5> \2\u027b\u027e\7;\2\2\u027c\u027d\7\32\2\2\u027d")
        buf.write("\u027f\7f\2\2\u027e\u027c\3\2\2\2\u027e\u027f\3\2\2\2")
        buf.write("\u027f\u0280\3\2\2\2\u0280\u0282\5> \2\u0281\u0274\3\2")
        buf.write("\2\2\u0281\u027b\3\2\2\2\u0282I\3\2\2\2\u0283\u0284\7")
        buf.write(":\2\2\u0284\u0285\5d\63\2\u0285\u0286\5> \2\u0286K\3\2")
        buf.write("\2\2\u0287\u0288\7;\2\2\u0288\u0289\5> \2\u0289M\3\2\2")
        buf.write("\2\u028a\u028b\7<\2\2\u028b\u028c\5d\63\2\u028c\u028d")
        buf.write("\7=\2\2\u028d\u028e\5d\63\2\u028e\u028f\7>\2\2\u028f\u0290")
        buf.write("\5d\63\2\u0290\u0291\5> \2\u0291\u029d\3\2\2\2\u0292\u0293")
        buf.write("\7<\2\2\u0293\u0296\7f\2\2\u0294\u0295\7U\2\2\u0295\u0297")
        buf.write("\7f\2\2\u0296\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297")
        buf.write("\u0298\3\2\2\2\u0298\u0299\7P\2\2\u0299\u029a\5d\63\2")
        buf.write("\u029a\u029b\5> \2\u029b\u029d\3\2\2\2\u029c\u028a\3\2")
        buf.write("\2\2\u029c\u0292\3\2\2\2\u029dO\3\2\2\2\u029e\u029f\7")
        buf.write("?\2\2\u029f\u02a0\5d\63\2\u02a0\u02a1\5> \2\u02a1Q\3\2")
        buf.write("\2\2\u02a2\u02a3\t\3\2\2\u02a3S\3\2\2\2\u02a4\u02a5\7")
        buf.write("/\2\2\u02a5\u02a6\5d\63\2\u02a6U\3\2\2\2\u02a7\u02a8\7")
        buf.write("F\2\2\u02a8\u02a9\5d\63\2\u02a9\u02aa\7\60\2\2\u02aaW")
        buf.write("\3\2\2\2\u02ab\u02ac\7E\2\2\u02ac\u02ad\5d\63\2\u02ad")
        buf.write("\u02ae\7\60\2\2\u02ae\u02b7\3\2\2\2\u02af\u02b0\7E\2\2")
        buf.write("\u02b0\u02b1\7$\2\2\u02b1\u02b2\7f\2\2\u02b2\u02b3\7\61")
        buf.write("\2\2\u02b3\u02b4\5d\63\2\u02b4\u02b5\7\60\2\2\u02b5\u02b7")
        buf.write("\3\2\2\2\u02b6\u02ab\3\2\2\2\u02b6\u02af\3\2\2\2\u02b7")
        buf.write("Y\3\2\2\2\u02b8\u02bd\5\\/\2\u02b9\u02bd\5^\60\2\u02ba")
        buf.write("\u02bd\5`\61\2\u02bb\u02bd\5b\62\2\u02bc\u02b8\3\2\2\2")
        buf.write("\u02bc\u02b9\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bb\3")
        buf.write("\2\2\2\u02bd[\3\2\2\2\u02be\u02bf\7\27\2\2\u02bf\u02c0")
        buf.write("\5d\63\2\u02c0\u02c1\7\60\2\2\u02c1]\3\2\2\2\u02c2\u02c5")
        buf.write("\7\30\2\2\u02c3\u02c4\7$\2\2\u02c4\u02c6\7f\2\2\u02c5")
        buf.write("\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c7\3\2\2\2")
        buf.write("\u02c7\u02ca\5d\63\2\u02c8\u02cb\7\60\2\2\u02c9\u02cb")
        buf.write("\5L'\2\u02ca\u02c8\3\2\2\2\u02ca\u02c9\3\2\2\2\u02cb")
        buf.write("_\3\2\2\2\u02cc\u02cf\7B\2\2\u02cd\u02d0\5X-\2\u02ce\u02d0")
        buf.write("\7\60\2\2\u02cf\u02cd\3\2\2\2\u02cf\u02ce\3\2\2\2\u02d0")
        buf.write("a\3\2\2\2\u02d1\u02d6\7C\2\2\u02d2\u02d7\5X-\2\u02d3\u02d7")
        buf.write("\5`\61\2\u02d4\u02d7\5^\60\2\u02d5\u02d7\7\60\2\2\u02d6")
        buf.write("\u02d2\3\2\2\2\u02d6\u02d3\3\2\2\2\u02d6\u02d4\3\2\2\2")
        buf.write("\u02d6\u02d5\3\2\2\2\u02d7c\3\2\2\2\u02d8\u02dc\5l\67")
        buf.write("\2\u02d9\u02dd\5f\64\2\u02da\u02dd\5h\65\2\u02db\u02dd")
        buf.write("\5j\66\2\u02dc\u02d9\3\2\2\2\u02dc\u02da\3\2\2\2\u02dc")
        buf.write("\u02db\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dde\3\2\2\2\u02de")
        buf.write("\u02df\7\61\2\2\u02df\u02e0\5d\63\2\u02e0g\3\2\2\2\u02e1")
        buf.write("\u02e2\7\66\2\2\u02e2\u02e3\5d\63\2\u02e3i\3\2\2\2\u02e4")
        buf.write("\u02e5\t\4\2\2\u02e5\u02e6\5d\63\2\u02e6k\3\2\2\2\u02e7")
        buf.write("\u02ee\5n8\2\u02e8\u02ea\7I\2\2\u02e9\u02e8\3\2\2\2\u02e9")
        buf.write("\u02ea\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec\5\u009e")
        buf.write("P\2\u02ec\u02ed\5d\63\2\u02ed\u02ef\3\2\2\2\u02ee\u02e9")
        buf.write("\3\2\2\2\u02ee\u02ef\3\2\2\2\u02efm\3\2\2\2\u02f0\u02f5")
        buf.write("\5p9\2\u02f1\u02f2\t\5\2\2\u02f2\u02f4\5p9\2\u02f3\u02f1")
        buf.write("\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5")
        buf.write("\u02f6\3\2\2\2\u02f6o\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f8")
        buf.write("\u02f9\7I\2\2\u02f9\u0304\5p9\2\u02fa\u0300\5v<\2\u02fb")
        buf.write("\u02fc\5r:\2\u02fc\u02fd\5v<\2\u02fd\u02ff\3\2\2\2\u02fe")
        buf.write("\u02fb\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2")
        buf.write("\u0300\u0301\3\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300\3")
        buf.write("\2\2\2\u0303\u02f8\3\2\2\2\u0303\u02fa\3\2\2\2\u0304q")
        buf.write("\3\2\2\2\u0305\u030e\7J\2\2\u0306\u030e\7K\2\2\u0307\u030e")
        buf.write("\7L\2\2\u0308\u030e\7M\2\2\u0309\u030e\7N\2\2\u030a\u030e")
        buf.write("\7O\2\2\u030b\u030e\7P\2\2\u030c\u030e\5t;\2\u030d\u0305")
        buf.write("\3\2\2\2\u030d\u0306\3\2\2\2\u030d\u0307\3\2\2\2\u030d")
        buf.write("\u0308\3\2\2\2\u030d\u0309\3\2\2\2\u030d\u030a\3\2\2\2")
        buf.write("\u030d\u030b\3\2\2\2\u030d\u030c\3\2\2\2\u030es\3\2\2")
        buf.write("\2\u030f\u0310\7I\2\2\u0310\u0311\7P\2\2\u0311u\3\2\2")
        buf.write("\2\u0312\u0317\5x=\2\u0313\u0314\t\6\2\2\u0314\u0316\5")
        buf.write("x=\2\u0315\u0313\3\2\2\2\u0316\u0319\3\2\2\2\u0317\u0315")
        buf.write("\3\2\2\2\u0317\u0318\3\2\2\2\u0318w\3\2\2\2\u0319\u0317")
        buf.write("\3\2\2\2\u031a\u031f\5z>\2\u031b\u031c\t\7\2\2\u031c\u031e")
        buf.write("\5z>\2\u031d\u031b\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d")
        buf.write("\3\2\2\2\u031f\u0320\3\2\2\2\u0320y\3\2\2\2\u0321\u031f")
        buf.write("\3\2\2\2\u0322\u0323\t\6\2\2\u0323\u0326\5z>\2\u0324\u0326")
        buf.write("\5|?\2\u0325\u0322\3\2\2\2\u0325\u0324\3\2\2\2\u0326{")
        buf.write("\3\2\2\2\u0327\u032c\5\u0080A\2\u0328\u0329\7\\\2\2\u0329")
        buf.write("\u032b\5z>\2\u032a\u0328\3\2\2\2\u032b\u032e\3\2\2\2\u032c")
        buf.write("\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d}\3\2\2\2\u032e")
        buf.write("\u032c\3\2\2\2\u032f\u0330\7S\2\2\u0330\u0333\7H\2\2\u0331")
        buf.write("\u0334\5\u008eH\2\u0332\u0334\7f\2\2\u0333\u0331\3\2\2")
        buf.write("\2\u0333\u0332\3\2\2\2\u0334\177\3\2\2\2\u0335\u0336\b")
        buf.write("A\1\2\u0336\u034e\7d\2\2\u0337\u034e\7a\2\2\u0338\u034e")
        buf.write("\7b\2\2\u0339\u034e\7c\2\2\u033a\u034e\7e\2\2\u033b\u034e")
        buf.write("\7f\2\2\u033c\u034e\5~@\2\u033d\u034e\5\u0096L\2\u033e")
        buf.write("\u034e\5\u00a6T\2\u033f\u034e\5\u00aaV\2\u0340\u0341\7")
        buf.write("]\2\2\u0341\u0342\5d\63\2\u0342\u0343\7^\2\2\u0343\u034e")
        buf.write("\3\2\2\2\u0344\u0345\5\u0084C\2\u0345\u0347\7f\2\2\u0346")
        buf.write("\u0348\5\u00ba^\2\u0347\u0346\3\2\2\2\u0347\u0348\3\2")
        buf.write("\2\2\u0348\u034e\3\2\2\2\u0349\u034e\5\u00aeX\2\u034a")
        buf.write("\u034e\5\u0086D\2\u034b\u034e\5\u0088E\2\u034c\u034e\5")
        buf.write("\u00c2b\2\u034d\u0335\3\2\2\2\u034d\u0337\3\2\2\2\u034d")
        buf.write("\u0338\3\2\2\2\u034d\u0339\3\2\2\2\u034d\u033a\3\2\2\2")
        buf.write("\u034d\u033b\3\2\2\2\u034d\u033c\3\2\2\2\u034d\u033d\3")
        buf.write("\2\2\2\u034d\u033e\3\2\2\2\u034d\u033f\3\2\2\2\u034d\u0340")
        buf.write("\3\2\2\2\u034d\u0344\3\2\2\2\u034d\u0349\3\2\2\2\u034d")
        buf.write("\u034a\3\2\2\2\u034d\u034b\3\2\2\2\u034d\u034c\3\2\2\2")
        buf.write("\u034e\u0357\3\2\2\2\u034f\u0351\f\7\2\2\u0350\u0352\5")
        buf.write("\u0082B\2\u0351\u0350\3\2\2\2\u0352\u0353\3\2\2\2\u0353")
        buf.write("\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0356\3\2\2\2")
        buf.write("\u0355\u034f\3\2\2\2\u0356\u0359\3\2\2\2\u0357\u0355\3")
        buf.write("\2\2\2\u0357\u0358\3\2\2\2\u0358\u0081\3\2\2\2\u0359\u0357")
        buf.write("\3\2\2\2\u035a\u035b\7H\2\2\u035b\u036a\5\u008aF\2\u035c")
        buf.write("\u035d\7H\2\2\u035d\u036a\7f\2\2\u035e\u036a\5\u00a8U")
        buf.write("\2\u035f\u0361\7]\2\2\u0360\u0362\5<\37\2\u0361\u0360")
        buf.write("\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write("\u036a\7^\2\2\u0364\u0365\5\u0084C\2\u0365\u0367\7f\2")
        buf.write("\2\u0366\u0368\5\u00ba^\2\u0367\u0366\3\2\2\2\u0367\u0368")
        buf.write("\3\2\2\2\u0368\u036a\3\2\2\2\u0369\u035a\3\2\2\2\u0369")
        buf.write("\u035c\3\2\2\2\u0369\u035e\3\2\2\2\u0369\u035f\3\2\2\2")
        buf.write("\u0369\u0364\3\2\2\2\u036a\u0083\3\2\2\2\u036b\u0370\7")
        buf.write("%\2\2\u036c\u036d\7%\2\2\u036d\u036e\7f\2\2\u036e\u0370")
        buf.write("\7$\2\2\u036f\u036b\3\2\2\2\u036f\u036c\3\2\2\2\u0370")
        buf.write("\u0085\3\2\2\2\u0371\u0372\7\4\2\2\u0372\u0373\5\u0080")
        buf.write("A\2\u0373\u0087\3\2\2\2\u0374\u0375\7Y\2\2\u0375\u0376")
        buf.write("\5\u0080A\2\u0376\u0089\3\2\2\2\u0377\u037e\3\2\2\2\u0378")
        buf.write("\u037e\5\u0094K\2\u0379\u037e\5\u0090I\2\u037a\u037e\5")
        buf.write("\u0092J\2\u037b\u037e\5\u008eH\2\u037c\u037e\5\u008cG")
        buf.write("\2\u037d\u0377\3\2\2\2\u037d\u0378\3\2\2\2\u037d\u0379")
        buf.write("\3\2\2\2\u037d\u037a\3\2\2\2\u037d\u037b\3\2\2\2\u037d")
        buf.write("\u037c\3\2\2\2\u037e\u008b\3\2\2\2\u037f\u0380\5\u00c2")
        buf.write("b\2\u0380\u008d\3\2\2\2\u0381\u0382\t\b\2\2\u0382\u008f")
        buf.write("\3\2\2\2\u0383\u0395\7\36\2\2\u0384\u0385\7*\2\2\u0385")
        buf.write("\u0386\5:\36\2\u0386\u0387\7+\2\2\u0387\u0395\3\2\2\2")
        buf.write("\u0388\u0389\7\17\2\2\u0389\u038c\7%\2\2\u038a\u038c\7")
        buf.write("(\2\2\u038b\u0388\3\2\2\2\u038b\u038a\3\2\2\2\u038c\u038d")
        buf.write("\3\2\2\2\u038d\u0392\t\t\2\2\u038e\u038f\7]\2\2\u038f")
        buf.write("\u0390\5<\37\2\u0390\u0391\7^\2\2\u0391\u0393\3\2\2\2")
        buf.write("\u0392\u038e\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0395\3")
        buf.write("\2\2\2\u0394\u0383\3\2\2\2\u0394\u0384\3\2\2\2\u0394\u038b")
        buf.write("\3\2\2\2\u0395\u0091\3\2\2\2\u0396\u03a4\7\35\2\2\u0397")
        buf.write("\u0398\7\16\2\2\u0398\u039b\7%\2\2\u0399\u039b\7'\2\2")
        buf.write("\u039a\u0397\3\2\2\2\u039a\u0399\3\2\2\2\u039b\u039c\3")
        buf.write("\2\2\2\u039c\u03a1\7f\2\2\u039d\u039e\7]\2\2\u039e\u039f")
        buf.write("\5<\37\2\u039f\u03a0\7^\2\2\u03a0\u03a2\3\2\2\2\u03a1")
        buf.write("\u039d\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a4\3\2\2\2")
        buf.write("\u03a3\u0396\3\2\2\2\u03a3\u039a\3\2\2\2\u03a4\u0093\3")
        buf.write("\2\2\2\u03a5\u03a6\7\13\2\2\u03a6\u03a9\7%\2\2\u03a7\u03a9")
        buf.write("\7&\2\2\u03a8\u03a5\3\2\2\2\u03a8\u03a7\3\2\2\2\u03a9")
        buf.write("\u03aa\3\2\2\2\u03aa\u03af\7f\2\2\u03ab\u03ac\7]\2\2\u03ac")
        buf.write("\u03ad\5<\37\2\u03ad\u03ae\7^\2\2\u03ae\u03b0\3\2\2\2")
        buf.write("\u03af\u03ab\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u0095\3")
        buf.write("\2\2\2\u03b1\u03b3\5\u0098M\2\u03b2\u03b4\5\u00bc_\2\u03b3")
        buf.write("\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03bd\3\2\2\2")
        buf.write("\u03b5\u03ba\5\u009eP\2\u03b6\u03b8\5\u0098M\2\u03b7\u03b9")
        buf.write("\5\u00bc_\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03bb\3\2\2\2\u03ba\u03b6\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03bd\3\2\2\2\u03bc\u03b1\3\2\2\2\u03bc\u03b5\3")
        buf.write("\2\2\2\u03bd\u0097\3\2\2\2\u03be\u03bf\7\26\2\2\u03bf")
        buf.write("\u03c0\7%\2\2\u03c0\u03c1\7f\2\2\u03c1\u0099\3\2\2\2\u03c2")
        buf.write("\u03c3\7-\2\2\u03c3\u03c4\7%\2\2\u03c4\u03c5\7f\2\2\u03c5")
        buf.write("\u009b\3\2\2\2\u03c6\u03c7\7\22\2\2\u03c7\u03c8\7%\2\2")
        buf.write("\u03c8\u03c9\7f\2\2\u03c9\u009d\3\2\2\2\u03ca\u03ce\5")
        buf.write("\u00a0Q\2\u03cb\u03ce\5\u00a2R\2\u03cc\u03ce\5\u00a4S")
        buf.write("\2\u03cd\u03ca\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03cc")
        buf.write("\3\2\2\2\u03ce\u009f\3\2\2\2\u03cf\u03dc\7\5\2\2\u03d0")
        buf.write("\u03d8\7X\2\2\u03d1\u03d2\7_\2\2\u03d2\u03d5\7f\2\2\u03d3")
        buf.write("\u03d6\5\u00ba^\2\u03d4\u03d6\5\u00bc_\2\u03d5\u03d3\3")
        buf.write("\2\2\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d7")
        buf.write("\3\2\2\2\u03d7\u03d9\7`\2\2\u03d8\u03d1\3\2\2\2\u03d8")
        buf.write("\u03d9\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03dc\7\6\2\2")
        buf.write("\u03db\u03cf\3\2\2\2\u03db\u03d0\3\2\2\2\u03dc\u00a1\3")
        buf.write("\2\2\2\u03dd\u03ea\7\7\2\2\u03de\u03e6\7\b\2\2\u03df\u03e0")
        buf.write("\7_\2\2\u03e0\u03e3\7f\2\2\u03e1\u03e4\5\u00ba^\2\u03e2")
        buf.write("\u03e4\5\u00bc_\2\u03e3\u03e1\3\2\2\2\u03e3\u03e2\3\2")
        buf.write("\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7")
        buf.write("\7`\2\2\u03e6\u03df\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7")
        buf.write("\u03e8\3\2\2\2\u03e8\u03ea\7X\2\2\u03e9\u03dd\3\2\2\2")
        buf.write("\u03e9\u03de\3\2\2\2\u03ea\u00a3\3\2\2\2\u03eb\u03f8\7")
        buf.write("\t\2\2\u03ec\u03f4\7\b\2\2\u03ed\u03ee\7_\2\2\u03ee\u03f1")
        buf.write("\7f\2\2\u03ef\u03f2\5\u00ba^\2\u03f0\u03f2\5\u00bc_\2")
        buf.write("\u03f1\u03ef\3\2\2\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3")
        buf.write("\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5\7`\2\2\u03f4\u03ed")
        buf.write("\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6")
        buf.write("\u03f8\7\6\2\2\u03f7\u03eb\3\2\2\2\u03f7\u03ec\3\2\2\2")
        buf.write("\u03f8\u00a5\3\2\2\2\u03f9\u03fb\7_\2\2\u03fa\u03fc\5")
        buf.write("<\37\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd")
        buf.write("\3\2\2\2\u03fd\u03fe\7`\2\2\u03fe\u00a7\3\2\2\2\u03ff")
        buf.write("\u0400\7_\2\2\u0400\u0401\5d\63\2\u0401\u0402\7`\2\2\u0402")
        buf.write("\u040a\3\2\2\2\u0403\u0404\7_\2\2\u0404\u0405\5d\63\2")
        buf.write("\u0405\u0406\7$\2\2\u0406\u0407\5d\63\2\u0407\u0408\7")
        buf.write("`\2\2\u0408\u040a\3\2\2\2\u0409\u03ff\3\2\2\2\u0409\u0403")
        buf.write("\3\2\2\2\u040a\u00a9\3\2\2\2\u040b\u0414\7*\2\2\u040c")
        buf.write("\u0411\5\u00acW\2\u040d\u040e\7U\2\2\u040e\u0410\5\u00ac")
        buf.write("W\2\u040f\u040d\3\2\2\2\u0410\u0413\3\2\2\2\u0411\u040f")
        buf.write("\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0415\3\2\2\2\u0413")
        buf.write("\u0411\3\2\2\2\u0414\u040c\3\2\2\2\u0414\u0415\3\2\2\2")
        buf.write("\u0415\u0416\3\2\2\2\u0416\u0417\7+\2\2\u0417\u00ab\3")
        buf.write("\2\2\2\u0418\u0419\5d\63\2\u0419\u041a\7$\2\2\u041a\u041b")
        buf.write("\5d\63\2\u041b\u00ad\3\2\2\2\u041c\u041d\7\31\2\2\u041d")
        buf.write("\u041e\5\u00b0Y\2\u041e\u00af\3\2\2\2\u041f\u0423\5\u00b4")
        buf.write("[\2\u0420\u0423\5\u00b8]\2\u0421\u0423\5\u00b6\\\2\u0422")
        buf.write("\u041f\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0421\3\2\2\2")
        buf.write("\u0423\u00b1\3\2\2\2\u0424\u0425\5d\63\2\u0425\u0426\5")
        buf.write("\u009eP\2\u0426\u00b3\3\2\2\2\u0427\u0429\5\u00b2Z\2\u0428")
        buf.write("\u0427\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042a\3\2\2\2")
        buf.write("\u042a\u042c\5\u0098M\2\u042b\u042d\5\u00ba^\2\u042c\u042b")
        buf.write("\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u00b5\3\2\2\2\u042e")
        buf.write("\u0430\5\u00b2Z\2\u042f\u042e\3\2\2\2\u042f\u0430\3\2")
        buf.write("\2\2\u0430\u0431\3\2\2\2\u0431\u0432\5\u009cO\2\u0432")
        buf.write("\u00b7\3\2\2\2\u0433\u0434\5d\63\2\u0434\u0436\5\u009a")
        buf.write("N\2\u0435\u0437\5\u00ba^\2\u0436\u0435\3\2\2\2\u0436\u0437")
        buf.write("\3\2\2\2\u0437\u00b9\3\2\2\2\u0438\u0441\7]\2\2\u0439")
        buf.write("\u043e\5\u00be`\2\u043a\u043b\7U\2\2\u043b\u043d\5\u00be")
        buf.write("`\2\u043c\u043a\3\2\2\2\u043d\u0440\3\2\2\2\u043e\u043c")
        buf.write("\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0442\3\2\2\2\u0440")
        buf.write("\u043e\3\2\2\2\u0441\u0439\3\2\2\2\u0441\u0442\3\2\2\2")
        buf.write("\u0442\u0443\3\2\2\2\u0443\u0444\7^\2\2\u0444\u00bb\3")
        buf.write("\2\2\2\u0445\u044e\7]\2\2\u0446\u044b\5\u00c0a\2\u0447")
        buf.write("\u0448\7U\2\2\u0448\u044a\5\u00c0a\2\u0449\u0447\3\2\2")
        buf.write("\2\u044a\u044d\3\2\2\2\u044b\u0449\3\2\2\2\u044b\u044c")
        buf.write("\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044b\3\2\2\2\u044e")
        buf.write("\u0446\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450\3\2\2\2")
        buf.write("\u0450\u0451\7^\2\2\u0451\u00bd\3\2\2\2\u0452\u0453\7")
        buf.write("f\2\2\u0453\u0454\7\61\2\2\u0454\u0455\5d\63\2\u0455\u00bf")
        buf.write("\3\2\2\2\u0456\u0457\7f\2\2\u0457\u0458\5r:\2\u0458\u0459")
        buf.write("\5d\63\2\u0459\u00c1\3\2\2\2\u045a\u045b\t\n\2\2\u045b")
        buf.write("\u00c3\3\2\2\2\u045c\u045e\7\23\2\2\u045d\u045c\3\2\2")
        buf.write("\2\u045d\u045e\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0461")
        buf.write("\t\13\2\2\u0460\u0462\5\u00dep\2\u0461\u0460\3\2\2\2\u0461")
        buf.write("\u0462\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0464\7*\2\2")
        buf.write("\u0464\u0465\5\u00c6d\2\u0465\u0466\7+\2\2\u0466\u00c5")
        buf.write("\3\2\2\2\u0467\u0469\5\u00c8e\2\u0468\u046a\7\60\2\2\u0469")
        buf.write("\u0468\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046c\3\2\2\2")
        buf.write("\u046b\u0467\3\2\2\2\u046c\u046f\3\2\2\2\u046d\u046b\3")
        buf.write("\2\2\2\u046d\u046e\3\2\2\2\u046e\u00c7\3\2\2\2\u046f\u046d")
        buf.write("\3\2\2\2\u0470\u0479\5\u00d6l\2\u0471\u0479\5\u00d0i\2")
        buf.write("\u0472\u0479\5\u00caf\2\u0473\u0474\5\u00dep\2\u0474\u0475")
        buf.write("\7\61\2\2\u0475\u0476\5\u00dep\2\u0476\u0479\3\2\2\2\u0477")
        buf.write("\u0479\5\u00dco\2\u0478\u0470\3\2\2\2\u0478\u0471\3\2")
        buf.write("\2\2\u0478\u0472\3\2\2\2\u0478\u0473\3\2\2\2\u0478\u0477")
        buf.write("\3\2\2\2\u0479\u00c9\3\2\2\2\u047a\u047b\t\f\2\2\u047b")
        buf.write("\u047c\5\u00ccg\2\u047c\u00cb\3\2\2\2\u047d\u047f\7_\2")
        buf.write("\2\u047e\u0480\5\u00ceh\2\u047f\u047e\3\2\2\2\u047f\u0480")
        buf.write("\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0483\7`\2\2\u0482")
        buf.write("\u047d\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0482\3\2\2\2")
        buf.write("\u0484\u0485\3\2\2\2\u0485\u00cd\3\2\2\2\u0486\u0489\5")
        buf.write("\u00dep\2\u0487\u0488\7\61\2\2\u0488\u048a\5\u00dep\2")
        buf.write("\u0489\u0487\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048c\3")
        buf.write("\2\2\2\u048b\u048d\7U\2\2\u048c\u048b\3\2\2\2\u048c\u048d")
        buf.write("\3\2\2\2\u048d\u048f\3\2\2\2\u048e\u0486\3\2\2\2\u048f")
        buf.write("\u0490\3\2\2\2\u0490\u048e\3\2\2\2\u0490\u0491\3\2\2\2")
        buf.write("\u0491\u00cf\3\2\2\2\u0492\u0495\5\u00d8m\2\u0493\u0495")
        buf.write("\5\u00dco\2\u0494\u0492\3\2\2\2\u0494\u0493\3\2\2\2\u0495")
        buf.write("\u0496\3\2\2\2\u0496\u0498\5\u00d2j\2\u0497\u0499\5\u00cc")
        buf.write("g\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u00d1")
        buf.write("\3\2\2\2\u049a\u049d\5\u00d4k\2\u049b\u049e\5\u00d8m\2")
        buf.write("\u049c\u049e\5\u00dco\2\u049d\u049b\3\2\2\2\u049d\u049c")
        buf.write("\3\2\2\2\u049e\u04a0\3\2\2\2\u049f\u049a\3\2\2\2\u04a0")
        buf.write("\u04a1\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2")
        buf.write("\u04a2\u00d3\3\2\2\2\u04a3\u04a4\t\r\2\2\u04a4\u00d5\3")
        buf.write("\2\2\2\u04a5\u04a7\5\u00d8m\2\u04a6\u04a8\5\u00ccg\2\u04a7")
        buf.write("\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u00d7\3\2\2\2")
        buf.write("\u04a9\u04ab\5\u00dep\2\u04aa\u04ac\5\u00dan\2\u04ab\u04aa")
        buf.write("\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u00d9\3\2\2\2\u04ad")
        buf.write("\u04ae\7$\2\2\u04ae\u04b1\5\u00dep\2\u04af\u04b0\7$\2")
        buf.write("\2\u04b0\u04b2\5\u00dep\2\u04b1\u04af\3\2\2\2\u04b1\u04b2")
        buf.write("\3\2\2\2\u04b2\u00db\3\2\2\2\u04b3\u04b5\7\25\2\2\u04b4")
        buf.write("\u04b6\5\u00dep\2\u04b5\u04b4\3\2\2\2\u04b5\u04b6\3\2")
        buf.write("\2\2\u04b6\u04b8\3\2\2\2\u04b7\u04b3\3\2\2\2\u04b7\u04b8")
        buf.write("\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04ba\7*\2\2\u04ba")
        buf.write("\u04bb\5\u00c6d\2\u04bb\u04bc\7+\2\2\u04bc\u00dd\3\2\2")
        buf.write("\2\u04bd\u04be\t\16\2\2\u04be\u00df\3\2\2\2\u0094\u00e1")
        buf.write("\u00e6\u00ec\u00f5\u0100\u0105\u0109\u010e\u0112\u0117")
        buf.write("\u011b\u0120\u0124\u0129\u012d\u012f\u0138\u013e\u014a")
        buf.write("\u0155\u015a\u0163\u016a\u016f\u0177\u017b\u017f\u0181")
        buf.write("\u0185\u018f\u0194\u0198\u019c\u01b1\u01b8\u01bc\u01c1")
        buf.write("\u01c6\u01d6\u01e2\u01eb\u01ee\u01f5\u01fe\u0205\u020c")
        buf.write("\u0210\u0218\u021b\u021f\u0225\u022a\u0235\u023d\u0244")
        buf.write("\u024a\u0261\u0269\u026d\u0272\u0278\u027e\u0281\u0296")
        buf.write("\u029c\u02b6\u02bc\u02c5\u02ca\u02cf\u02d6\u02dc\u02e9")
        buf.write("\u02ee\u02f5\u0300\u0303\u030d\u0317\u031f\u0325\u032c")
        buf.write("\u0333\u0347\u034d\u0353\u0357\u0361\u0367\u0369\u036f")
        buf.write("\u037d\u038b\u0392\u0394\u039a\u03a1\u03a3\u03a8\u03af")
        buf.write("\u03b3\u03b8\u03ba\u03bc\u03cd\u03d5\u03d8\u03db\u03e3")
        buf.write("\u03e6\u03e9\u03f1\u03f4\u03f7\u03fb\u0409\u0411\u0414")
        buf.write("\u0422\u0428\u042c\u042f\u0436\u043e\u0441\u044b\u044e")
        buf.write("\u045d\u0461\u0469\u046d\u0478\u047f\u0484\u0489\u048c")
        buf.write("\u0490\u0494\u0498\u049d\u04a1\u04a7\u04ab\u04b1\u04b5")
        buf.write("\u04b7")
        return buf.getvalue()


class jacParser(Parser):

    grammarFileName = "jac.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'version'",
        "'&'",
        "'-->'",
        "'->'",
        "'<--'",
        "'<-'",
        "'<-->'",
        "'--'",
        "'str'",
        "'int'",
        "'float'",
        "'list'",
        "'dict'",
        "'bool'",
        "'type'",
        "'graph'",
        "'strict'",
        "'digraph'",
        "'subgraph'",
        "'node'",
        "'ignore'",
        "'take'",
        "'spawn'",
        "'with'",
        "'entry'",
        "'exit'",
        "'length'",
        "'keys'",
        "'context'",
        "'info'",
        "'details'",
        "'activity'",
        "'import'",
        "':'",
        "'::'",
        "'s::'",
        "'l::'",
        "'d::'",
        "'::>'",
        "'{'",
        "'}'",
        "'edge'",
        "'walker'",
        "'test'",
        "'assert'",
        "';'",
        "'='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "':='",
        "<INVALID>",
        "<INVALID>",
        "'if'",
        "'elif'",
        "'else'",
        "'for'",
        "'to'",
        "'by'",
        "'while'",
        "'continue'",
        "'break'",
        "'disengage'",
        "'yield'",
        "'skip'",
        "'report'",
        "'destroy'",
        "'try'",
        "'.'",
        "<INVALID>",
        "'=='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'!='",
        "'in'",
        "'anchor'",
        "'has'",
        "'global'",
        "'private'",
        "','",
        "'can'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'^'",
        "'('",
        "')'",
        "'['",
        "']'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'null'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "TYP_STRING",
        "TYP_INT",
        "TYP_FLOAT",
        "TYP_LIST",
        "TYP_DICT",
        "TYP_BOOL",
        "KW_TYPE",
        "KW_GRAPH",
        "KW_STRICT",
        "KW_DIGRAPH",
        "KW_SUBGRAPH",
        "KW_NODE",
        "KW_IGNORE",
        "KW_TAKE",
        "KW_SPAWN",
        "KW_WITH",
        "KW_ENTRY",
        "KW_EXIT",
        "KW_LENGTH",
        "KW_KEYS",
        "KW_CONTEXT",
        "KW_INFO",
        "KW_DETAILS",
        "KW_ACTIVITY",
        "KW_IMPORT",
        "COLON",
        "DBL_COLON",
        "STR_DBL_COLON",
        "LIST_DBL_COLON",
        "DICT_DBL_COLON",
        "COLON_OUT",
        "LBRACE",
        "RBRACE",
        "KW_EDGE",
        "KW_WALKER",
        "KW_TEST",
        "KW_ASSERT",
        "SEMI",
        "EQ",
        "PEQ",
        "MEQ",
        "TEQ",
        "DEQ",
        "CPY_EQ",
        "KW_AND",
        "KW_OR",
        "KW_IF",
        "KW_ELIF",
        "KW_ELSE",
        "KW_FOR",
        "KW_TO",
        "KW_BY",
        "KW_WHILE",
        "KW_CONTINUE",
        "KW_BREAK",
        "KW_DISENGAGE",
        "KW_YIELD",
        "KW_SKIP",
        "KW_REPORT",
        "KW_DESTROY",
        "KW_TRY",
        "DOT",
        "NOT",
        "EE",
        "LT",
        "GT",
        "LTE",
        "GTE",
        "NE",
        "KW_IN",
        "KW_ANCHOR",
        "KW_HAS",
        "KW_GLOBAL",
        "KW_PRIVATE",
        "COMMA",
        "KW_CAN",
        "PLUS",
        "MINUS",
        "STAR_MUL",
        "DIV",
        "MOD",
        "POW",
        "LPAREN",
        "RPAREN",
        "LSQUARE",
        "RSQUARE",
        "FLOAT",
        "STRING",
        "BOOL",
        "INT",
        "NULL",
        "NAME",
        "COMMENT",
        "LINE_COMMENT",
        "PY_COMMENT",
        "WS",
        "ErrorChar",
    ]

    RULE_start = 0
    RULE_import_module = 1
    RULE_ver_label = 2
    RULE_import_items = 3
    RULE_import_names = 4
    RULE_element = 5
    RULE_global_var = 6
    RULE_architype = 7
    RULE_walker = 8
    RULE_walker_block = 9
    RULE_test = 10
    RULE_namespaces = 11
    RULE_walk_entry_block = 12
    RULE_walk_exit_block = 13
    RULE_walk_activity_block = 14
    RULE_attr_block = 15
    RULE_attr_stmt = 16
    RULE_can_block = 17
    RULE_graph_block = 18
    RULE_graph_block_spawn = 19
    RULE_graph_block_dot = 20
    RULE_has_root = 21
    RULE_has_stmt = 22
    RULE_has_assign = 23
    RULE_can_stmt = 24
    RULE_event_clause = 25
    RULE_preset_in_out = 26
    RULE_dotted_name = 27
    RULE_name_list = 28
    RULE_expr_list = 29
    RULE_code_block = 30
    RULE_node_ctx_block = 31
    RULE_statement = 32
    RULE_if_stmt = 33
    RULE_try_stmt = 34
    RULE_else_from_try = 35
    RULE_elif_stmt = 36
    RULE_else_stmt = 37
    RULE_for_stmt = 38
    RULE_while_stmt = 39
    RULE_ctrl_stmt = 40
    RULE_assert_stmt = 41
    RULE_destroy_action = 42
    RULE_report_action = 43
    RULE_walker_action = 44
    RULE_ignore_action = 45
    RULE_take_action = 46
    RULE_disengage_action = 47
    RULE_yield_action = 48
    RULE_expression = 49
    RULE_assignment = 50
    RULE_copy_assign = 51
    RULE_inc_assign = 52
    RULE_connect = 53
    RULE_logical = 54
    RULE_compare = 55
    RULE_cmp_op = 56
    RULE_nin = 57
    RULE_arithmetic = 58
    RULE_term = 59
    RULE_factor = 60
    RULE_power = 61
    RULE_global_ref = 62
    RULE_atom = 63
    RULE_atom_trailer = 64
    RULE_ability_op = 65
    RULE_ref = 66
    RULE_deref = 67
    RULE_built_in = 68
    RULE_cast_built_in = 69
    RULE_obj_built_in = 70
    RULE_dict_built_in = 71
    RULE_list_built_in = 72
    RULE_string_built_in = 73
    RULE_node_edge_ref = 74
    RULE_node_ref = 75
    RULE_walker_ref = 76
    RULE_graph_ref = 77
    RULE_edge_ref = 78
    RULE_edge_to = 79
    RULE_edge_from = 80
    RULE_edge_any = 81
    RULE_list_val = 82
    RULE_index_slice = 83
    RULE_dict_val = 84
    RULE_kv_pair = 85
    RULE_spawn = 86
    RULE_spawn_object = 87
    RULE_spawn_edge = 88
    RULE_node_spawn = 89
    RULE_graph_spawn = 90
    RULE_walker_spawn = 91
    RULE_spawn_ctx = 92
    RULE_filter_ctx = 93
    RULE_spawn_assign = 94
    RULE_filter_compare = 95
    RULE_any_type = 96
    RULE_dot_graph = 97
    RULE_dot_stmt_list = 98
    RULE_dot_stmt = 99
    RULE_dot_attr_stmt = 100
    RULE_dot_attr_list = 101
    RULE_dot_a_list = 102
    RULE_dot_edge_stmt = 103
    RULE_dot_edgeRHS = 104
    RULE_dot_edgeop = 105
    RULE_dot_node_stmt = 106
    RULE_dot_node_id = 107
    RULE_dot_port = 108
    RULE_dot_subgraph = 109
    RULE_dot_id = 110

    ruleNames = [
        "start",
        "import_module",
        "ver_label",
        "import_items",
        "import_names",
        "element",
        "global_var",
        "architype",
        "walker",
        "walker_block",
        "test",
        "namespaces",
        "walk_entry_block",
        "walk_exit_block",
        "walk_activity_block",
        "attr_block",
        "attr_stmt",
        "can_block",
        "graph_block",
        "graph_block_spawn",
        "graph_block_dot",
        "has_root",
        "has_stmt",
        "has_assign",
        "can_stmt",
        "event_clause",
        "preset_in_out",
        "dotted_name",
        "name_list",
        "expr_list",
        "code_block",
        "node_ctx_block",
        "statement",
        "if_stmt",
        "try_stmt",
        "else_from_try",
        "elif_stmt",
        "else_stmt",
        "for_stmt",
        "while_stmt",
        "ctrl_stmt",
        "assert_stmt",
        "destroy_action",
        "report_action",
        "walker_action",
        "ignore_action",
        "take_action",
        "disengage_action",
        "yield_action",
        "expression",
        "assignment",
        "copy_assign",
        "inc_assign",
        "connect",
        "logical",
        "compare",
        "cmp_op",
        "nin",
        "arithmetic",
        "term",
        "factor",
        "power",
        "global_ref",
        "atom",
        "atom_trailer",
        "ability_op",
        "ref",
        "deref",
        "built_in",
        "cast_built_in",
        "obj_built_in",
        "dict_built_in",
        "list_built_in",
        "string_built_in",
        "node_edge_ref",
        "node_ref",
        "walker_ref",
        "graph_ref",
        "edge_ref",
        "edge_to",
        "edge_from",
        "edge_any",
        "list_val",
        "index_slice",
        "dict_val",
        "kv_pair",
        "spawn",
        "spawn_object",
        "spawn_edge",
        "node_spawn",
        "graph_spawn",
        "walker_spawn",
        "spawn_ctx",
        "filter_ctx",
        "spawn_assign",
        "filter_compare",
        "any_type",
        "dot_graph",
        "dot_stmt_list",
        "dot_stmt",
        "dot_attr_stmt",
        "dot_attr_list",
        "dot_a_list",
        "dot_edge_stmt",
        "dot_edgeRHS",
        "dot_edgeop",
        "dot_node_stmt",
        "dot_node_id",
        "dot_port",
        "dot_subgraph",
        "dot_id",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    TYP_STRING = 9
    TYP_INT = 10
    TYP_FLOAT = 11
    TYP_LIST = 12
    TYP_DICT = 13
    TYP_BOOL = 14
    KW_TYPE = 15
    KW_GRAPH = 16
    KW_STRICT = 17
    KW_DIGRAPH = 18
    KW_SUBGRAPH = 19
    KW_NODE = 20
    KW_IGNORE = 21
    KW_TAKE = 22
    KW_SPAWN = 23
    KW_WITH = 24
    KW_ENTRY = 25
    KW_EXIT = 26
    KW_LENGTH = 27
    KW_KEYS = 28
    KW_CONTEXT = 29
    KW_INFO = 30
    KW_DETAILS = 31
    KW_ACTIVITY = 32
    KW_IMPORT = 33
    COLON = 34
    DBL_COLON = 35
    STR_DBL_COLON = 36
    LIST_DBL_COLON = 37
    DICT_DBL_COLON = 38
    COLON_OUT = 39
    LBRACE = 40
    RBRACE = 41
    KW_EDGE = 42
    KW_WALKER = 43
    KW_TEST = 44
    KW_ASSERT = 45
    SEMI = 46
    EQ = 47
    PEQ = 48
    MEQ = 49
    TEQ = 50
    DEQ = 51
    CPY_EQ = 52
    KW_AND = 53
    KW_OR = 54
    KW_IF = 55
    KW_ELIF = 56
    KW_ELSE = 57
    KW_FOR = 58
    KW_TO = 59
    KW_BY = 60
    KW_WHILE = 61
    KW_CONTINUE = 62
    KW_BREAK = 63
    KW_DISENGAGE = 64
    KW_YIELD = 65
    KW_SKIP = 66
    KW_REPORT = 67
    KW_DESTROY = 68
    KW_TRY = 69
    DOT = 70
    NOT = 71
    EE = 72
    LT = 73
    GT = 74
    LTE = 75
    GTE = 76
    NE = 77
    KW_IN = 78
    KW_ANCHOR = 79
    KW_HAS = 80
    KW_GLOBAL = 81
    KW_PRIVATE = 82
    COMMA = 83
    KW_CAN = 84
    PLUS = 85
    MINUS = 86
    STAR_MUL = 87
    DIV = 88
    MOD = 89
    POW = 90
    LPAREN = 91
    RPAREN = 92
    LSQUARE = 93
    RSQUARE = 94
    FLOAT = 95
    STRING = 96
    BOOL = 97
    INT = 98
    NULL = 99
    NAME = 100
    COMMENT = 101
    LINE_COMMENT = 102
    PY_COMMENT = 103
    WS = 104
    ErrorChar = 105

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class StartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(jacParser.EOF, 0)

        def ver_label(self):
            return self.getTypedRuleContext(jacParser.Ver_labelContext, 0)

        def import_module(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Import_moduleContext)
            else:
                return self.getTypedRuleContext(jacParser.Import_moduleContext, i)

        def element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ElementContext)
            else:
                return self.getTypedRuleContext(jacParser.ElementContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_start

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStart"):
                listener.enterStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStart"):
                listener.exitStart(self)

    def start(self):

        localctx = jacParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.T__0:
                self.state = 222
                self.ver_label()

            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_IMPORT:
                self.state = 225
                self.import_module()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_WALKER)
                        | (1 << jacParser.KW_TEST)
                    )
                )
                != 0
            ) or _la == jacParser.KW_GLOBAL:
                self.state = 231
                self.element()
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 237
            self.match(jacParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_moduleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(jacParser.KW_IMPORT, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_module

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_module"):
                listener.enterImport_module(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_module"):
                listener.exitImport_module(self)

    def import_module(self):

        localctx = jacParser.Import_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_import_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(jacParser.KW_IMPORT)
            self.state = 240
            self.match(jacParser.LBRACE)
            self.state = 243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                jacParser.KW_GRAPH,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
                jacParser.KW_WALKER,
                jacParser.KW_GLOBAL,
            ]:
                self.state = 241
                self.import_items()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 242
                self.match(jacParser.STAR_MUL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 245
            self.match(jacParser.RBRACE)
            self.state = 246
            self.match(jacParser.KW_WITH)
            self.state = 247
            self.match(jacParser.STRING)
            self.state = 248
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ver_labelContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ver_label

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVer_label"):
                listener.enterVer_label(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVer_label"):
                listener.exitVer_label(self)

    def ver_label(self):

        localctx = jacParser.Ver_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ver_label)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(jacParser.T__0)
            self.state = 251
            self.match(jacParser.COLON)
            self.state = 252
            self.match(jacParser.STRING)
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.SEMI:
                self.state = 253
                self.match(jacParser.SEMI)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_itemsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def import_names(self):
            return self.getTypedRuleContext(jacParser.Import_namesContext, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_items

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_items"):
                listener.enterImport_items(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_items"):
                listener.exitImport_items(self)

    def import_items(self):

        localctx = jacParser.Import_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_items)
        self._la = 0  # Token type
        try:
            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.match(jacParser.KW_WALKER)
                self.state = 259
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 257
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 258
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 261
                    self.match(jacParser.COMMA)
                    self.state = 262
                    self.import_items()

                pass
            elif token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.match(jacParser.KW_NODE)
                self.state = 268
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 266
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 267
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 270
                    self.match(jacParser.COMMA)
                    self.state = 271
                    self.import_items()

                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 274
                self.match(jacParser.KW_EDGE)
                self.state = 277
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 275
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 276
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 279
                    self.match(jacParser.COMMA)
                    self.state = 280
                    self.import_items()

                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 283
                self.match(jacParser.KW_GRAPH)
                self.state = 286
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 284
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 285
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 288
                    self.match(jacParser.COMMA)
                    self.state = 289
                    self.import_items()

                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 292
                self.match(jacParser.KW_GLOBAL)
                self.state = 295
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 293
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 294
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 297
                    self.match(jacParser.COMMA)
                    self.state = 298
                    self.import_items()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_names"):
                listener.enterImport_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_names"):
                listener.exitImport_names(self)

    def import_names(self):

        localctx = jacParser.Import_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_import_names)
        try:
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.match(jacParser.DBL_COLON)
                self.state = 304
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.match(jacParser.DBL_COLON)
                self.state = 306
                self.match(jacParser.LBRACE)
                self.state = 307
                self.name_list()
                self.state = 308
                self.match(jacParser.RBRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_var(self):
            return self.getTypedRuleContext(jacParser.Global_varContext, 0)

        def architype(self):
            return self.getTypedRuleContext(jacParser.ArchitypeContext, 0)

        def walker(self):
            return self.getTypedRuleContext(jacParser.WalkerContext, 0)

        def test(self):
            return self.getTypedRuleContext(jacParser.TestContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)

    def element(self):

        localctx = jacParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_element)
        try:
            self.state = 316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.global_var()
                pass
            elif token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.architype()
                pass
            elif token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 314
                self.walker()
                pass
            elif token in [jacParser.KW_TEST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 315
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_varContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_global_var

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_var"):
                listener.enterGlobal_var(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_var"):
                listener.exitGlobal_var(self)

    def global_var(self):

        localctx = jacParser.Global_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_global_var)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(jacParser.KW_GLOBAL)
            self.state = 319
            self.match(jacParser.NAME)
            self.state = 320
            self.match(jacParser.EQ)
            self.state = 321
            self.expression()
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 322
                self.match(jacParser.COMMA)
                self.state = 323
                self.match(jacParser.NAME)
                self.state = 324
                self.match(jacParser.EQ)
                self.state = 325
                self.expression()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 331
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArchitypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def attr_block(self):
            return self.getTypedRuleContext(jacParser.Attr_blockContext, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_architype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArchitype"):
                listener.enterArchitype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArchitype"):
                listener.exitArchitype(self)

    def architype(self):

        localctx = jacParser.ArchitypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_architype)
        try:
            self.state = 360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.match(jacParser.KW_NODE)
                self.state = 334
                self.match(jacParser.NAME)
                self.state = 339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 335
                        self.match(jacParser.COLON)
                        self.state = 336
                        self.match(jacParser.NAME)
                    self.state = 341
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)

                self.state = 344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
                if la_ == 1:
                    self.state = 342
                    self.match(jacParser.COLON)
                    self.state = 343
                    self.match(jacParser.INT)

                self.state = 346
                self.attr_block()
                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 347
                self.match(jacParser.KW_EDGE)
                self.state = 348
                self.match(jacParser.NAME)
                self.state = 353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 349
                        self.match(jacParser.COLON)
                        self.state = 350
                        self.match(jacParser.NAME)
                    self.state = 355
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 356
                self.attr_block()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 357
                self.match(jacParser.KW_GRAPH)
                self.state = 358
                self.match(jacParser.NAME)
                self.state = 359
                self.graph_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WalkerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def namespaces(self):
            return self.getTypedRuleContext(jacParser.NamespacesContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker"):
                listener.enterWalker(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker"):
                listener.exitWalker(self)

    def walker(self):

        localctx = jacParser.WalkerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_walker)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(jacParser.KW_WALKER)
            self.state = 363
            self.match(jacParser.NAME)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 364
                self.namespaces()

            self.state = 367
            self.walker_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def walk_entry_block(self):
            return self.getTypedRuleContext(jacParser.Walk_entry_blockContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def walk_activity_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Walk_activity_blockContext)
            else:
                return self.getTypedRuleContext(jacParser.Walk_activity_blockContext, i)

        def walk_exit_block(self):
            return self.getTypedRuleContext(jacParser.Walk_exit_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_block"):
                listener.enterWalker_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_block"):
                listener.exitWalker_block(self)

    def walker_block(self):

        localctx = jacParser.Walker_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_walker_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(jacParser.LBRACE)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                self.state = 370
                self.attr_stmt()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.state = 376
                self.walk_entry_block()

            self.state = 383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 381
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        jacParser.T__1,
                        jacParser.T__2,
                        jacParser.T__4,
                        jacParser.T__5,
                        jacParser.T__6,
                        jacParser.TYP_STRING,
                        jacParser.TYP_INT,
                        jacParser.TYP_FLOAT,
                        jacParser.TYP_LIST,
                        jacParser.TYP_DICT,
                        jacParser.TYP_BOOL,
                        jacParser.KW_TYPE,
                        jacParser.KW_NODE,
                        jacParser.KW_IGNORE,
                        jacParser.KW_TAKE,
                        jacParser.KW_SPAWN,
                        jacParser.COLON,
                        jacParser.DBL_COLON,
                        jacParser.LBRACE,
                        jacParser.KW_EDGE,
                        jacParser.KW_ASSERT,
                        jacParser.KW_IF,
                        jacParser.KW_FOR,
                        jacParser.KW_WHILE,
                        jacParser.KW_CONTINUE,
                        jacParser.KW_BREAK,
                        jacParser.KW_DISENGAGE,
                        jacParser.KW_YIELD,
                        jacParser.KW_SKIP,
                        jacParser.KW_REPORT,
                        jacParser.KW_DESTROY,
                        jacParser.KW_TRY,
                        jacParser.NOT,
                        jacParser.KW_GLOBAL,
                        jacParser.PLUS,
                        jacParser.MINUS,
                        jacParser.STAR_MUL,
                        jacParser.LPAREN,
                        jacParser.LSQUARE,
                        jacParser.FLOAT,
                        jacParser.STRING,
                        jacParser.BOOL,
                        jacParser.INT,
                        jacParser.NULL,
                        jacParser.NAME,
                    ]:
                        self.state = 379
                        self.statement()
                        pass
                    elif token in [jacParser.KW_WITH]:
                        self.state = 380
                        self.walk_activity_block()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)

            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_WITH:
                self.state = 386
                self.walk_exit_block()

            self.state = 389
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TEST(self):
            return self.getToken(jacParser.KW_TEST, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTest"):
                listener.enterTest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTest"):
                listener.exitTest(self)

    def test(self):

        localctx = jacParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(jacParser.KW_TEST)
            self.state = 392
            self.match(jacParser.STRING)
            self.state = 393
            self.match(jacParser.KW_WITH)
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
            if la_ == 1:
                self.state = 394
                self.graph_ref()
                pass

            elif la_ == 2:
                self.state = 395
                self.match(jacParser.KW_GRAPH)
                self.state = 396
                self.graph_block()
                pass

            self.state = 399
            self.match(jacParser.KW_BY)
            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 32, self._ctx)
            if la_ == 1:
                self.state = 400
                self.walker_ref()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 401
                    self.spawn_ctx()

                self.state = 406
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.COLON, jacParser.LBRACE]:
                    self.state = 404
                    self.code_block()
                    pass
                elif token in [jacParser.SEMI]:
                    self.state = 405
                    self.match(jacParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 408
                self.match(jacParser.KW_WALKER)
                self.state = 409
                self.walker_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_namespaces

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespaces"):
                listener.enterNamespaces(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespaces"):
                listener.exitNamespaces(self)

    def namespaces(self):

        localctx = jacParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_namespaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(jacParser.COLON)
            self.state = 413
            self.name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_entry_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_entry_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_entry_block"):
                listener.enterWalk_entry_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_entry_block"):
                listener.exitWalk_entry_block(self)

    def walk_entry_block(self):

        localctx = jacParser.Walk_entry_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_walk_entry_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(jacParser.KW_WITH)
            self.state = 416
            self.match(jacParser.KW_ENTRY)
            self.state = 417
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_exit_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_exit_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_exit_block"):
                listener.enterWalk_exit_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_exit_block"):
                listener.exitWalk_exit_block(self)

    def walk_exit_block(self):

        localctx = jacParser.Walk_exit_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_walk_exit_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(jacParser.KW_WITH)
            self.state = 420
            self.match(jacParser.KW_EXIT)
            self.state = 421
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_activity_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_activity_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_activity_block"):
                listener.enterWalk_activity_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_activity_block"):
                listener.exitWalk_activity_block(self)

    def walk_activity_block(self):

        localctx = jacParser.Walk_activity_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_walk_activity_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(jacParser.KW_WITH)
            self.state = 424
            self.match(jacParser.KW_ACTIVITY)
            self.state = 425
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_block"):
                listener.enterAttr_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_block"):
                listener.exitAttr_block(self)

    def attr_block(self):

        localctx = jacParser.Attr_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attr_block)
        self._la = 0  # Token type
        try:
            self.state = 438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.match(jacParser.LBRACE)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                    self.state = 428
                    self.attr_stmt()
                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 434
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.match(jacParser.COLON)
                self.state = 436
                self.attr_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 437
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def has_stmt(self):
            return self.getTypedRuleContext(jacParser.Has_stmtContext, 0)

        def can_stmt(self):
            return self.getTypedRuleContext(jacParser.Can_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_stmt"):
                listener.enterAttr_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_stmt"):
                listener.exitAttr_stmt(self)

    def attr_stmt(self):

        localctx = jacParser.Attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attr_stmt)
        try:
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_HAS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.has_stmt()
                pass
            elif token in [jacParser.KW_CAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.can_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def can_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Can_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Can_stmtContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_can_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_block"):
                listener.enterCan_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_block"):
                listener.exitCan_block(self)

    def can_block(self):

        localctx = jacParser.Can_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_can_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_CAN:
                self.state = 444
                self.can_stmt()
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_block_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_block_spawnContext, 0)

        def graph_block_dot(self):
            return self.getTypedRuleContext(jacParser.Graph_block_dotContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block"):
                listener.enterGraph_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block"):
                listener.exitGraph_block(self)

    def graph_block(self):

        localctx = jacParser.Graph_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_graph_block)
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self.graph_block_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.graph_block_dot()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_block_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext, 0)

        def can_block(self):
            return self.getTypedRuleContext(jacParser.Can_blockContext, 0)

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block_spawn"):
                listener.enterGraph_block_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block_spawn"):
                listener.exitGraph_block_spawn(self)

    def graph_block_spawn(self):

        localctx = jacParser.Graph_block_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_graph_block_spawn)
        try:
            self.state = 468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(jacParser.LBRACE)
                self.state = 455
                self.has_root()
                self.state = 456
                self.can_block()
                self.state = 457
                self.match(jacParser.KW_SPAWN)
                self.state = 458
                self.code_block()
                self.state = 459
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.match(jacParser.COLON)
                self.state = 462
                self.has_root()
                self.state = 463
                self.can_block()
                self.state = 464
                self.match(jacParser.KW_SPAWN)
                self.state = 465
                self.code_block()
                self.state = 466
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_block_dotContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext, 0)

        def dot_graph(self):
            return self.getTypedRuleContext(jacParser.Dot_graphContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_dot

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block_dot"):
                listener.enterGraph_block_dot(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block_dot"):
                listener.exitGraph_block_dot(self)

    def graph_block_dot(self):

        localctx = jacParser.Graph_block_dotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_graph_block_dot)
        try:
            self.state = 480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.match(jacParser.LBRACE)
                self.state = 471
                self.has_root()
                self.state = 472
                self.dot_graph()
                self.state = 473
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.match(jacParser.COLON)
                self.state = 476
                self.has_root()
                self.state = 477
                self.dot_graph()
                self.state = 478
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_rootContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_root

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_root"):
                listener.enterHas_root(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_root"):
                listener.exitHas_root(self)

    def has_root(self):

        localctx = jacParser.Has_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_has_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(jacParser.KW_HAS)
            self.state = 483
            self.match(jacParser.KW_ANCHOR)
            self.state = 484
            self.match(jacParser.NAME)
            self.state = 485
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def has_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_assignContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def KW_PRIVATE(self):
            return self.getToken(jacParser.KW_PRIVATE, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_has_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_stmt"):
                listener.enterHas_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_stmt"):
                listener.exitHas_stmt(self)

    def has_stmt(self):

        localctx = jacParser.Has_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_has_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(jacParser.KW_HAS)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_PRIVATE:
                self.state = 488
                self.match(jacParser.KW_PRIVATE)

            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_ANCHOR:
                self.state = 491
                self.match(jacParser.KW_ANCHOR)

            self.state = 494
            self.has_assign()
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 495
                self.match(jacParser.COMMA)
                self.state = 496
                self.has_assign()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 502
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_assign"):
                listener.enterHas_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_assign"):
                listener.exitHas_assign(self)

    def has_assign(self):

        localctx = jacParser.Has_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_has_assign)
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(jacParser.NAME)
                self.state = 506
                self.match(jacParser.EQ)
                self.state = 507
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAN(self):
            return self.getToken(jacParser.KW_CAN, 0)

        def dotted_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(jacParser.Dotted_nameContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def preset_in_out(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Preset_in_outContext)
            else:
                return self.getTypedRuleContext(jacParser.Preset_in_outContext, i)

        def event_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Event_clauseContext)
            else:
                return self.getTypedRuleContext(jacParser.Event_clauseContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_can_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_stmt"):
                listener.enterCan_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_stmt"):
                listener.exitCan_stmt(self)

    def can_stmt(self):

        localctx = jacParser.Can_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_can_stmt)
        self._la = 0  # Token type
        try:
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 48, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.match(jacParser.KW_CAN)
                self.state = 511
                self.dotted_name()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.DBL_COLON:
                    self.state = 512
                    self.preset_in_out()
                    self.state = 513
                    self.event_clause()

                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 517
                    self.match(jacParser.COMMA)
                    self.state = 518
                    self.dotted_name()
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.DBL_COLON:
                        self.state = 519
                        self.preset_in_out()
                        self.state = 520
                        self.event_clause()

                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 529
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.match(jacParser.KW_CAN)
                self.state = 532
                self.match(jacParser.NAME)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 533
                    self.event_clause()

                self.state = 536
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_event_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEvent_clause"):
                listener.enterEvent_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEvent_clause"):
                listener.exitEvent_clause(self)

    def event_clause(self):

        localctx = jacParser.Event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_event_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(jacParser.KW_WITH)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 540
                self.name_list()

            self.state = 543
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_ENTRY)
                            | (1 << jacParser.KW_EXIT)
                            | (1 << jacParser.KW_ACTIVITY)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Preset_in_outContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DBL_COLON)
            else:
                return self.getToken(jacParser.DBL_COLON, i)

        def COLON_OUT(self):
            return self.getToken(jacParser.COLON_OUT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_preset_in_out

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPreset_in_out"):
                listener.enterPreset_in_out(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPreset_in_out"):
                listener.exitPreset_in_out(self)

    def preset_in_out(self):

        localctx = jacParser.Preset_in_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_preset_in_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(jacParser.DBL_COLON)
            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
            if la_ == 1:
                self.state = 546
                self.expr_list()

            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.DBL_COLON]:
                self.state = 549
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.COLON_OUT]:
                self.state = 550
                self.match(jacParser.COLON_OUT)
                self.state = 551
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dotted_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_name"):
                listener.enterDotted_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_name"):
                listener.exitDotted_name(self)

    def dotted_name(self):

        localctx = jacParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dotted_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(jacParser.NAME)
            self.state = 555
            self.match(jacParser.DOT)
            self.state = 556
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_name_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName_list"):
                listener.enterName_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName_list"):
                listener.exitName_list(self)

    def name_list(self):

        localctx = jacParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_name_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(jacParser.NAME)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 559
                self.match(jacParser.COMMA)
                self.state = 560
                self.match(jacParser.NAME)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_expr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr_list"):
                listener.enterExpr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr_list"):
                listener.exitExpr_list(self)

    def expr_list(self):

        localctx = jacParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expr_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.expression()
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 567
                self.match(jacParser.COMMA)
                self.state = 568
                self.expression()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_code_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCode_block"):
                listener.enterCode_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCode_block"):
                listener.exitCode_block(self)

    def code_block(self):

        localctx = jacParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_code_block)
        self._la = 0  # Token type
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.match(jacParser.LBRACE)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__2)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.T__6)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_IGNORE)
                            | (1 << jacParser.KW_TAKE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.COLON)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_ASSERT)
                            | (1 << jacParser.KW_IF)
                            | (1 << jacParser.KW_FOR)
                            | (1 << jacParser.KW_WHILE)
                            | (1 << jacParser.KW_CONTINUE)
                            | (1 << jacParser.KW_BREAK)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (jacParser.KW_DISENGAGE - 64))
                            | (1 << (jacParser.KW_YIELD - 64))
                            | (1 << (jacParser.KW_SKIP - 64))
                            | (1 << (jacParser.KW_REPORT - 64))
                            | (1 << (jacParser.KW_DESTROY - 64))
                            | (1 << (jacParser.KW_TRY - 64))
                            | (1 << (jacParser.NOT - 64))
                            | (1 << (jacParser.KW_GLOBAL - 64))
                            | (1 << (jacParser.PLUS - 64))
                            | (1 << (jacParser.MINUS - 64))
                            | (1 << (jacParser.STAR_MUL - 64))
                            | (1 << (jacParser.LPAREN - 64))
                            | (1 << (jacParser.LSQUARE - 64))
                            | (1 << (jacParser.FLOAT - 64))
                            | (1 << (jacParser.STRING - 64))
                            | (1 << (jacParser.BOOL - 64))
                            | (1 << (jacParser.INT - 64))
                            | (1 << (jacParser.NULL - 64))
                            | (1 << (jacParser.NAME - 64))
                        )
                    )
                    != 0
                ):
                    self.state = 575
                    self.statement()
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 581
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self.match(jacParser.COLON)
                self.state = 583
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_ctx_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ctx_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ctx_block"):
                listener.enterNode_ctx_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ctx_block"):
                listener.exitNode_ctx_block(self)

    def node_ctx_block(self):

        localctx = jacParser.Node_ctx_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_node_ctx_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.name_list()
            self.state = 587
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def node_ctx_block(self):
            return self.getTypedRuleContext(jacParser.Node_ctx_blockContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(jacParser.If_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(jacParser.Try_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(jacParser.For_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(jacParser.While_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(jacParser.Assert_stmtContext, 0)

        def ctrl_stmt(self):
            return self.getTypedRuleContext(jacParser.Ctrl_stmtContext, 0)

        def destroy_action(self):
            return self.getTypedRuleContext(jacParser.Destroy_actionContext, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def walker_action(self):
            return self.getTypedRuleContext(jacParser.Walker_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = jacParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_statement)
        try:
            self.state = 607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 589
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 590
                self.node_ctx_block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 591
                self.expression()
                self.state = 592
                self.match(jacParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 594
                self.if_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 595
                self.try_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 596
                self.for_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 597
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 598
                self.assert_stmt()
                self.state = 599
                self.match(jacParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 601
                self.ctrl_stmt()
                self.state = 602
                self.match(jacParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 604
                self.destroy_action()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 605
                self.report_action()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 606
                self.walker_action()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(jacParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def elif_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Elif_stmtContext, i)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_if_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_stmt"):
                listener.enterIf_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_stmt"):
                listener.exitIf_stmt(self)

    def if_stmt(self):

        localctx = jacParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(jacParser.KW_IF)
            self.state = 610
            self.expression()
            self.state = 611
            self.code_block()
            self.state = 615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 612
                    self.elif_stmt()
                self.state = 617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)

            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
            if la_ == 1:
                self.state = 618
                self.else_stmt()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRY(self):
            return self.getToken(jacParser.KW_TRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def else_from_try(self):
            return self.getTypedRuleContext(jacParser.Else_from_tryContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_try_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTry_stmt"):
                listener.enterTry_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTry_stmt"):
                listener.exitTry_stmt(self)

    def try_stmt(self):

        localctx = jacParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(jacParser.KW_TRY)
            self.state = 622
            self.code_block()
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
            if la_ == 1:
                self.state = 623
                self.else_from_try()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_from_tryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_from_try

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_from_try"):
                listener.enterElse_from_try(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_from_try"):
                listener.exitElse_from_try(self)

    def else_from_try(self):

        localctx = jacParser.Else_from_tryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_else_from_try)
        self._la = 0  # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.match(jacParser.KW_ELSE)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 627
                    self.match(jacParser.LPAREN)
                    self.state = 628
                    self.match(jacParser.NAME)
                    self.state = 629
                    self.match(jacParser.RPAREN)

                self.state = 632
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.match(jacParser.KW_ELSE)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 634
                    self.match(jacParser.KW_WITH)
                    self.state = 635
                    self.match(jacParser.NAME)

                self.state = 638
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elif_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELIF(self):
            return self.getToken(jacParser.KW_ELIF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_elif_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElif_stmt"):
                listener.enterElif_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElif_stmt"):
                listener.exitElif_stmt(self)

    def elif_stmt(self):

        localctx = jacParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(jacParser.KW_ELIF)
            self.state = 642
            self.expression()
            self.state = 643
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_stmt"):
                listener.enterElse_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_stmt"):
                listener.exitElse_stmt(self)

    def else_stmt(self):

        localctx = jacParser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(jacParser.KW_ELSE)
            self.state = 646
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(jacParser.KW_FOR, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def KW_TO(self):
            return self.getToken(jacParser.KW_TO, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def getRuleIndex(self):
            return jacParser.RULE_for_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_stmt"):
                listener.enterFor_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_stmt"):
                listener.exitFor_stmt(self)

    def for_stmt(self):

        localctx = jacParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 648
                self.match(jacParser.KW_FOR)
                self.state = 649
                self.expression()
                self.state = 650
                self.match(jacParser.KW_TO)
                self.state = 651
                self.expression()
                self.state = 652
                self.match(jacParser.KW_BY)
                self.state = 653
                self.expression()
                self.state = 654
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.match(jacParser.KW_FOR)
                self.state = 657
                self.match(jacParser.NAME)
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 658
                    self.match(jacParser.COMMA)
                    self.state = 659
                    self.match(jacParser.NAME)

                self.state = 662
                self.match(jacParser.KW_IN)
                self.state = 663
                self.expression()
                self.state = 664
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(jacParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_while_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_stmt"):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_stmt"):
                listener.exitWhile_stmt(self)

    def while_stmt(self):

        localctx = jacParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(jacParser.KW_WHILE)
            self.state = 669
            self.expression()
            self.state = 670
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctrl_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTINUE(self):
            return self.getToken(jacParser.KW_CONTINUE, 0)

        def KW_BREAK(self):
            return self.getToken(jacParser.KW_BREAK, 0)

        def KW_SKIP(self):
            return self.getToken(jacParser.KW_SKIP, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ctrl_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtrl_stmt"):
                listener.enterCtrl_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtrl_stmt"):
                listener.exitCtrl_stmt(self)

    def ctrl_stmt(self):

        localctx = jacParser.Ctrl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ctrl_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 62)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 62))
                        & (
                            (1 << (jacParser.KW_CONTINUE - 62))
                            | (1 << (jacParser.KW_BREAK - 62))
                            | (1 << (jacParser.KW_SKIP - 62))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASSERT(self):
            return self.getToken(jacParser.KW_ASSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssert_stmt"):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssert_stmt"):
                listener.exitAssert_stmt(self)

    def assert_stmt(self):

        localctx = jacParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assert_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(jacParser.KW_ASSERT)
            self.state = 675
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destroy_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_destroy_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDestroy_action"):
                listener.enterDestroy_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDestroy_action"):
                listener.exitDestroy_action(self)

    def destroy_action(self):

        localctx = jacParser.Destroy_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_destroy_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(jacParser.KW_DESTROY)
            self.state = 678
            self.expression()
            self.state = 679
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Report_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPORT(self):
            return self.getToken(jacParser.KW_REPORT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_report_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReport_action"):
                listener.enterReport_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReport_action"):
                listener.exitReport_action(self)

    def report_action(self):

        localctx = jacParser.Report_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_report_action)
        try:
            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.match(jacParser.KW_REPORT)
                self.state = 682
                self.expression()
                self.state = 683
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.match(jacParser.KW_REPORT)
                self.state = 686
                self.match(jacParser.COLON)
                self.state = 687
                self.match(jacParser.NAME)
                self.state = 688
                self.match(jacParser.EQ)
                self.state = 689
                self.expression()
                self.state = 690
                self.match(jacParser.SEMI)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ignore_action(self):
            return self.getTypedRuleContext(jacParser.Ignore_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def disengage_action(self):
            return self.getTypedRuleContext(jacParser.Disengage_actionContext, 0)

        def yield_action(self):
            return self.getTypedRuleContext(jacParser.Yield_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_action"):
                listener.enterWalker_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_action"):
                listener.exitWalker_action(self)

    def walker_action(self):

        localctx = jacParser.Walker_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_walker_action)
        try:
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.ignore_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.take_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 696
                self.disengage_action()
                pass
            elif token in [jacParser.KW_YIELD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 697
                self.yield_action()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ignore_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IGNORE(self):
            return self.getToken(jacParser.KW_IGNORE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ignore_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIgnore_action"):
                listener.enterIgnore_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIgnore_action"):
                listener.exitIgnore_action(self)

    def ignore_action(self):

        localctx = jacParser.Ignore_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ignore_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(jacParser.KW_IGNORE)
            self.state = 701
            self.expression()
            self.state = 702
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Take_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TAKE(self):
            return self.getToken(jacParser.KW_TAKE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_take_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTake_action"):
                listener.enterTake_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTake_action"):
                listener.exitTake_action(self)

    def take_action(self):

        localctx = jacParser.Take_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_take_action)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(jacParser.KW_TAKE)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 705
                self.match(jacParser.COLON)
                self.state = 706
                self.match(jacParser.NAME)

            self.state = 709
            self.expression()
            self.state = 712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.SEMI]:
                self.state = 710
                self.match(jacParser.SEMI)
                pass
            elif token in [jacParser.KW_ELSE]:
                self.state = 711
                self.else_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Disengage_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISENGAGE(self):
            return self.getToken(jacParser.KW_DISENGAGE, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_disengage_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDisengage_action"):
                listener.enterDisengage_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDisengage_action"):
                listener.exitDisengage_action(self)

    def disengage_action(self):

        localctx = jacParser.Disengage_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_disengage_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(jacParser.KW_DISENGAGE)
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_REPORT]:
                self.state = 715
                self.report_action()
                pass
            elif token in [jacParser.SEMI]:
                self.state = 716
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YIELD(self):
            return self.getToken(jacParser.KW_YIELD, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def disengage_action(self):
            return self.getTypedRuleContext(jacParser.Disengage_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_yield_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_action"):
                listener.enterYield_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_action"):
                listener.exitYield_action(self)

    def yield_action(self):

        localctx = jacParser.Yield_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_yield_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(jacParser.KW_YIELD)
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_REPORT]:
                self.state = 720
                self.report_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.state = 721
                self.disengage_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.state = 722
                self.take_action()
                pass
            elif token in [jacParser.SEMI]:
                self.state = 723
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self):
            return self.getTypedRuleContext(jacParser.ConnectContext, 0)

        def assignment(self):
            return self.getTypedRuleContext(jacParser.AssignmentContext, 0)

        def copy_assign(self):
            return self.getTypedRuleContext(jacParser.Copy_assignContext, 0)

        def inc_assign(self):
            return self.getTypedRuleContext(jacParser.Inc_assignContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):

        localctx = jacParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.connect()
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
            if la_ == 1:
                self.state = 727
                self.assignment()

            elif la_ == 2:
                self.state = 728
                self.copy_assign()

            elif la_ == 3:
                self.state = 729
                self.inc_assign()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)

    def assignment(self):

        localctx = jacParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(jacParser.EQ)
            self.state = 733
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CPY_EQ(self):
            return self.getToken(jacParser.CPY_EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_copy_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCopy_assign"):
                listener.enterCopy_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCopy_assign"):
                listener.exitCopy_assign(self)

    def copy_assign(self):

        localctx = jacParser.Copy_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_copy_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(jacParser.CPY_EQ)
            self.state = 736
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inc_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def PEQ(self):
            return self.getToken(jacParser.PEQ, 0)

        def MEQ(self):
            return self.getToken(jacParser.MEQ, 0)

        def TEQ(self):
            return self.getToken(jacParser.TEQ, 0)

        def DEQ(self):
            return self.getToken(jacParser.DEQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_inc_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInc_assign"):
                listener.enterInc_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInc_assign"):
                listener.exitInc_assign(self)

    def inc_assign(self):

        localctx = jacParser.Inc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_inc_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.PEQ)
                            | (1 << jacParser.MEQ)
                            | (1 << jacParser.TEQ)
                            | (1 << jacParser.DEQ)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 739
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConnectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical(self):
            return self.getTypedRuleContext(jacParser.LogicalContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect"):
                listener.enterConnect(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect"):
                listener.exitConnect(self)

    def connect(self):

        localctx = jacParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_connect)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.logical()
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
            if la_ == 1:
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.NOT:
                    self.state = 742
                    self.match(jacParser.NOT)

                self.state = 745
                self.edge_ref()
                self.state = 746
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.CompareContext)
            else:
                return self.getTypedRuleContext(jacParser.CompareContext, i)

        def KW_AND(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_AND)
            else:
                return self.getToken(jacParser.KW_AND, i)

        def KW_OR(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_OR)
            else:
                return self.getToken(jacParser.KW_OR, i)

        def getRuleIndex(self):
            return jacParser.RULE_logical

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical"):
                listener.enterLogical(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical"):
                listener.exitLogical(self)

    def logical(self):

        localctx = jacParser.LogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_logical)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.compare()
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_AND or _la == jacParser.KW_OR:
                self.state = 751
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_AND or _la == jacParser.KW_OR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 752
                self.compare()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def compare(self):
            return self.getTypedRuleContext(jacParser.CompareContext, 0)

        def arithmetic(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(jacParser.ArithmeticContext, i)

        def cmp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Cmp_opContext)
            else:
                return self.getTypedRuleContext(jacParser.Cmp_opContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompare"):
                listener.enterCompare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompare"):
                listener.exitCompare(self)

    def compare(self):

        localctx = jacParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_compare)
        try:
            self.state = 769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.match(jacParser.NOT)
                self.state = 759
                self.compare()
                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__2,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.T__6,
                jacParser.TYP_STRING,
                jacParser.TYP_INT,
                jacParser.TYP_FLOAT,
                jacParser.TYP_LIST,
                jacParser.TYP_DICT,
                jacParser.TYP_BOOL,
                jacParser.KW_TYPE,
                jacParser.KW_NODE,
                jacParser.KW_SPAWN,
                jacParser.DBL_COLON,
                jacParser.LBRACE,
                jacParser.KW_EDGE,
                jacParser.KW_GLOBAL,
                jacParser.PLUS,
                jacParser.MINUS,
                jacParser.STAR_MUL,
                jacParser.LPAREN,
                jacParser.LSQUARE,
                jacParser.FLOAT,
                jacParser.STRING,
                jacParser.BOOL,
                jacParser.INT,
                jacParser.NULL,
                jacParser.NAME,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 760
                self.arithmetic()
                self.state = 766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 75, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 761
                        self.cmp_op()
                        self.state = 762
                        self.arithmetic()
                    self.state = 768
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 75, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmp_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(jacParser.EE, 0)

        def LT(self):
            return self.getToken(jacParser.LT, 0)

        def GT(self):
            return self.getToken(jacParser.GT, 0)

        def LTE(self):
            return self.getToken(jacParser.LTE, 0)

        def GTE(self):
            return self.getToken(jacParser.GTE, 0)

        def NE(self):
            return self.getToken(jacParser.NE, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def nin(self):
            return self.getTypedRuleContext(jacParser.NinContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cmp_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCmp_op"):
                listener.enterCmp_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCmp_op"):
                listener.exitCmp_op(self)

    def cmp_op(self):

        localctx = jacParser.Cmp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cmp_op)
        try:
            self.state = 779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.EE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.match(jacParser.EE)
                pass
            elif token in [jacParser.LT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.match(jacParser.LT)
                pass
            elif token in [jacParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 773
                self.match(jacParser.GT)
                pass
            elif token in [jacParser.LTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 774
                self.match(jacParser.LTE)
                pass
            elif token in [jacParser.GTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 775
                self.match(jacParser.GTE)
                pass
            elif token in [jacParser.NE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 776
                self.match(jacParser.NE)
                pass
            elif token in [jacParser.KW_IN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 777
                self.match(jacParser.KW_IN)
                pass
            elif token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 778
                self.nin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NinContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_nin

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNin"):
                listener.enterNin(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNin"):
                listener.exitNin(self)

    def nin(self):

        localctx = jacParser.NinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_nin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(jacParser.NOT)
            self.state = 782
            self.match(jacParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.TermContext)
            else:
                return self.getTypedRuleContext(jacParser.TermContext, i)

        def PLUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.PLUS)
            else:
                return self.getToken(jacParser.PLUS, i)

        def MINUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MINUS)
            else:
                return self.getToken(jacParser.MINUS, i)

        def getRuleIndex(self):
            return jacParser.RULE_arithmetic

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmetic"):
                listener.enterArithmetic(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmetic"):
                listener.exitArithmetic(self)

    def arithmetic(self):

        localctx = jacParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arithmetic)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.term()
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 785
                    _la = self._input.LA(1)
                    if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 786
                    self.term()
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def STAR_MUL(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.STAR_MUL)
            else:
                return self.getToken(jacParser.STAR_MUL, i)

        def DIV(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DIV)
            else:
                return self.getToken(jacParser.DIV, i)

        def MOD(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MOD)
            else:
                return self.getToken(jacParser.MOD, i)

        def getRuleIndex(self):
            return jacParser.RULE_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTerm"):
                listener.enterTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTerm"):
                listener.exitTerm(self)

    def term(self):

        localctx = jacParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.factor()
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 87)) & ~0x3F) == 0 and (
                (1 << (_la - 87))
                & (
                    (1 << (jacParser.STAR_MUL - 87))
                    | (1 << (jacParser.DIV - 87))
                    | (1 << (jacParser.MOD - 87))
                )
            ) != 0:
                self.state = 793
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 87)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 87))
                            & (
                                (1 << (jacParser.STAR_MUL - 87))
                                | (1 << (jacParser.DIV - 87))
                                | (1 << (jacParser.MOD - 87))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 794
                self.factor()
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(jacParser.FactorContext, 0)

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def power(self):
            return self.getTypedRuleContext(jacParser.PowerContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

    def factor(self):

        localctx = jacParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 80, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                _la = self._input.LA(1)
                if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 801
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.power()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def POW(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.POW)
            else:
                return self.getToken(jacParser.POW, i)

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_power

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPower"):
                listener.enterPower(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPower"):
                listener.exitPower(self)

    def power(self):

        localctx = jacParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.atom(0)
            self.state = 810
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 806
                    self.match(jacParser.POW)
                    self.state = 807
                    self.factor()
                self.state = 812
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_global_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_ref"):
                listener.enterGlobal_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_ref"):
                listener.exitGlobal_ref(self)

    def global_ref(self):

        localctx = jacParser.Global_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_global_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(jacParser.KW_GLOBAL)
            self.state = 814
            self.match(jacParser.DOT)
            self.state = 817
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_CONTEXT, jacParser.KW_INFO, jacParser.KW_DETAILS]:
                self.state = 815
                self.obj_built_in()
                pass
            elif token in [jacParser.NAME]:
                self.state = 816
                self.match(jacParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def BOOL(self):
            return self.getToken(jacParser.BOOL, 0)

        def NULL(self):
            return self.getToken(jacParser.NULL, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def global_ref(self):
            return self.getTypedRuleContext(jacParser.Global_refContext, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext, 0)

        def list_val(self):
            return self.getTypedRuleContext(jacParser.List_valContext, 0)

        def dict_val(self):
            return self.getTypedRuleContext(jacParser.Dict_valContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def spawn(self):
            return self.getTypedRuleContext(jacParser.SpawnContext, 0)

        def ref(self):
            return self.getTypedRuleContext(jacParser.RefContext, 0)

        def deref(self):
            return self.getTypedRuleContext(jacParser.DerefContext, 0)

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def atom_trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Atom_trailerContext)
            else:
                return self.getTypedRuleContext(jacParser.Atom_trailerContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

    def atom(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = jacParser.AtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_atom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 84, self._ctx)
            if la_ == 1:
                self.state = 820
                self.match(jacParser.INT)
                pass

            elif la_ == 2:
                self.state = 821
                self.match(jacParser.FLOAT)
                pass

            elif la_ == 3:
                self.state = 822
                self.match(jacParser.STRING)
                pass

            elif la_ == 4:
                self.state = 823
                self.match(jacParser.BOOL)
                pass

            elif la_ == 5:
                self.state = 824
                self.match(jacParser.NULL)
                pass

            elif la_ == 6:
                self.state = 825
                self.match(jacParser.NAME)
                pass

            elif la_ == 7:
                self.state = 826
                self.global_ref()
                pass

            elif la_ == 8:
                self.state = 827
                self.node_edge_ref()
                pass

            elif la_ == 9:
                self.state = 828
                self.list_val()
                pass

            elif la_ == 10:
                self.state = 829
                self.dict_val()
                pass

            elif la_ == 11:
                self.state = 830
                self.match(jacParser.LPAREN)
                self.state = 831
                self.expression()
                self.state = 832
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 12:
                self.state = 834
                self.ability_op()
                self.state = 835
                self.match(jacParser.NAME)
                self.state = 837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 83, self._ctx)
                if la_ == 1:
                    self.state = 836
                    self.spawn_ctx()

                pass

            elif la_ == 13:
                self.state = 839
                self.spawn()
                pass

            elif la_ == 14:
                self.state = 840
                self.ref()
                pass

            elif la_ == 15:
                self.state = 841
                self.deref()
                pass

            elif la_ == 16:
                self.state = 842
                self.any_type()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                    self.state = 845
                    if not self.precpred(self._ctx, 5):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 5)"
                        )
                    self.state = 847
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 846
                            self.atom_trailer()

                        else:
                            raise NoViableAltException(self)
                        self.state = 849
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)

                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atom_trailerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def built_in(self):
            return self.getTypedRuleContext(jacParser.Built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def index_slice(self):
            return self.getTypedRuleContext(jacParser.Index_sliceContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_atom_trailer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom_trailer"):
                listener.enterAtom_trailer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom_trailer"):
                listener.exitAtom_trailer(self)

    def atom_trailer(self):

        localctx = jacParser.Atom_trailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_atom_trailer)
        self._la = 0  # Token type
        try:
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 856
                self.match(jacParser.DOT)
                self.state = 857
                self.built_in()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.match(jacParser.DOT)
                self.state = 859
                self.match(jacParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 860
                self.index_slice()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 861
                self.match(jacParser.LPAREN)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__2)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.T__6)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 71)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 71))
                        & (
                            (1 << (jacParser.NOT - 71))
                            | (1 << (jacParser.KW_GLOBAL - 71))
                            | (1 << (jacParser.PLUS - 71))
                            | (1 << (jacParser.MINUS - 71))
                            | (1 << (jacParser.STAR_MUL - 71))
                            | (1 << (jacParser.LPAREN - 71))
                            | (1 << (jacParser.LSQUARE - 71))
                            | (1 << (jacParser.FLOAT - 71))
                            | (1 << (jacParser.STRING - 71))
                            | (1 << (jacParser.BOOL - 71))
                            | (1 << (jacParser.INT - 71))
                            | (1 << (jacParser.NULL - 71))
                            | (1 << (jacParser.NAME - 71))
                        )
                    )
                    != 0
                ):
                    self.state = 862
                    self.expr_list()

                self.state = 865
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 866
                self.ability_op()
                self.state = 867
                self.match(jacParser.NAME)
                self.state = 869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
                if la_ == 1:
                    self.state = 868
                    self.spawn_ctx()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ability_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ability_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbility_op"):
                listener.enterAbility_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbility_op"):
                listener.exitAbility_op(self)

    def ability_op(self):

        localctx = jacParser.Ability_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ability_op)
        try:
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 90, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(jacParser.DBL_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(jacParser.DBL_COLON)
                self.state = 875
                self.match(jacParser.NAME)
                self.state = 876
                self.match(jacParser.COLON)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRef"):
                listener.enterRef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRef"):
                listener.exitRef(self)

    def ref(self):

        localctx = jacParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(jacParser.T__1)
            self.state = 880
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_deref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeref"):
                listener.enterDeref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeref"):
                listener.exitDeref(self)

    def deref(self):

        localctx = jacParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(jacParser.STAR_MUL)
            self.state = 883
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_built_in(self):
            return self.getTypedRuleContext(jacParser.String_built_inContext, 0)

        def dict_built_in(self):
            return self.getTypedRuleContext(jacParser.Dict_built_inContext, 0)

        def list_built_in(self):
            return self.getTypedRuleContext(jacParser.List_built_inContext, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def cast_built_in(self):
            return self.getTypedRuleContext(jacParser.Cast_built_inContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBuilt_in"):
                listener.enterBuilt_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBuilt_in"):
                listener.exitBuilt_in(self)

    def built_in(self):

        localctx = jacParser.Built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_built_in)
        try:
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.string_built_in()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 887
                self.dict_built_in()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 888
                self.list_built_in()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 889
                self.obj_built_in()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 890
                self.cast_built_in()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cast_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCast_built_in"):
                listener.enterCast_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCast_built_in"):
                listener.exitCast_built_in(self)

    def cast_built_in(self):

        localctx = jacParser.Cast_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_cast_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Obj_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(jacParser.KW_CONTEXT, 0)

        def KW_INFO(self):
            return self.getToken(jacParser.KW_INFO, 0)

        def KW_DETAILS(self):
            return self.getToken(jacParser.KW_DETAILS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_obj_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObj_built_in"):
                listener.enterObj_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObj_built_in"):
                listener.exitObj_built_in(self)

    def obj_built_in(self):

        localctx = jacParser.Obj_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_obj_built_in)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_CONTEXT)
                            | (1 << jacParser.KW_INFO)
                            | (1 << jacParser.KW_DETAILS)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KEYS(self):
            return self.getToken(jacParser.KW_KEYS, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def DICT_DBL_COLON(self):
            return self.getToken(jacParser.DICT_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dict_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_built_in"):
                listener.enterDict_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_built_in"):
                listener.exitDict_built_in(self)

    def dict_built_in(self):

        localctx = jacParser.Dict_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dict_built_in)
        self._la = 0  # Token type
        try:
            self.state = 914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_KEYS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.match(jacParser.KW_KEYS)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.match(jacParser.LBRACE)
                self.state = 899
                self.name_list()
                self.state = 900
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.TYP_DICT, jacParser.DICT_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 905
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_DICT]:
                    self.state = 902
                    self.match(jacParser.TYP_DICT)
                    self.state = 903
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.DICT_DBL_COLON]:
                    self.state = 904
                    self.match(jacParser.DICT_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 907
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_KEYS or _la == jacParser.NAME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
                if la_ == 1:
                    self.state = 908
                    self.match(jacParser.LPAREN)
                    self.state = 909
                    self.expr_list()
                    self.state = 910
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LENGTH(self):
            return self.getToken(jacParser.KW_LENGTH, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def LIST_DBL_COLON(self):
            return self.getToken(jacParser.LIST_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_built_in"):
                listener.enterList_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_built_in"):
                listener.exitList_built_in(self)

    def list_built_in(self):

        localctx = jacParser.List_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_list_built_in)
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_LENGTH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.match(jacParser.KW_LENGTH)
                pass
            elif token in [jacParser.TYP_LIST, jacParser.LIST_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_LIST]:
                    self.state = 917
                    self.match(jacParser.TYP_LIST)
                    self.state = 918
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.LIST_DBL_COLON]:
                    self.state = 919
                    self.match(jacParser.LIST_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 922
                self.match(jacParser.NAME)
                self.state = 927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
                if la_ == 1:
                    self.state = 923
                    self.match(jacParser.LPAREN)
                    self.state = 924
                    self.expr_list()
                    self.state = 925
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def STR_DBL_COLON(self):
            return self.getToken(jacParser.STR_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_string_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_built_in"):
                listener.enterString_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_built_in"):
                listener.exitString_built_in(self)

    def string_built_in(self):

        localctx = jacParser.String_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_string_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.TYP_STRING]:
                self.state = 931
                self.match(jacParser.TYP_STRING)
                self.state = 932
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.STR_DBL_COLON]:
                self.state = 933
                self.match(jacParser.STR_DBL_COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 936
            self.match(jacParser.NAME)
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
            if la_ == 1:
                self.state = 937
                self.match(jacParser.LPAREN)
                self.state = 938
                self.expr_list()
                self.state = 939
                self.match(jacParser.RPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_edge_ref"):
                listener.enterNode_edge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_edge_ref"):
                listener.exitNode_edge_ref(self)

    def node_edge_ref(self):

        localctx = jacParser.Node_edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_node_edge_ref)
        try:
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.node_ref()
                self.state = 945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
                if la_ == 1:
                    self.state = 944
                    self.filter_ctx()

                pass
            elif token in [
                jacParser.T__2,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.T__6,
                jacParser.MINUS,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.edge_ref()
                self.state = 952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
                if la_ == 1:
                    self.state = 948
                    self.node_ref()
                    self.state = 950
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
                    if la_ == 1:
                        self.state = 949
                        self.filter_ctx()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ref"):
                listener.enterNode_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ref"):
                listener.exitNode_ref(self)

    def node_ref(self):

        localctx = jacParser.Node_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_node_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(jacParser.KW_NODE)
            self.state = 957
            self.match(jacParser.DBL_COLON)
            self.state = 958
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_ref"):
                listener.enterWalker_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_ref"):
                listener.exitWalker_ref(self)

    def walker_ref(self):

        localctx = jacParser.Walker_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_walker_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(jacParser.KW_WALKER)
            self.state = 961
            self.match(jacParser.DBL_COLON)
            self.state = 962
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_ref"):
                listener.enterGraph_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_ref"):
                listener.exitGraph_ref(self)

    def graph_ref(self):

        localctx = jacParser.Graph_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_graph_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(jacParser.KW_GRAPH)
            self.state = 965
            self.match(jacParser.DBL_COLON)
            self.state = 966
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_to(self):
            return self.getTypedRuleContext(jacParser.Edge_toContext, 0)

        def edge_from(self):
            return self.getTypedRuleContext(jacParser.Edge_fromContext, 0)

        def edge_any(self):
            return self.getTypedRuleContext(jacParser.Edge_anyContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_ref"):
                listener.enterEdge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_ref"):
                listener.exitEdge_ref(self)

    def edge_ref(self):

        localctx = jacParser.Edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_edge_ref)
        try:
            self.state = 971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.edge_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.edge_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.edge_any()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_toContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_to

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_to"):
                listener.enterEdge_to(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_to"):
                listener.exitEdge_to(self)

    def edge_to(self):

        localctx = jacParser.Edge_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_edge_to)
        self._la = 0  # Token type
        try:
            self.state = 985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 973
                self.match(jacParser.T__2)
                pass
            elif token in [jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.match(jacParser.MINUS)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 975
                    self.match(jacParser.LSQUARE)
                    self.state = 976
                    self.match(jacParser.NAME)
                    self.state = 979
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
                    if la_ == 1:
                        self.state = 977
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 978
                        self.filter_ctx()

                    self.state = 981
                    self.match(jacParser.RSQUARE)

                self.state = 984
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_from"):
                listener.enterEdge_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_from"):
                listener.exitEdge_from(self)

    def edge_from(self):

        localctx = jacParser.Edge_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_edge_from)
        self._la = 0  # Token type
        try:
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 987
                self.match(jacParser.T__4)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self.match(jacParser.T__5)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 989
                    self.match(jacParser.LSQUARE)
                    self.state = 990
                    self.match(jacParser.NAME)
                    self.state = 993
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
                    if la_ == 1:
                        self.state = 991
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 992
                        self.filter_ctx()

                    self.state = 995
                    self.match(jacParser.RSQUARE)

                self.state = 998
                self.match(jacParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_anyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_any

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_any"):
                listener.enterEdge_any(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_any"):
                listener.exitEdge_any(self)

    def edge_any(self):

        localctx = jacParser.Edge_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_edge_any)
        self._la = 0  # Token type
        try:
            self.state = 1013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.match(jacParser.T__6)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.match(jacParser.T__5)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1003
                    self.match(jacParser.LSQUARE)
                    self.state = 1004
                    self.match(jacParser.NAME)
                    self.state = 1007
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 111, self._ctx)
                    if la_ == 1:
                        self.state = 1005
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 1006
                        self.filter_ctx()

                    self.state = 1009
                    self.match(jacParser.RSQUARE)

                self.state = 1012
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_val"):
                listener.enterList_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_val"):
                listener.exitList_val(self)

    def list_val(self):

        localctx = jacParser.List_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_list_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(jacParser.LSQUARE)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__2)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.T__6)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 71)) & ~0x3F) == 0
                and (
                    (1 << (_la - 71))
                    & (
                        (1 << (jacParser.NOT - 71))
                        | (1 << (jacParser.KW_GLOBAL - 71))
                        | (1 << (jacParser.PLUS - 71))
                        | (1 << (jacParser.MINUS - 71))
                        | (1 << (jacParser.STAR_MUL - 71))
                        | (1 << (jacParser.LPAREN - 71))
                        | (1 << (jacParser.LSQUARE - 71))
                        | (1 << (jacParser.FLOAT - 71))
                        | (1 << (jacParser.STRING - 71))
                        | (1 << (jacParser.BOOL - 71))
                        | (1 << (jacParser.INT - 71))
                        | (1 << (jacParser.NULL - 71))
                        | (1 << (jacParser.NAME - 71))
                    )
                )
                != 0
            ):
                self.state = 1016
                self.expr_list()

            self.state = 1019
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_sliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index_slice

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndex_slice"):
                listener.enterIndex_slice(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndex_slice"):
                listener.exitIndex_slice(self)

    def index_slice(self):

        localctx = jacParser.Index_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_index_slice)
        try:
            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.match(jacParser.LSQUARE)
                self.state = 1022
                self.expression()
                self.state = 1023
                self.match(jacParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.match(jacParser.LSQUARE)
                self.state = 1026
                self.expression()
                self.state = 1027
                self.match(jacParser.COLON)
                self.state = 1028
                self.expression()
                self.state = 1029
                self.match(jacParser.RSQUARE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def kv_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(jacParser.Kv_pairContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dict_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_val"):
                listener.enterDict_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_val"):
                listener.exitDict_val(self)

    def dict_val(self):

        localctx = jacParser.Dict_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dict_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(jacParser.LBRACE)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__2)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.T__6)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 71)) & ~0x3F) == 0
                and (
                    (1 << (_la - 71))
                    & (
                        (1 << (jacParser.NOT - 71))
                        | (1 << (jacParser.KW_GLOBAL - 71))
                        | (1 << (jacParser.PLUS - 71))
                        | (1 << (jacParser.MINUS - 71))
                        | (1 << (jacParser.STAR_MUL - 71))
                        | (1 << (jacParser.LPAREN - 71))
                        | (1 << (jacParser.LSQUARE - 71))
                        | (1 << (jacParser.FLOAT - 71))
                        | (1 << (jacParser.STRING - 71))
                        | (1 << (jacParser.BOOL - 71))
                        | (1 << (jacParser.INT - 71))
                        | (1 << (jacParser.NULL - 71))
                        | (1 << (jacParser.NAME - 71))
                    )
                )
                != 0
            ):
                self.state = 1034
                self.kv_pair()
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1035
                    self.match(jacParser.COMMA)
                    self.state = 1036
                    self.kv_pair()
                    self.state = 1041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1044
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kv_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_kv_pair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKv_pair"):
                listener.enterKv_pair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKv_pair"):
                listener.exitKv_pair(self)

    def kv_pair(self):

        localctx = jacParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.expression()
            self.state = 1047
            self.match(jacParser.COLON)
            self.state = 1048
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def spawn_object(self):
            return self.getTypedRuleContext(jacParser.Spawn_objectContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn"):
                listener.enterSpawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn"):
                listener.exitSpawn(self)

    def spawn(self):

        localctx = jacParser.SpawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(jacParser.KW_SPAWN)
            self.state = 1051
            self.spawn_object()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_objectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_spawn(self):
            return self.getTypedRuleContext(jacParser.Node_spawnContext, 0)

        def walker_spawn(self):
            return self.getTypedRuleContext(jacParser.Walker_spawnContext, 0)

        def graph_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_spawnContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_object

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_object"):
                listener.enterSpawn_object(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_object"):
                listener.exitSpawn_object(self)

    def spawn_object(self):

        localctx = jacParser.Spawn_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_spawn_object)
        try:
            self.state = 1056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1053
                self.node_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                self.walker_spawn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1055
                self.graph_spawn()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_edgeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_edge

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_edge"):
                listener.enterSpawn_edge(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_edge"):
                listener.exitSpawn_edge(self)

    def spawn_edge(self):

        localctx = jacParser.Spawn_edgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_spawn_edge)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.expression()
            self.state = 1059
            self.edge_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_spawn"):
                listener.enterNode_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_spawn"):
                listener.exitNode_spawn(self)

    def node_spawn(self):

        localctx = jacParser.Node_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_node_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
            if la_ == 1:
                self.state = 1061
                self.spawn_edge()

            self.state = 1064
            self.node_ref()
            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 120, self._ctx)
            if la_ == 1:
                self.state = 1065
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_spawn"):
                listener.enterGraph_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_spawn"):
                listener.exitGraph_spawn(self)

    def graph_spawn(self):

        localctx = jacParser.Graph_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_graph_spawn)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__2)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.T__6)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 71)) & ~0x3F) == 0
                and (
                    (1 << (_la - 71))
                    & (
                        (1 << (jacParser.NOT - 71))
                        | (1 << (jacParser.KW_GLOBAL - 71))
                        | (1 << (jacParser.PLUS - 71))
                        | (1 << (jacParser.MINUS - 71))
                        | (1 << (jacParser.STAR_MUL - 71))
                        | (1 << (jacParser.LPAREN - 71))
                        | (1 << (jacParser.LSQUARE - 71))
                        | (1 << (jacParser.FLOAT - 71))
                        | (1 << (jacParser.STRING - 71))
                        | (1 << (jacParser.BOOL - 71))
                        | (1 << (jacParser.INT - 71))
                        | (1 << (jacParser.NULL - 71))
                        | (1 << (jacParser.NAME - 71))
                    )
                )
                != 0
            ):
                self.state = 1068
                self.spawn_edge()

            self.state = 1071
            self.graph_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_spawn"):
                listener.enterWalker_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_spawn"):
                listener.exitWalker_spawn(self)

    def walker_spawn(self):

        localctx = jacParser.Walker_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_walker_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.expression()
            self.state = 1074
            self.walker_ref()
            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
            if la_ == 1:
                self.state = 1075
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Spawn_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Spawn_assignContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_ctx"):
                listener.enterSpawn_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_ctx"):
                listener.exitSpawn_ctx(self)

    def spawn_ctx(self):

        localctx = jacParser.Spawn_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_spawn_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(jacParser.LPAREN)
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1079
                self.spawn_assign()
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1080
                    self.match(jacParser.COMMA)
                    self.state = 1081
                    self.spawn_assign()
                    self.state = 1086
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1089
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def filter_compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Filter_compareContext)
            else:
                return self.getTypedRuleContext(jacParser.Filter_compareContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_filter_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_ctx"):
                listener.enterFilter_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_ctx"):
                listener.exitFilter_ctx(self)

    def filter_ctx(self):

        localctx = jacParser.Filter_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_filter_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(jacParser.LPAREN)
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1092
                self.filter_compare()
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1093
                    self.match(jacParser.COMMA)
                    self.state = 1094
                    self.filter_compare()
                    self.state = 1099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1102
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_assign"):
                listener.enterSpawn_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_assign"):
                listener.exitSpawn_assign(self)

    def spawn_assign(self):

        localctx = jacParser.Spawn_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_spawn_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(jacParser.NAME)
            self.state = 1105
            self.match(jacParser.EQ)
            self.state = 1106
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_compareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def cmp_op(self):
            return self.getTypedRuleContext(jacParser.Cmp_opContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_filter_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_compare"):
                listener.enterFilter_compare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_compare"):
                listener.exitFilter_compare(self)

    def filter_compare(self):

        localctx = jacParser.Filter_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_filter_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(jacParser.NAME)
            self.state = 1109
            self.cmp_op()
            self.state = 1110
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def TYP_INT(self):
            return self.getToken(jacParser.TYP_INT, 0)

        def TYP_FLOAT(self):
            return self.getToken(jacParser.TYP_FLOAT, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def TYP_BOOL(self):
            return self.getToken(jacParser.TYP_BOOL, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_any_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAny_type"):
                listener.enterAny_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAny_type"):
                listener.exitAny_type(self)

    def any_type(self):

        localctx = jacParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_any_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_graphContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_DIGRAPH(self):
            return self.getToken(jacParser.KW_DIGRAPH, 0)

        def KW_STRICT(self):
            return self.getToken(jacParser.KW_STRICT, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_graph

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_graph"):
                listener.enterDot_graph(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_graph"):
                listener.exitDot_graph(self)

    def dot_graph(self):

        localctx = jacParser.Dot_graphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dot_graph)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_STRICT:
                self.state = 1114
                self.match(jacParser.KW_STRICT)

            self.state = 1117
            _la = self._input.LA(1)
            if not (_la == jacParser.KW_GRAPH or _la == jacParser.KW_DIGRAPH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (jacParser.FLOAT - 95))
                        | (1 << (jacParser.STRING - 95))
                        | (1 << (jacParser.INT - 95))
                        | (1 << (jacParser.NAME - 95))
                    )
                )
                != 0
            ):
                self.state = 1118
                self.dot_id()

            self.state = 1121
            self.match(jacParser.LBRACE)
            self.state = 1122
            self.dot_stmt_list()
            self.state = 1123
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_stmt_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_stmtContext, i)

        def SEMI(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.SEMI)
            else:
                return self.getToken(jacParser.SEMI, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_stmt_list"):
                listener.enterDot_stmt_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_stmt_list"):
                listener.exitDot_stmt_list(self)

    def dot_stmt_list(self):

        localctx = jacParser.Dot_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dot_stmt_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_SUBGRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (jacParser.FLOAT - 95))
                        | (1 << (jacParser.STRING - 95))
                        | (1 << (jacParser.INT - 95))
                        | (1 << (jacParser.NAME - 95))
                    )
                )
                != 0
            ):
                self.state = 1125
                self.dot_stmt()
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.SEMI:
                    self.state = 1126
                    self.match(jacParser.SEMI)

                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_node_stmtContext, 0)

        def dot_edge_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_edge_stmtContext, 0)

        def dot_attr_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_stmtContext, 0)

        def dot_id(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext, i)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_stmt"):
                listener.enterDot_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_stmt"):
                listener.exitDot_stmt(self)

    def dot_stmt(self):

        localctx = jacParser.Dot_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_dot_stmt)
        try:
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1134
                self.dot_node_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.dot_edge_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1136
                self.dot_attr_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1137
                self.dot_id()
                self.state = 1138
                self.match(jacParser.EQ)
                self.state = 1139
                self.dot_id()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1141
                self.dot_subgraph()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_attr_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_attr_stmt"):
                listener.enterDot_attr_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_attr_stmt"):
                listener.exitDot_attr_stmt(self)

    def dot_attr_stmt(self):

        localctx = jacParser.Dot_attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dot_attr_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_GRAPH)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1145
            self.dot_attr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_attr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.LSQUARE)
            else:
                return self.getToken(jacParser.LSQUARE, i)

        def RSQUARE(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.RSQUARE)
            else:
                return self.getToken(jacParser.RSQUARE, i)

        def dot_a_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_a_listContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_a_listContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_attr_list"):
                listener.enterDot_attr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_attr_list"):
                listener.exitDot_attr_list(self)

    def dot_attr_list(self):

        localctx = jacParser.Dot_attr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_dot_attr_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1147
                self.match(jacParser.LSQUARE)
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_GRAPH)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (jacParser.FLOAT - 95))
                            | (1 << (jacParser.STRING - 95))
                            | (1 << (jacParser.INT - 95))
                            | (1 << (jacParser.NAME - 95))
                        )
                    )
                    != 0
                ):
                    self.state = 1148
                    self.dot_a_list()

                self.state = 1151
                self.match(jacParser.RSQUARE)
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == jacParser.LSQUARE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_a_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_a_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_a_list"):
                listener.enterDot_a_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_a_list"):
                listener.exitDot_a_list(self)

    def dot_a_list(self):

        localctx = jacParser.Dot_a_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_dot_a_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1156
                self.dot_id()
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.EQ:
                    self.state = 1157
                    self.match(jacParser.EQ)
                    self.state = 1158
                    self.dot_id()

                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 1161
                    self.match(jacParser.COMMA)

                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << jacParser.KW_GRAPH)
                                | (1 << jacParser.KW_NODE)
                                | (1 << jacParser.KW_EDGE)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 95)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 95))
                            & (
                                (1 << (jacParser.FLOAT - 95))
                                | (1 << (jacParser.STRING - 95))
                                | (1 << (jacParser.INT - 95))
                                | (1 << (jacParser.NAME - 95))
                            )
                        )
                        != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_edge_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeRHS(self):
            return self.getTypedRuleContext(jacParser.Dot_edgeRHSContext, 0)

        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext, 0)

        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext, 0)

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_edge_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_edge_stmt"):
                listener.enterDot_edge_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_edge_stmt"):
                listener.exitDot_edge_stmt(self)

    def dot_edge_stmt(self):

        localctx = jacParser.Dot_edge_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dot_edge_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                jacParser.KW_GRAPH,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
                jacParser.FLOAT,
                jacParser.STRING,
                jacParser.INT,
                jacParser.NAME,
            ]:
                self.state = 1168
                self.dot_node_id()
                pass
            elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                self.state = 1169
                self.dot_subgraph()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1172
            self.dot_edgeRHS()
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.LSQUARE:
                self.state = 1173
                self.dot_attr_list()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_edgeRHSContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeop(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_edgeopContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_edgeopContext, i)

        def dot_node_id(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_node_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_node_idContext, i)

        def dot_subgraph(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_subgraphContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_subgraphContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeRHS

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_edgeRHS"):
                listener.enterDot_edgeRHS(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_edgeRHS"):
                listener.exitDot_edgeRHS(self)

    def dot_edgeRHS(self):

        localctx = jacParser.Dot_edgeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_dot_edgeRHS)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1176
                self.dot_edgeop()
                self.state = 1179
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    jacParser.KW_GRAPH,
                    jacParser.KW_NODE,
                    jacParser.KW_EDGE,
                    jacParser.FLOAT,
                    jacParser.STRING,
                    jacParser.INT,
                    jacParser.NAME,
                ]:
                    self.state = 1177
                    self.dot_node_id()
                    pass
                elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                    self.state = 1178
                    self.dot_subgraph()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == jacParser.T__3 or _la == jacParser.T__7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_edgeopContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeop

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_edgeop"):
                listener.enterDot_edgeop(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_edgeop"):
                listener.exitDot_edgeop(self)

    def dot_edgeop(self):

        localctx = jacParser.Dot_edgeopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_dot_edgeop)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            _la = self._input.LA(1)
            if not (_la == jacParser.T__3 or _la == jacParser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_node_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext, 0)

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_node_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_node_stmt"):
                listener.enterDot_node_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_node_stmt"):
                listener.exitDot_node_stmt(self)

    def dot_node_stmt(self):

        localctx = jacParser.Dot_node_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_dot_node_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.dot_node_id()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.LSQUARE:
                self.state = 1188
                self.dot_attr_list()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_node_idContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext, 0)

        def dot_port(self):
            return self.getTypedRuleContext(jacParser.Dot_portContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_node_id

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_node_id"):
                listener.enterDot_node_id(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_node_id"):
                listener.exitDot_node_id(self)

    def dot_node_id(self):

        localctx = jacParser.Dot_node_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_dot_node_id)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.dot_id()
            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 1192
                self.dot_port()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_portContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def dot_id(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_port

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_port"):
                listener.enterDot_port(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_port"):
                listener.exitDot_port(self)

    def dot_port(self):

        localctx = jacParser.Dot_portContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_dot_port)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.match(jacParser.COLON)
            self.state = 1196
            self.dot_id()
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 1197
                self.match(jacParser.COLON)
                self.state = 1198
                self.dot_id()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_subgraphContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_SUBGRAPH(self):
            return self.getToken(jacParser.KW_SUBGRAPH, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_subgraph

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_subgraph"):
                listener.enterDot_subgraph(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_subgraph"):
                listener.exitDot_subgraph(self)

    def dot_subgraph(self):

        localctx = jacParser.Dot_subgraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_dot_subgraph)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_SUBGRAPH:
                self.state = 1201
                self.match(jacParser.KW_SUBGRAPH)
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_GRAPH)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (jacParser.FLOAT - 95))
                            | (1 << (jacParser.STRING - 95))
                            | (1 << (jacParser.INT - 95))
                            | (1 << (jacParser.NAME - 95))
                        )
                    )
                    != 0
                ):
                    self.state = 1202
                    self.dot_id()

            self.state = 1207
            self.match(jacParser.LBRACE)
            self.state = 1208
            self.dot_stmt_list()
            self.state = 1209
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_idContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_id

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_id"):
                listener.enterDot_id(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_id"):
                listener.exitDot_id(self)

    def dot_id(self):

        localctx = jacParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_dot_id)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_GRAPH)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (jacParser.FLOAT - 95))
                            | (1 << (jacParser.STRING - 95))
                            | (1 << (jacParser.INT - 95))
                            | (1 << (jacParser.NAME - 95))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[63] = self.atom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def atom_sempred(self, localctx: AtomContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 5)
