# Generated from jac.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3j")
        buf.write("\u048b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\3\2\5\2\u00da\n\2\3\2\7\2")
        buf.write("\u00dd\n\2\f\2\16\2\u00e0\13\2\3\2\7\2\u00e3\n\2\f\2\16")
        buf.write("\2\u00e6\13\2\3\2\3\2\3\3\3\3\3\3\3\3\5\3\u00ee\n\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\5\4\u00f9\n\4\3\5\3")
        buf.write("\5\3\5\5\5\u00fe\n\5\3\5\3\5\5\5\u0102\n\5\3\5\3\5\3\5")
        buf.write("\5\5\u0107\n\5\3\5\3\5\5\5\u010b\n\5\3\5\3\5\3\5\5\5\u0110")
        buf.write("\n\5\3\5\3\5\5\5\u0114\n\5\3\5\3\5\3\5\5\5\u0119\n\5\3")
        buf.write("\5\3\5\5\5\u011d\n\5\3\5\3\5\3\5\5\5\u0122\n\5\3\5\3\5")
        buf.write("\5\5\u0126\n\5\5\5\u0128\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\5\6\u0131\n\6\3\7\3\7\3\7\3\7\5\7\u0137\n\7\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0141\n\b\f\b\16\b\u0144")
        buf.write("\13\b\3\b\3\b\3\t\3\t\3\t\3\t\5\t\u014c\n\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\5\t\u0155\n\t\3\n\3\n\3\n\5\n\u015a")
        buf.write("\n\n\3\n\3\n\3\13\3\13\7\13\u0160\n\13\f\13\16\13\u0163")
        buf.write("\13\13\3\13\5\13\u0166\n\13\3\13\3\13\7\13\u016a\n\13")
        buf.write("\f\13\16\13\u016d\13\13\3\13\5\13\u0170\n\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u017a\n\f\3\f\3\f\3\f\5\f")
        buf.write("\u017f\n\f\3\f\3\f\5\f\u0183\n\f\3\f\3\f\5\f\u0187\n\f")
        buf.write("\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\3\20\3\21\3\21\7\21\u019a\n\21\f\21\16\21")
        buf.write("\u019d\13\21\3\21\3\21\3\21\3\21\5\21\u01a3\n\21\3\22")
        buf.write("\3\22\5\22\u01a7\n\22\3\23\7\23\u01aa\n\23\f\23\16\23")
        buf.write("\u01ad\13\23\3\24\3\24\5\24\u01b1\n\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u01c1\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u01cd\n\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\5\30\u01d6\n\30\3\30\5\30\u01d9\n\30\3\30\3")
        buf.write("\30\3\30\7\30\u01de\n\30\f\30\16\30\u01e1\13\30\3\30\3")
        buf.write("\30\3\31\3\31\3\31\3\31\5\31\u01e9\n\31\3\32\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u01f0\n\32\3\32\3\32\3\32\3\32\3\32\5")
        buf.write("\32\u01f7\n\32\7\32\u01f9\n\32\f\32\16\32\u01fc\13\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\5\32\u0203\n\32\3\32\5\32\u0206")
        buf.write("\n\32\3\33\3\33\5\33\u020a\n\33\3\33\3\33\3\34\3\34\5")
        buf.write("\34\u0210\n\34\3\34\3\34\3\34\5\34\u0215\n\34\3\35\3\35")
        buf.write("\3\35\3\35\3\36\3\36\3\36\7\36\u021e\n\36\f\36\16\36\u0221")
        buf.write("\13\36\3\37\3\37\3\37\7\37\u0226\n\37\f\37\16\37\u0229")
        buf.write("\13\37\3 \3 \7 \u022d\n \f \16 \u0230\13 \3 \3 \3 \5 ")
        buf.write("\u0235\n \3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u024c\n\"\3#")
        buf.write("\3#\3#\3#\7#\u0252\n#\f#\16#\u0255\13#\3#\5#\u0258\n#")
        buf.write("\3$\3$\3$\5$\u025d\n$\3%\3%\3%\3%\5%\u0263\n%\3%\3%\3")
        buf.write("%\3%\5%\u0269\n%\3%\5%\u026c\n%\3&\3&\3&\3&\3\'\3\'\3")
        buf.write("\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0283")
        buf.write("\n(\3)\3)\3)\3)\3*\3*\3+\3+\3+\3,\3,\3,\3,\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\5-\u029c\n-\3.\3.\3.\3.\5.\u02a2\n")
        buf.write(".\3/\3/\3/\3/\3\60\3\60\3\60\3\60\5\60\u02ac\n\60\3\61")
        buf.write("\3\61\3\61\3\61\5\61\u02b2\n\61\3\62\3\62\3\62\3\63\3")
        buf.write("\63\3\63\3\64\3\64\3\64\3\65\3\65\5\65\u02bf\n\65\3\65")
        buf.write("\3\65\3\65\5\65\u02c4\n\65\3\66\3\66\3\66\7\66\u02c9\n")
        buf.write("\66\f\66\16\66\u02cc\13\66\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\7\67\u02d4\n\67\f\67\16\67\u02d7\13\67\5\67\u02d9")
        buf.write("\n\67\38\38\38\38\38\38\38\38\58\u02e3\n8\39\39\39\3:")
        buf.write("\3:\3:\7:\u02eb\n:\f:\16:\u02ee\13:\3;\3;\3;\7;\u02f3")
        buf.write("\n;\f;\16;\u02f6\13;\3<\3<\3<\5<\u02fb\n<\3=\3=\3=\7=")
        buf.write("\u0300\n=\f=\16=\u0303\13=\3>\3>\3>\3>\3>\3>\3>\3>\3>")
        buf.write("\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0319\n>\3>\3>\3")
        buf.write(">\3>\5>\u031f\n>\3>\3>\6>\u0323\n>\r>\16>\u0324\7>\u0327")
        buf.write("\n>\f>\16>\u032a\13>\3?\3?\3?\3?\3?\3?\3?\5?\u0333\n?")
        buf.write("\3?\3?\3?\3?\5?\u0339\n?\5?\u033b\n?\3@\3@\3@\3A\3A\3")
        buf.write("A\3B\3B\3B\3B\3B\3B\5B\u0349\nB\3C\3C\3D\3D\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\5E\u0357\nE\3E\3E\3E\3E\3E\5E\u035e\nE\5")
        buf.write("E\u0360\nE\3F\3F\3F\3F\5F\u0366\nF\3F\3F\3F\3F\3F\5F\u036d")
        buf.write("\nF\5F\u036f\nF\3G\3G\3G\5G\u0374\nG\3G\3G\3G\3G\3G\5")
        buf.write("G\u037b\nG\3H\3H\5H\u037f\nH\3H\3H\3H\5H\u0384\nH\5H\u0386")
        buf.write("\nH\5H\u0388\nH\3I\3I\3I\3I\3J\3J\3J\3J\3K\3K\3K\3K\3")
        buf.write("L\3L\3L\5L\u0399\nL\3M\3M\3M\3M\3M\3M\5M\u03a1\nM\3M\5")
        buf.write("M\u03a4\nM\3M\5M\u03a7\nM\3N\3N\3N\3N\3N\3N\5N\u03af\n")
        buf.write("N\3N\5N\u03b2\nN\3N\5N\u03b5\nN\3O\3O\3O\3O\3O\3O\5O\u03bd")
        buf.write("\nO\3O\5O\u03c0\nO\3O\5O\u03c3\nO\3P\3P\5P\u03c7\nP\3")
        buf.write("P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u03d5\nQ\3R\3R\3")
        buf.write("R\3R\7R\u03db\nR\fR\16R\u03de\13R\5R\u03e0\nR\3R\3R\3")
        buf.write("S\3S\3S\3S\3T\3T\3T\3U\3U\3U\5U\u03ee\nU\3V\3V\3V\3W\5")
        buf.write("W\u03f4\nW\3W\3W\5W\u03f8\nW\3X\5X\u03fb\nX\3X\3X\3Y\3")
        buf.write("Y\3Y\5Y\u0402\nY\3Z\3Z\3Z\3Z\7Z\u0408\nZ\fZ\16Z\u040b")
        buf.write("\13Z\5Z\u040d\nZ\3Z\3Z\3[\3[\3[\3[\7[\u0415\n[\f[\16[")
        buf.write("\u0418\13[\5[\u041a\n[\3[\3[\3\\\3\\\3\\\3\\\3]\3]\3]")
        buf.write("\3]\3^\3^\3_\5_\u0429\n_\3_\3_\5_\u042d\n_\3_\3_\3_\3")
        buf.write("_\3`\3`\5`\u0435\n`\7`\u0437\n`\f`\16`\u043a\13`\3a\3")
        buf.write("a\3a\3a\3a\3a\3a\3a\5a\u0444\na\3b\3b\3b\3c\3c\5c\u044b")
        buf.write("\nc\3c\6c\u044e\nc\rc\16c\u044f\3d\3d\3d\5d\u0455\nd\3")
        buf.write("d\5d\u0458\nd\6d\u045a\nd\rd\16d\u045b\3e\3e\5e\u0460")
        buf.write("\ne\3e\3e\5e\u0464\ne\3f\3f\3f\5f\u0469\nf\6f\u046b\n")
        buf.write("f\rf\16f\u046c\3g\3g\3h\3h\5h\u0473\nh\3i\3i\5i\u0477")
        buf.write("\ni\3j\3j\3j\3j\5j\u047d\nj\3k\3k\5k\u0481\nk\5k\u0483")
        buf.write("\nk\3k\3k\3k\3k\3l\3l\3l\2\3zm\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\2\17\4\2\33\34\"\"\4\2@ACC\3\2\62\65\3\2")
        buf.write("\678\3\2VW\3\2XZ\3\2\37!\4\2\36\36ee\5\2\13\21\26\26,")
        buf.write(",\4\2\22\22\24\24\5\2\22\22\26\26,,\4\2\6\6\n\n\b\2\22")
        buf.write("\22\26\26,,`accee\2\u04e1\2\u00d9\3\2\2\2\4\u00e9\3\2")
        buf.write("\2\2\6\u00f4\3\2\2\2\b\u0127\3\2\2\2\n\u0130\3\2\2\2\f")
        buf.write("\u0136\3\2\2\2\16\u0138\3\2\2\2\20\u0154\3\2\2\2\22\u0156")
        buf.write("\3\2\2\2\24\u015d\3\2\2\2\26\u0173\3\2\2\2\30\u0188\3")
        buf.write("\2\2\2\32\u018b\3\2\2\2\34\u018f\3\2\2\2\36\u0193\3\2")
        buf.write("\2\2 \u01a2\3\2\2\2\"\u01a6\3\2\2\2$\u01ab\3\2\2\2&\u01b0")
        buf.write("\3\2\2\2(\u01c0\3\2\2\2*\u01cc\3\2\2\2,\u01ce\3\2\2\2")
        buf.write(".\u01d3\3\2\2\2\60\u01e8\3\2\2\2\62\u0205\3\2\2\2\64\u0207")
        buf.write("\3\2\2\2\66\u020d\3\2\2\28\u0216\3\2\2\2:\u021a\3\2\2")
        buf.write("\2<\u0222\3\2\2\2>\u0234\3\2\2\2@\u0236\3\2\2\2B\u024b")
        buf.write("\3\2\2\2D\u024d\3\2\2\2F\u0259\3\2\2\2H\u026b\3\2\2\2")
        buf.write("J\u026d\3\2\2\2L\u0271\3\2\2\2N\u0282\3\2\2\2P\u0284\3")
        buf.write("\2\2\2R\u0288\3\2\2\2T\u028a\3\2\2\2V\u028d\3\2\2\2X\u029b")
        buf.write("\3\2\2\2Z\u02a1\3\2\2\2\\\u02a3\3\2\2\2^\u02a7\3\2\2\2")
        buf.write("`\u02ad\3\2\2\2b\u02b3\3\2\2\2d\u02b6\3\2\2\2f\u02b9\3")
        buf.write("\2\2\2h\u02bc\3\2\2\2j\u02c5\3\2\2\2l\u02d8\3\2\2\2n\u02e2")
        buf.write("\3\2\2\2p\u02e4\3\2\2\2r\u02e7\3\2\2\2t\u02ef\3\2\2\2")
        buf.write("v\u02fa\3\2\2\2x\u02fc\3\2\2\2z\u031e\3\2\2\2|\u033a\3")
        buf.write("\2\2\2~\u033c\3\2\2\2\u0080\u033f\3\2\2\2\u0082\u0348")
        buf.write("\3\2\2\2\u0084\u034a\3\2\2\2\u0086\u034c\3\2\2\2\u0088")
        buf.write("\u035f\3\2\2\2\u008a\u036e\3\2\2\2\u008c\u0373\3\2\2\2")
        buf.write("\u008e\u0387\3\2\2\2\u0090\u0389\3\2\2\2\u0092\u038d\3")
        buf.write("\2\2\2\u0094\u0391\3\2\2\2\u0096\u0398\3\2\2\2\u0098\u03a6")
        buf.write("\3\2\2\2\u009a\u03b4\3\2\2\2\u009c\u03c2\3\2\2\2\u009e")
        buf.write("\u03c4\3\2\2\2\u00a0\u03d4\3\2\2\2\u00a2\u03d6\3\2\2\2")
        buf.write("\u00a4\u03e3\3\2\2\2\u00a6\u03e7\3\2\2\2\u00a8\u03ed\3")
        buf.write("\2\2\2\u00aa\u03ef\3\2\2\2\u00ac\u03f3\3\2\2\2\u00ae\u03fa")
        buf.write("\3\2\2\2\u00b0\u03fe\3\2\2\2\u00b2\u0403\3\2\2\2\u00b4")
        buf.write("\u0410\3\2\2\2\u00b6\u041d\3\2\2\2\u00b8\u0421\3\2\2\2")
        buf.write("\u00ba\u0425\3\2\2\2\u00bc\u0428\3\2\2\2\u00be\u0438\3")
        buf.write("\2\2\2\u00c0\u0443\3\2\2\2\u00c2\u0445\3\2\2\2\u00c4\u044d")
        buf.write("\3\2\2\2\u00c6\u0459\3\2\2\2\u00c8\u045f\3\2\2\2\u00ca")
        buf.write("\u046a\3\2\2\2\u00cc\u046e\3\2\2\2\u00ce\u0470\3\2\2\2")
        buf.write("\u00d0\u0474\3\2\2\2\u00d2\u0478\3\2\2\2\u00d4\u0482\3")
        buf.write("\2\2\2\u00d6\u0488\3\2\2\2\u00d8\u00da\5\6\4\2\u00d9\u00d8")
        buf.write("\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00de\3\2\2\2\u00db")
        buf.write("\u00dd\5\4\3\2\u00dc\u00db\3\2\2\2\u00dd\u00e0\3\2\2\2")
        buf.write("\u00de\u00dc\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e4\3")
        buf.write("\2\2\2\u00e0\u00de\3\2\2\2\u00e1\u00e3\5\f\7\2\u00e2\u00e1")
        buf.write("\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\u00e7\3\2\2\2\u00e6\u00e4\3\2\2\2")
        buf.write("\u00e7\u00e8\7\2\2\3\u00e8\3\3\2\2\2\u00e9\u00ea\7#\2")
        buf.write("\2\u00ea\u00ed\7*\2\2\u00eb\u00ee\5\b\5\2\u00ec\u00ee")
        buf.write("\7X\2\2\u00ed\u00eb\3\2\2\2\u00ed\u00ec\3\2\2\2\u00ee")
        buf.write("\u00ef\3\2\2\2\u00ef\u00f0\7+\2\2\u00f0\u00f1\7\32\2\2")
        buf.write("\u00f1\u00f2\7a\2\2\u00f2\u00f3\7\60\2\2\u00f3\5\3\2\2")
        buf.write("\2\u00f4\u00f5\7\3\2\2\u00f5\u00f6\7$\2\2\u00f6\u00f8")
        buf.write("\7a\2\2\u00f7\u00f9\7\60\2\2\u00f8\u00f7\3\2\2\2\u00f8")
        buf.write("\u00f9\3\2\2\2\u00f9\7\3\2\2\2\u00fa\u00fd\7-\2\2\u00fb")
        buf.write("\u00fe\7X\2\2\u00fc\u00fe\5\n\6\2\u00fd\u00fb\3\2\2\2")
        buf.write("\u00fd\u00fc\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff\u0100\7")
        buf.write("T\2\2\u0100\u0102\5\b\5\2\u0101\u00ff\3\2\2\2\u0101\u0102")
        buf.write("\3\2\2\2\u0102\u0128\3\2\2\2\u0103\u0106\7\26\2\2\u0104")
        buf.write("\u0107\7X\2\2\u0105\u0107\5\n\6\2\u0106\u0104\3\2\2\2")
        buf.write("\u0106\u0105\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0109\7")
        buf.write("T\2\2\u0109\u010b\5\b\5\2\u010a\u0108\3\2\2\2\u010a\u010b")
        buf.write("\3\2\2\2\u010b\u0128\3\2\2\2\u010c\u010f\7,\2\2\u010d")
        buf.write("\u0110\7X\2\2\u010e\u0110\5\n\6\2\u010f\u010d\3\2\2\2")
        buf.write("\u010f\u010e\3\2\2\2\u0110\u0113\3\2\2\2\u0111\u0112\7")
        buf.write("T\2\2\u0112\u0114\5\b\5\2\u0113\u0111\3\2\2\2\u0113\u0114")
        buf.write("\3\2\2\2\u0114\u0128\3\2\2\2\u0115\u0118\7\22\2\2\u0116")
        buf.write("\u0119\7X\2\2\u0117\u0119\5\n\6\2\u0118\u0116\3\2\2\2")
        buf.write("\u0118\u0117\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u011b\7")
        buf.write("T\2\2\u011b\u011d\5\b\5\2\u011c\u011a\3\2\2\2\u011c\u011d")
        buf.write("\3\2\2\2\u011d\u0128\3\2\2\2\u011e\u0121\7R\2\2\u011f")
        buf.write("\u0122\7X\2\2\u0120\u0122\5\n\6\2\u0121\u011f\3\2\2\2")
        buf.write("\u0121\u0120\3\2\2\2\u0122\u0125\3\2\2\2\u0123\u0124\7")
        buf.write("T\2\2\u0124\u0126\5\b\5\2\u0125\u0123\3\2\2\2\u0125\u0126")
        buf.write("\3\2\2\2\u0126\u0128\3\2\2\2\u0127\u00fa\3\2\2\2\u0127")
        buf.write("\u0103\3\2\2\2\u0127\u010c\3\2\2\2\u0127\u0115\3\2\2\2")
        buf.write("\u0127\u011e\3\2\2\2\u0128\t\3\2\2\2\u0129\u012a\7%\2")
        buf.write("\2\u012a\u0131\7e\2\2\u012b\u012c\7%\2\2\u012c\u012d\7")
        buf.write("*\2\2\u012d\u012e\5:\36\2\u012e\u012f\7+\2\2\u012f\u0131")
        buf.write("\3\2\2\2\u0130\u0129\3\2\2\2\u0130\u012b\3\2\2\2\u0131")
        buf.write("\13\3\2\2\2\u0132\u0137\5\16\b\2\u0133\u0137\5\20\t\2")
        buf.write("\u0134\u0137\5\22\n\2\u0135\u0137\5\26\f\2\u0136\u0132")
        buf.write("\3\2\2\2\u0136\u0133\3\2\2\2\u0136\u0134\3\2\2\2\u0136")
        buf.write("\u0135\3\2\2\2\u0137\r\3\2\2\2\u0138\u0139\7R\2\2\u0139")
        buf.write("\u013a\7e\2\2\u013a\u013b\7\61\2\2\u013b\u0142\5`\61\2")
        buf.write("\u013c\u013d\7T\2\2\u013d\u013e\7e\2\2\u013e\u013f\7\61")
        buf.write("\2\2\u013f\u0141\5`\61\2\u0140\u013c\3\2\2\2\u0141\u0144")
        buf.write("\3\2\2\2\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2\u0143")
        buf.write("\u0145\3\2\2\2\u0144\u0142\3\2\2\2\u0145\u0146\7\60\2")
        buf.write("\2\u0146\17\3\2\2\2\u0147\u0148\7\26\2\2\u0148\u014b\7")
        buf.write("e\2\2\u0149\u014a\7$\2\2\u014a\u014c\7c\2\2\u014b\u0149")
        buf.write("\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\3\2\2\2\u014d")
        buf.write("\u0155\5 \21\2\u014e\u014f\7,\2\2\u014f\u0150\7e\2\2\u0150")
        buf.write("\u0155\5 \21\2\u0151\u0152\7\22\2\2\u0152\u0153\7e\2\2")
        buf.write("\u0153\u0155\5&\24\2\u0154\u0147\3\2\2\2\u0154\u014e\3")
        buf.write("\2\2\2\u0154\u0151\3\2\2\2\u0155\21\3\2\2\2\u0156\u0157")
        buf.write("\7-\2\2\u0157\u0159\7e\2\2\u0158\u015a\5\30\r\2\u0159")
        buf.write("\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\3\2\2\2")
        buf.write("\u015b\u015c\5\24\13\2\u015c\23\3\2\2\2\u015d\u0161\7")
        buf.write("*\2\2\u015e\u0160\5\"\22\2\u015f\u015e\3\2\2\2\u0160\u0163")
        buf.write("\3\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162")
        buf.write("\u0165\3\2\2\2\u0163\u0161\3\2\2\2\u0164\u0166\5\32\16")
        buf.write("\2\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u016b")
        buf.write("\3\2\2\2\u0167\u016a\5B\"\2\u0168\u016a\5\36\20\2\u0169")
        buf.write("\u0167\3\2\2\2\u0169\u0168\3\2\2\2\u016a\u016d\3\2\2\2")
        buf.write("\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016f\3")
        buf.write("\2\2\2\u016d\u016b\3\2\2\2\u016e\u0170\5\34\17\2\u016f")
        buf.write("\u016e\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0171\3\2\2\2")
        buf.write("\u0171\u0172\7+\2\2\u0172\25\3\2\2\2\u0173\u0174\7.\2")
        buf.write("\2\u0174\u0175\7a\2\2\u0175\u0179\7\32\2\2\u0176\u017a")
        buf.write("\5\u0094K\2\u0177\u0178\7\22\2\2\u0178\u017a\5&\24\2\u0179")
        buf.write("\u0176\3\2\2\2\u0179\u0177\3\2\2\2\u017a\u017b\3\2\2\2")
        buf.write("\u017b\u0186\7>\2\2\u017c\u017e\5\u0092J\2\u017d\u017f")
        buf.write("\5\u00b2Z\2\u017e\u017d\3\2\2\2\u017e\u017f\3\2\2\2\u017f")
        buf.write("\u0182\3\2\2\2\u0180\u0183\5> \2\u0181\u0183\7\60\2\2")
        buf.write("\u0182\u0180\3\2\2\2\u0182\u0181\3\2\2\2\u0183\u0187\3")
        buf.write("\2\2\2\u0184\u0185\7-\2\2\u0185\u0187\5\24\13\2\u0186")
        buf.write("\u017c\3\2\2\2\u0186\u0184\3\2\2\2\u0187\27\3\2\2\2\u0188")
        buf.write("\u0189\7$\2\2\u0189\u018a\5:\36\2\u018a\31\3\2\2\2\u018b")
        buf.write("\u018c\7\32\2\2\u018c\u018d\7\33\2\2\u018d\u018e\5> \2")
        buf.write("\u018e\33\3\2\2\2\u018f\u0190\7\32\2\2\u0190\u0191\7\34")
        buf.write("\2\2\u0191\u0192\5> \2\u0192\35\3\2\2\2\u0193\u0194\7")
        buf.write("\32\2\2\u0194\u0195\7\"\2\2\u0195\u0196\5> \2\u0196\37")
        buf.write("\3\2\2\2\u0197\u019b\7*\2\2\u0198\u019a\5\"\22\2\u0199")
        buf.write("\u0198\3\2\2\2\u019a\u019d\3\2\2\2\u019b\u0199\3\2\2\2")
        buf.write("\u019b\u019c\3\2\2\2\u019c\u019e\3\2\2\2\u019d\u019b\3")
        buf.write("\2\2\2\u019e\u01a3\7+\2\2\u019f\u01a0\7$\2\2\u01a0\u01a3")
        buf.write("\5\"\22\2\u01a1\u01a3\7\60\2\2\u01a2\u0197\3\2\2\2\u01a2")
        buf.write("\u019f\3\2\2\2\u01a2\u01a1\3\2\2\2\u01a3!\3\2\2\2\u01a4")
        buf.write("\u01a7\5.\30\2\u01a5\u01a7\5\62\32\2\u01a6\u01a4\3\2\2")
        buf.write("\2\u01a6\u01a5\3\2\2\2\u01a7#\3\2\2\2\u01a8\u01aa\5\62")
        buf.write("\32\2\u01a9\u01a8\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01a9")
        buf.write("\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac%\3\2\2\2\u01ad\u01ab")
        buf.write("\3\2\2\2\u01ae\u01b1\5(\25\2\u01af\u01b1\5*\26\2\u01b0")
        buf.write("\u01ae\3\2\2\2\u01b0\u01af\3\2\2\2\u01b1\'\3\2\2\2\u01b2")
        buf.write("\u01b3\7*\2\2\u01b3\u01b4\5,\27\2\u01b4\u01b5\5$\23\2")
        buf.write("\u01b5\u01b6\7\31\2\2\u01b6\u01b7\5> \2\u01b7\u01b8\7")
        buf.write("+\2\2\u01b8\u01c1\3\2\2\2\u01b9\u01ba\7$\2\2\u01ba\u01bb")
        buf.write("\5,\27\2\u01bb\u01bc\5$\23\2\u01bc\u01bd\7\31\2\2\u01bd")
        buf.write("\u01be\5> \2\u01be\u01bf\7\60\2\2\u01bf\u01c1\3\2\2\2")
        buf.write("\u01c0\u01b2\3\2\2\2\u01c0\u01b9\3\2\2\2\u01c1)\3\2\2")
        buf.write("\2\u01c2\u01c3\7*\2\2\u01c3\u01c4\5,\27\2\u01c4\u01c5")
        buf.write("\5\u00bc_\2\u01c5\u01c6\7+\2\2\u01c6\u01cd\3\2\2\2\u01c7")
        buf.write("\u01c8\7$\2\2\u01c8\u01c9\5,\27\2\u01c9\u01ca\5\u00bc")
        buf.write("_\2\u01ca\u01cb\7\60\2\2\u01cb\u01cd\3\2\2\2\u01cc\u01c2")
        buf.write("\3\2\2\2\u01cc\u01c7\3\2\2\2\u01cd+\3\2\2\2\u01ce\u01cf")
        buf.write("\7Q\2\2\u01cf\u01d0\7P\2\2\u01d0\u01d1\7e\2\2\u01d1\u01d2")
        buf.write("\7\60\2\2\u01d2-\3\2\2\2\u01d3\u01d5\7Q\2\2\u01d4\u01d6")
        buf.write("\7S\2\2\u01d5\u01d4\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6")
        buf.write("\u01d8\3\2\2\2\u01d7\u01d9\7P\2\2\u01d8\u01d7\3\2\2\2")
        buf.write("\u01d8\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01df\5")
        buf.write("\60\31\2\u01db\u01dc\7T\2\2\u01dc\u01de\5\60\31\2\u01dd")
        buf.write("\u01db\3\2\2\2\u01de\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2")
        buf.write("\u01df\u01e0\3\2\2\2\u01e0\u01e2\3\2\2\2\u01e1\u01df\3")
        buf.write("\2\2\2\u01e2\u01e3\7\60\2\2\u01e3/\3\2\2\2\u01e4\u01e9")
        buf.write("\7e\2\2\u01e5\u01e6\7e\2\2\u01e6\u01e7\7\61\2\2\u01e7")
        buf.write("\u01e9\5`\61\2\u01e8\u01e4\3\2\2\2\u01e8\u01e5\3\2\2\2")
        buf.write("\u01e9\61\3\2\2\2\u01ea\u01eb\7U\2\2\u01eb\u01ef\58\35")
        buf.write("\2\u01ec\u01ed\5\66\34\2\u01ed\u01ee\5\64\33\2\u01ee\u01f0")
        buf.write("\3\2\2\2\u01ef\u01ec\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0")
        buf.write("\u01fa\3\2\2\2\u01f1\u01f2\7T\2\2\u01f2\u01f6\58\35\2")
        buf.write("\u01f3\u01f4\5\66\34\2\u01f4\u01f5\5\64\33\2\u01f5\u01f7")
        buf.write("\3\2\2\2\u01f6\u01f3\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7")
        buf.write("\u01f9\3\2\2\2\u01f8\u01f1\3\2\2\2\u01f9\u01fc\3\2\2\2")
        buf.write("\u01fa\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\3")
        buf.write("\2\2\2\u01fc\u01fa\3\2\2\2\u01fd\u01fe\7\60\2\2\u01fe")
        buf.write("\u0206\3\2\2\2\u01ff\u0200\7U\2\2\u0200\u0202\7e\2\2\u0201")
        buf.write("\u0203\5\64\33\2\u0202\u0201\3\2\2\2\u0202\u0203\3\2\2")
        buf.write("\2\u0203\u0204\3\2\2\2\u0204\u0206\5> \2\u0205\u01ea\3")
        buf.write("\2\2\2\u0205\u01ff\3\2\2\2\u0206\63\3\2\2\2\u0207\u0209")
        buf.write("\7\32\2\2\u0208\u020a\5:\36\2\u0209\u0208\3\2\2\2\u0209")
        buf.write("\u020a\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c\t\2\2\2")
        buf.write("\u020c\65\3\2\2\2\u020d\u020f\7%\2\2\u020e\u0210\5<\37")
        buf.write("\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0214")
        buf.write("\3\2\2\2\u0211\u0215\7%\2\2\u0212\u0213\7)\2\2\u0213\u0215")
        buf.write("\5`\61\2\u0214\u0211\3\2\2\2\u0214\u0212\3\2\2\2\u0215")
        buf.write("\67\3\2\2\2\u0216\u0217\7e\2\2\u0217\u0218\7G\2\2\u0218")
        buf.write("\u0219\7e\2\2\u02199\3\2\2\2\u021a\u021f\7e\2\2\u021b")
        buf.write("\u021c\7T\2\2\u021c\u021e\7e\2\2\u021d\u021b\3\2\2\2\u021e")
        buf.write("\u0221\3\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2")
        buf.write("\u0220;\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0227\5`\61")
        buf.write("\2\u0223\u0224\7T\2\2\u0224\u0226\5`\61\2\u0225\u0223")
        buf.write("\3\2\2\2\u0226\u0229\3\2\2\2\u0227\u0225\3\2\2\2\u0227")
        buf.write("\u0228\3\2\2\2\u0228=\3\2\2\2\u0229\u0227\3\2\2\2\u022a")
        buf.write("\u022e\7*\2\2\u022b\u022d\5B\"\2\u022c\u022b\3\2\2\2\u022d")
        buf.write("\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2")
        buf.write("\u022f\u0231\3\2\2\2\u0230\u022e\3\2\2\2\u0231\u0235\7")
        buf.write("+\2\2\u0232\u0233\7$\2\2\u0233\u0235\5B\"\2\u0234\u022a")
        buf.write("\3\2\2\2\u0234\u0232\3\2\2\2\u0235?\3\2\2\2\u0236\u0237")
        buf.write("\5:\36\2\u0237\u0238\5> \2\u0238A\3\2\2\2\u0239\u024c")
        buf.write("\5> \2\u023a\u024c\5@!\2\u023b\u023c\5`\61\2\u023c\u023d")
        buf.write("\7\60\2\2\u023d\u024c\3\2\2\2\u023e\u024c\5D#\2\u023f")
        buf.write("\u024c\5F$\2\u0240\u024c\5N(\2\u0241\u024c\5P)\2\u0242")
        buf.write("\u0243\5T+\2\u0243\u0244\7\60\2\2\u0244\u024c\3\2\2\2")
        buf.write("\u0245\u0246\5R*\2\u0246\u0247\7\60\2\2\u0247\u024c\3")
        buf.write("\2\2\2\u0248\u024c\5V,\2\u0249\u024c\5X-\2\u024a\u024c")
        buf.write("\5Z.\2\u024b\u0239\3\2\2\2\u024b\u023a\3\2\2\2\u024b\u023b")
        buf.write("\3\2\2\2\u024b\u023e\3\2\2\2\u024b\u023f\3\2\2\2\u024b")
        buf.write("\u0240\3\2\2\2\u024b\u0241\3\2\2\2\u024b\u0242\3\2\2\2")
        buf.write("\u024b\u0245\3\2\2\2\u024b\u0248\3\2\2\2\u024b\u0249\3")
        buf.write("\2\2\2\u024b\u024a\3\2\2\2\u024cC\3\2\2\2\u024d\u024e")
        buf.write("\79\2\2\u024e\u024f\5`\61\2\u024f\u0253\5> \2\u0250\u0252")
        buf.write("\5J&\2\u0251\u0250\3\2\2\2\u0252\u0255\3\2\2\2\u0253\u0251")
        buf.write("\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0257\3\2\2\2\u0255")
        buf.write("\u0253\3\2\2\2\u0256\u0258\5L\'\2\u0257\u0256\3\2\2\2")
        buf.write("\u0257\u0258\3\2\2\2\u0258E\3\2\2\2\u0259\u025a\7F\2\2")
        buf.write("\u025a\u025c\5> \2\u025b\u025d\5H%\2\u025c\u025b\3\2\2")
        buf.write("\2\u025c\u025d\3\2\2\2\u025dG\3\2\2\2\u025e\u0262\7;\2")
        buf.write("\2\u025f\u0260\7\\\2\2\u0260\u0261\7e\2\2\u0261\u0263")
        buf.write("\7]\2\2\u0262\u025f\3\2\2\2\u0262\u0263\3\2\2\2\u0263")
        buf.write("\u0264\3\2\2\2\u0264\u026c\5> \2\u0265\u0268\7;\2\2\u0266")
        buf.write("\u0267\7\32\2\2\u0267\u0269\7e\2\2\u0268\u0266\3\2\2\2")
        buf.write("\u0268\u0269\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026c\5")
        buf.write("> \2\u026b\u025e\3\2\2\2\u026b\u0265\3\2\2\2\u026cI\3")
        buf.write("\2\2\2\u026d\u026e\7:\2\2\u026e\u026f\5`\61\2\u026f\u0270")
        buf.write("\5> \2\u0270K\3\2\2\2\u0271\u0272\7;\2\2\u0272\u0273\5")
        buf.write("> \2\u0273M\3\2\2\2\u0274\u0275\7<\2\2\u0275\u0276\5`")
        buf.write("\61\2\u0276\u0277\7=\2\2\u0277\u0278\5`\61\2\u0278\u0279")
        buf.write("\7>\2\2\u0279\u027a\5`\61\2\u027a\u027b\5> \2\u027b\u0283")
        buf.write("\3\2\2\2\u027c\u027d\7<\2\2\u027d\u027e\7e\2\2\u027e\u027f")
        buf.write("\7O\2\2\u027f\u0280\5`\61\2\u0280\u0281\5> \2\u0281\u0283")
        buf.write("\3\2\2\2\u0282\u0274\3\2\2\2\u0282\u027c\3\2\2\2\u0283")
        buf.write("O\3\2\2\2\u0284\u0285\7?\2\2\u0285\u0286\5`\61\2\u0286")
        buf.write("\u0287\5> \2\u0287Q\3\2\2\2\u0288\u0289\t\3\2\2\u0289")
        buf.write("S\3\2\2\2\u028a\u028b\7/\2\2\u028b\u028c\5`\61\2\u028c")
        buf.write("U\3\2\2\2\u028d\u028e\7E\2\2\u028e\u028f\5`\61\2\u028f")
        buf.write("\u0290\7\60\2\2\u0290W\3\2\2\2\u0291\u0292\7D\2\2\u0292")
        buf.write("\u0293\5`\61\2\u0293\u0294\7\60\2\2\u0294\u029c\3\2\2")
        buf.write("\2\u0295\u0296\7D\2\2\u0296\u0297\7G\2\2\u0297\u0298\7")
        buf.write("e\2\2\u0298\u0299\7\61\2\2\u0299\u029a\7c\2\2\u029a\u029c")
        buf.write("\7\60\2\2\u029b\u0291\3\2\2\2\u029b\u0295\3\2\2\2\u029c")
        buf.write("Y\3\2\2\2\u029d\u02a2\5\\/\2\u029e\u02a2\5^\60\2\u029f")
        buf.write("\u02a0\7B\2\2\u02a0\u02a2\7\60\2\2\u02a1\u029d\3\2\2\2")
        buf.write("\u02a1\u029e\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2[\3\2\2")
        buf.write("\2\u02a3\u02a4\7\27\2\2\u02a4\u02a5\5`\61\2\u02a5\u02a6")
        buf.write("\7\60\2\2\u02a6]\3\2\2\2\u02a7\u02a8\7\30\2\2\u02a8\u02ab")
        buf.write("\5`\61\2\u02a9\u02ac\7\60\2\2\u02aa\u02ac\5L\'\2\u02ab")
        buf.write("\u02a9\3\2\2\2\u02ab\u02aa\3\2\2\2\u02ac_\3\2\2\2\u02ad")
        buf.write("\u02b1\5h\65\2\u02ae\u02b2\5b\62\2\u02af\u02b2\5d\63\2")
        buf.write("\u02b0\u02b2\5f\64\2\u02b1\u02ae\3\2\2\2\u02b1\u02af\3")
        buf.write("\2\2\2\u02b1\u02b0\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2a")
        buf.write("\3\2\2\2\u02b3\u02b4\7\61\2\2\u02b4\u02b5\5`\61\2\u02b5")
        buf.write("c\3\2\2\2\u02b6\u02b7\7\66\2\2\u02b7\u02b8\5`\61\2\u02b8")
        buf.write("e\3\2\2\2\u02b9\u02ba\t\4\2\2\u02ba\u02bb\5`\61\2\u02bb")
        buf.write("g\3\2\2\2\u02bc\u02c3\5j\66\2\u02bd\u02bf\7H\2\2\u02be")
        buf.write("\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c0\3\2\2\2")
        buf.write("\u02c0\u02c1\5\u0096L\2\u02c1\u02c2\5`\61\2\u02c2\u02c4")
        buf.write("\3\2\2\2\u02c3\u02be\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4")
        buf.write("i\3\2\2\2\u02c5\u02ca\5l\67\2\u02c6\u02c7\t\5\2\2\u02c7")
        buf.write("\u02c9\5l\67\2\u02c8\u02c6\3\2\2\2\u02c9\u02cc\3\2\2\2")
        buf.write("\u02ca\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cbk\3\2\2")
        buf.write("\2\u02cc\u02ca\3\2\2\2\u02cd\u02ce\7H\2\2\u02ce\u02d9")
        buf.write("\5l\67\2\u02cf\u02d5\5r:\2\u02d0\u02d1\5n8\2\u02d1\u02d2")
        buf.write("\5r:\2\u02d2\u02d4\3\2\2\2\u02d3\u02d0\3\2\2\2\u02d4\u02d7")
        buf.write("\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6")
        buf.write("\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d8\u02cd\3\2\2\2")
        buf.write("\u02d8\u02cf\3\2\2\2\u02d9m\3\2\2\2\u02da\u02e3\7I\2\2")
        buf.write("\u02db\u02e3\7J\2\2\u02dc\u02e3\7K\2\2\u02dd\u02e3\7L")
        buf.write("\2\2\u02de\u02e3\7M\2\2\u02df\u02e3\7N\2\2\u02e0\u02e3")
        buf.write("\7O\2\2\u02e1\u02e3\5p9\2\u02e2\u02da\3\2\2\2\u02e2\u02db")
        buf.write("\3\2\2\2\u02e2\u02dc\3\2\2\2\u02e2\u02dd\3\2\2\2\u02e2")
        buf.write("\u02de\3\2\2\2\u02e2\u02df\3\2\2\2\u02e2\u02e0\3\2\2\2")
        buf.write("\u02e2\u02e1\3\2\2\2\u02e3o\3\2\2\2\u02e4\u02e5\7H\2\2")
        buf.write("\u02e5\u02e6\7O\2\2\u02e6q\3\2\2\2\u02e7\u02ec\5t;\2\u02e8")
        buf.write("\u02e9\t\6\2\2\u02e9\u02eb\5t;\2\u02ea\u02e8\3\2\2\2\u02eb")
        buf.write("\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2")
        buf.write("\u02eds\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ef\u02f4\5v<\2")
        buf.write("\u02f0\u02f1\t\7\2\2\u02f1\u02f3\5v<\2\u02f2\u02f0\3\2")
        buf.write("\2\2\u02f3\u02f6\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5u\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f7\u02f8")
        buf.write("\t\6\2\2\u02f8\u02fb\5v<\2\u02f9\u02fb\5x=\2\u02fa\u02f7")
        buf.write("\3\2\2\2\u02fa\u02f9\3\2\2\2\u02fbw\3\2\2\2\u02fc\u0301")
        buf.write("\5z>\2\u02fd\u02fe\7[\2\2\u02fe\u0300\5v<\2\u02ff\u02fd")
        buf.write("\3\2\2\2\u0300\u0303\3\2\2\2\u0301\u02ff\3\2\2\2\u0301")
        buf.write("\u0302\3\2\2\2\u0302y\3\2\2\2\u0303\u0301\3\2\2\2\u0304")
        buf.write("\u0305\b>\1\2\u0305\u031f\7c\2\2\u0306\u031f\7`\2\2\u0307")
        buf.write("\u031f\7a\2\2\u0308\u031f\7b\2\2\u0309\u031f\7d\2\2\u030a")
        buf.write("\u031f\7e\2\2\u030b\u030c\7R\2\2\u030c\u030d\7G\2\2\u030d")
        buf.write("\u031f\7e\2\2\u030e\u031f\5\u008eH\2\u030f\u031f\5\u009e")
        buf.write("P\2\u0310\u031f\5\u00a2R\2\u0311\u0312\7\\\2\2\u0312\u0313")
        buf.write("\5`\61\2\u0313\u0314\7]\2\2\u0314\u031f\3\2\2\2\u0315")
        buf.write("\u0316\7%\2\2\u0316\u0318\7e\2\2\u0317\u0319\5\u00b2Z")
        buf.write("\2\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031f")
        buf.write("\3\2\2\2\u031a\u031f\5\u00a6T\2\u031b\u031f\5~@\2\u031c")
        buf.write("\u031f\5\u0080A\2\u031d\u031f\5\u00ba^\2\u031e\u0304\3")
        buf.write("\2\2\2\u031e\u0306\3\2\2\2\u031e\u0307\3\2\2\2\u031e\u0308")
        buf.write("\3\2\2\2\u031e\u0309\3\2\2\2\u031e\u030a\3\2\2\2\u031e")
        buf.write("\u030b\3\2\2\2\u031e\u030e\3\2\2\2\u031e\u030f\3\2\2\2")
        buf.write("\u031e\u0310\3\2\2\2\u031e\u0311\3\2\2\2\u031e\u0315\3")
        buf.write("\2\2\2\u031e\u031a\3\2\2\2\u031e\u031b\3\2\2\2\u031e\u031c")
        buf.write("\3\2\2\2\u031e\u031d\3\2\2\2\u031f\u0328\3\2\2\2\u0320")
        buf.write("\u0322\f\7\2\2\u0321\u0323\5|?\2\u0322\u0321\3\2\2\2\u0323")
        buf.write("\u0324\3\2\2\2\u0324\u0322\3\2\2\2\u0324\u0325\3\2\2\2")
        buf.write("\u0325\u0327\3\2\2\2\u0326\u0320\3\2\2\2\u0327\u032a\3")
        buf.write("\2\2\2\u0328\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329{")
        buf.write("\3\2\2\2\u032a\u0328\3\2\2\2\u032b\u032c\7G\2\2\u032c")
        buf.write("\u033b\5\u0082B\2\u032d\u032e\7G\2\2\u032e\u033b\7e\2")
        buf.write("\2\u032f\u033b\5\u00a0Q\2\u0330\u0332\7\\\2\2\u0331\u0333")
        buf.write("\5<\37\2\u0332\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333")
        buf.write("\u0334\3\2\2\2\u0334\u033b\7]\2\2\u0335\u0336\7%\2\2\u0336")
        buf.write("\u0338\7e\2\2\u0337\u0339\5\u00b2Z\2\u0338\u0337\3\2\2")
        buf.write("\2\u0338\u0339\3\2\2\2\u0339\u033b\3\2\2\2\u033a\u032b")
        buf.write("\3\2\2\2\u033a\u032d\3\2\2\2\u033a\u032f\3\2\2\2\u033a")
        buf.write("\u0330\3\2\2\2\u033a\u0335\3\2\2\2\u033b}\3\2\2\2\u033c")
        buf.write("\u033d\7\4\2\2\u033d\u033e\5`\61\2\u033e\177\3\2\2\2\u033f")
        buf.write("\u0340\7X\2\2\u0340\u0341\5`\61\2\u0341\u0081\3\2\2\2")
        buf.write("\u0342\u0349\3\2\2\2\u0343\u0349\5\u008cG\2\u0344\u0349")
        buf.write("\5\u0088E\2\u0345\u0349\5\u008aF\2\u0346\u0349\5\u0086")
        buf.write("D\2\u0347\u0349\5\u0084C\2\u0348\u0342\3\2\2\2\u0348\u0343")
        buf.write("\3\2\2\2\u0348\u0344\3\2\2\2\u0348\u0345\3\2\2\2\u0348")
        buf.write("\u0346\3\2\2\2\u0348\u0347\3\2\2\2\u0349\u0083\3\2\2\2")
        buf.write("\u034a\u034b\5\u00ba^\2\u034b\u0085\3\2\2\2\u034c\u034d")
        buf.write("\t\b\2\2\u034d\u0087\3\2\2\2\u034e\u0360\7\36\2\2\u034f")
        buf.write("\u0350\7*\2\2\u0350\u0351\5:\36\2\u0351\u0352\7+\2\2\u0352")
        buf.write("\u0360\3\2\2\2\u0353\u0354\7\17\2\2\u0354\u0357\7%\2\2")
        buf.write("\u0355\u0357\7(\2\2\u0356\u0353\3\2\2\2\u0356\u0355\3")
        buf.write("\2\2\2\u0357\u0358\3\2\2\2\u0358\u035d\t\t\2\2\u0359\u035a")
        buf.write("\7\\\2\2\u035a\u035b\5<\37\2\u035b\u035c\7]\2\2\u035c")
        buf.write("\u035e\3\2\2\2\u035d\u0359\3\2\2\2\u035d\u035e\3\2\2\2")
        buf.write("\u035e\u0360\3\2\2\2\u035f\u034e\3\2\2\2\u035f\u034f\3")
        buf.write("\2\2\2\u035f\u0356\3\2\2\2\u0360\u0089\3\2\2\2\u0361\u036f")
        buf.write("\7\35\2\2\u0362\u0363\7\16\2\2\u0363\u0366\7%\2\2\u0364")
        buf.write("\u0366\7\'\2\2\u0365\u0362\3\2\2\2\u0365\u0364\3\2\2\2")
        buf.write("\u0366\u0367\3\2\2\2\u0367\u036c\7e\2\2\u0368\u0369\7")
        buf.write("\\\2\2\u0369\u036a\5<\37\2\u036a\u036b\7]\2\2\u036b\u036d")
        buf.write("\3\2\2\2\u036c\u0368\3\2\2\2\u036c\u036d\3\2\2\2\u036d")
        buf.write("\u036f\3\2\2\2\u036e\u0361\3\2\2\2\u036e\u0365\3\2\2\2")
        buf.write("\u036f\u008b\3\2\2\2\u0370\u0371\7\13\2\2\u0371\u0374")
        buf.write("\7%\2\2\u0372\u0374\7&\2\2\u0373\u0370\3\2\2\2\u0373\u0372")
        buf.write("\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u037a\7e\2\2\u0376")
        buf.write("\u0377\7\\\2\2\u0377\u0378\5<\37\2\u0378\u0379\7]\2\2")
        buf.write("\u0379\u037b\3\2\2\2\u037a\u0376\3\2\2\2\u037a\u037b\3")
        buf.write("\2\2\2\u037b\u008d\3\2\2\2\u037c\u037e\5\u0090I\2\u037d")
        buf.write("\u037f\5\u00b4[\2\u037e\u037d\3\2\2\2\u037e\u037f\3\2")
        buf.write("\2\2\u037f\u0388\3\2\2\2\u0380\u0385\5\u0096L\2\u0381")
        buf.write("\u0383\5\u0090I\2\u0382\u0384\5\u00b4[\2\u0383\u0382\3")
        buf.write("\2\2\2\u0383\u0384\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0381")
        buf.write("\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388\3\2\2\2\u0387")
        buf.write("\u037c\3\2\2\2\u0387\u0380\3\2\2\2\u0388\u008f\3\2\2\2")
        buf.write("\u0389\u038a\7\26\2\2\u038a\u038b\7%\2\2\u038b\u038c\7")
        buf.write("e\2\2\u038c\u0091\3\2\2\2\u038d\u038e\7-\2\2\u038e\u038f")
        buf.write("\7%\2\2\u038f\u0390\7e\2\2\u0390\u0093\3\2\2\2\u0391\u0392")
        buf.write("\7\22\2\2\u0392\u0393\7%\2\2\u0393\u0394\7e\2\2\u0394")
        buf.write("\u0095\3\2\2\2\u0395\u0399\5\u0098M\2\u0396\u0399\5\u009a")
        buf.write("N\2\u0397\u0399\5\u009cO\2\u0398\u0395\3\2\2\2\u0398\u0396")
        buf.write("\3\2\2\2\u0398\u0397\3\2\2\2\u0399\u0097\3\2\2\2\u039a")
        buf.write("\u03a7\7\5\2\2\u039b\u03a3\7W\2\2\u039c\u039d\7^\2\2\u039d")
        buf.write("\u03a0\7e\2\2\u039e\u03a1\5\u00b2Z\2\u039f\u03a1\5\u00b4")
        buf.write("[\2\u03a0\u039e\3\2\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1")
        buf.write("\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a4\7_\2\2\u03a3")
        buf.write("\u039c\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5\3\2\2\2")
        buf.write("\u03a5\u03a7\7\6\2\2\u03a6\u039a\3\2\2\2\u03a6\u039b\3")
        buf.write("\2\2\2\u03a7\u0099\3\2\2\2\u03a8\u03b5\7\7\2\2\u03a9\u03b1")
        buf.write("\7\b\2\2\u03aa\u03ab\7^\2\2\u03ab\u03ae\7e\2\2\u03ac\u03af")
        buf.write("\5\u00b2Z\2\u03ad\u03af\5\u00b4[\2\u03ae\u03ac\3\2\2\2")
        buf.write("\u03ae\u03ad\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b0\3")
        buf.write("\2\2\2\u03b0\u03b2\7_\2\2\u03b1\u03aa\3\2\2\2\u03b1\u03b2")
        buf.write("\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b5\7W\2\2\u03b4")
        buf.write("\u03a8\3\2\2\2\u03b4\u03a9\3\2\2\2\u03b5\u009b\3\2\2\2")
        buf.write("\u03b6\u03c3\7\t\2\2\u03b7\u03bf\7\b\2\2\u03b8\u03b9\7")
        buf.write("^\2\2\u03b9\u03bc\7e\2\2\u03ba\u03bd\5\u00b2Z\2\u03bb")
        buf.write("\u03bd\5\u00b4[\2\u03bc\u03ba\3\2\2\2\u03bc\u03bb\3\2")
        buf.write("\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c0")
        buf.write("\7_\2\2\u03bf\u03b8\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03c1\3\2\2\2\u03c1\u03c3\7\6\2\2\u03c2\u03b6\3\2\2\2")
        buf.write("\u03c2\u03b7\3\2\2\2\u03c3\u009d\3\2\2\2\u03c4\u03c6\7")
        buf.write("^\2\2\u03c5\u03c7\5<\37\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7")
        buf.write("\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9\7_\2\2\u03c9")
        buf.write("\u009f\3\2\2\2\u03ca\u03cb\7^\2\2\u03cb\u03cc\5`\61\2")
        buf.write("\u03cc\u03cd\7_\2\2\u03cd\u03d5\3\2\2\2\u03ce\u03cf\7")
        buf.write("^\2\2\u03cf\u03d0\5`\61\2\u03d0\u03d1\7$\2\2\u03d1\u03d2")
        buf.write("\5`\61\2\u03d2\u03d3\7_\2\2\u03d3\u03d5\3\2\2\2\u03d4")
        buf.write("\u03ca\3\2\2\2\u03d4\u03ce\3\2\2\2\u03d5\u00a1\3\2\2\2")
        buf.write("\u03d6\u03df\7*\2\2\u03d7\u03dc\5\u00a4S\2\u03d8\u03d9")
        buf.write("\7T\2\2\u03d9\u03db\5\u00a4S\2\u03da\u03d8\3\2\2\2\u03db")
        buf.write("\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2")
        buf.write("\u03dd\u03e0\3\2\2\2\u03de\u03dc\3\2\2\2\u03df\u03d7\3")
        buf.write("\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2")
        buf.write("\7+\2\2\u03e2\u00a3\3\2\2\2\u03e3\u03e4\7a\2\2\u03e4\u03e5")
        buf.write("\7$\2\2\u03e5\u03e6\5`\61\2\u03e6\u00a5\3\2\2\2\u03e7")
        buf.write("\u03e8\7\31\2\2\u03e8\u03e9\5\u00a8U\2\u03e9\u00a7\3\2")
        buf.write("\2\2\u03ea\u03ee\5\u00acW\2\u03eb\u03ee\5\u00b0Y\2\u03ec")
        buf.write("\u03ee\5\u00aeX\2\u03ed\u03ea\3\2\2\2\u03ed\u03eb\3\2")
        buf.write("\2\2\u03ed\u03ec\3\2\2\2\u03ee\u00a9\3\2\2\2\u03ef\u03f0")
        buf.write("\5`\61\2\u03f0\u03f1\5\u0096L\2\u03f1\u00ab\3\2\2\2\u03f2")
        buf.write("\u03f4\5\u00aaV\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4\3\2")
        buf.write("\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f7\5\u0090I\2\u03f6")
        buf.write("\u03f8\5\u00b2Z\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2")
        buf.write("\2\2\u03f8\u00ad\3\2\2\2\u03f9\u03fb\5\u00aaV\2\u03fa")
        buf.write("\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\3\2\2\2")
        buf.write("\u03fc\u03fd\5\u0094K\2\u03fd\u00af\3\2\2\2\u03fe\u03ff")
        buf.write("\5`\61\2\u03ff\u0401\5\u0092J\2\u0400\u0402\5\u00b2Z\2")
        buf.write("\u0401\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u00b1\3")
        buf.write("\2\2\2\u0403\u040c\7\\\2\2\u0404\u0409\5\u00b6\\\2\u0405")
        buf.write("\u0406\7T\2\2\u0406\u0408\5\u00b6\\\2\u0407\u0405\3\2")
        buf.write("\2\2\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2\u0409\u040a")
        buf.write("\3\2\2\2\u040a\u040d\3\2\2\2\u040b\u0409\3\2\2\2\u040c")
        buf.write("\u0404\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040e\3\2\2\2")
        buf.write("\u040e\u040f\7]\2\2\u040f\u00b3\3\2\2\2\u0410\u0419\7")
        buf.write("\\\2\2\u0411\u0416\5\u00b8]\2\u0412\u0413\7T\2\2\u0413")
        buf.write("\u0415\5\u00b8]\2\u0414\u0412\3\2\2\2\u0415\u0418\3\2")
        buf.write("\2\2\u0416\u0414\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u041a")
        buf.write("\3\2\2\2\u0418\u0416\3\2\2\2\u0419\u0411\3\2\2\2\u0419")
        buf.write("\u041a\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\7]\2\2")
        buf.write("\u041c\u00b5\3\2\2\2\u041d\u041e\7e\2\2\u041e\u041f\7")
        buf.write("\61\2\2\u041f\u0420\5`\61\2\u0420\u00b7\3\2\2\2\u0421")
        buf.write("\u0422\7e\2\2\u0422\u0423\5n8\2\u0423\u0424\5`\61\2\u0424")
        buf.write("\u00b9\3\2\2\2\u0425\u0426\t\n\2\2\u0426\u00bb\3\2\2\2")
        buf.write("\u0427\u0429\7\23\2\2\u0428\u0427\3\2\2\2\u0428\u0429")
        buf.write("\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042c\t\13\2\2\u042b")
        buf.write("\u042d\5\u00d6l\2\u042c\u042b\3\2\2\2\u042c\u042d\3\2")
        buf.write("\2\2\u042d\u042e\3\2\2\2\u042e\u042f\7*\2\2\u042f\u0430")
        buf.write("\5\u00be`\2\u0430\u0431\7+\2\2\u0431\u00bd\3\2\2\2\u0432")
        buf.write("\u0434\5\u00c0a\2\u0433\u0435\7\60\2\2\u0434\u0433\3\2")
        buf.write("\2\2\u0434\u0435\3\2\2\2\u0435\u0437\3\2\2\2\u0436\u0432")
        buf.write("\3\2\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3\2\2\2\u0438")
        buf.write("\u0439\3\2\2\2\u0439\u00bf\3\2\2\2\u043a\u0438\3\2\2\2")
        buf.write("\u043b\u0444\5\u00ceh\2\u043c\u0444\5\u00c8e\2\u043d\u0444")
        buf.write("\5\u00c2b\2\u043e\u043f\5\u00d6l\2\u043f\u0440\7\61\2")
        buf.write("\2\u0440\u0441\5\u00d6l\2\u0441\u0444\3\2\2\2\u0442\u0444")
        buf.write("\5\u00d4k\2\u0443\u043b\3\2\2\2\u0443\u043c\3\2\2\2\u0443")
        buf.write("\u043d\3\2\2\2\u0443\u043e\3\2\2\2\u0443\u0442\3\2\2\2")
        buf.write("\u0444\u00c1\3\2\2\2\u0445\u0446\t\f\2\2\u0446\u0447\5")
        buf.write("\u00c4c\2\u0447\u00c3\3\2\2\2\u0448\u044a\7^\2\2\u0449")
        buf.write("\u044b\5\u00c6d\2\u044a\u0449\3\2\2\2\u044a\u044b\3\2")
        buf.write("\2\2\u044b\u044c\3\2\2\2\u044c\u044e\7_\2\2\u044d\u0448")
        buf.write("\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u044d\3\2\2\2\u044f")
        buf.write("\u0450\3\2\2\2\u0450\u00c5\3\2\2\2\u0451\u0454\5\u00d6")
        buf.write("l\2\u0452\u0453\7\61\2\2\u0453\u0455\5\u00d6l\2\u0454")
        buf.write("\u0452\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0457\3\2\2\2")
        buf.write("\u0456\u0458\7T\2\2\u0457\u0456\3\2\2\2\u0457\u0458\3")
        buf.write("\2\2\2\u0458\u045a\3\2\2\2\u0459\u0451\3\2\2\2\u045a\u045b")
        buf.write("\3\2\2\2\u045b\u0459\3\2\2\2\u045b\u045c\3\2\2\2\u045c")
        buf.write("\u00c7\3\2\2\2\u045d\u0460\5\u00d0i\2\u045e\u0460\5\u00d4")
        buf.write("k\2\u045f\u045d\3\2\2\2\u045f\u045e\3\2\2\2\u0460\u0461")
        buf.write("\3\2\2\2\u0461\u0463\5\u00caf\2\u0462\u0464\5\u00c4c\2")
        buf.write("\u0463\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u00c9\3")
        buf.write("\2\2\2\u0465\u0468\5\u00ccg\2\u0466\u0469\5\u00d0i\2\u0467")
        buf.write("\u0469\5\u00d4k\2\u0468\u0466\3\2\2\2\u0468\u0467\3\2")
        buf.write("\2\2\u0469\u046b\3\2\2\2\u046a\u0465\3\2\2\2\u046b\u046c")
        buf.write("\3\2\2\2\u046c\u046a\3\2\2\2\u046c\u046d\3\2\2\2\u046d")
        buf.write("\u00cb\3\2\2\2\u046e\u046f\t\r\2\2\u046f\u00cd\3\2\2\2")
        buf.write("\u0470\u0472\5\u00d0i\2\u0471\u0473\5\u00c4c\2\u0472\u0471")
        buf.write("\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u00cf\3\2\2\2\u0474")
        buf.write("\u0476\5\u00d6l\2\u0475\u0477\5\u00d2j\2\u0476\u0475\3")
        buf.write("\2\2\2\u0476\u0477\3\2\2\2\u0477\u00d1\3\2\2\2\u0478\u0479")
        buf.write("\7$\2\2\u0479\u047c\5\u00d6l\2\u047a\u047b\7$\2\2\u047b")
        buf.write("\u047d\5\u00d6l\2\u047c\u047a\3\2\2\2\u047c\u047d\3\2")
        buf.write("\2\2\u047d\u00d3\3\2\2\2\u047e\u0480\7\25\2\2\u047f\u0481")
        buf.write("\5\u00d6l\2\u0480\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481")
        buf.write("\u0483\3\2\2\2\u0482\u047e\3\2\2\2\u0482\u0483\3\2\2\2")
        buf.write("\u0483\u0484\3\2\2\2\u0484\u0485\7*\2\2\u0485\u0486\5")
        buf.write("\u00be`\2\u0486\u0487\7+\2\2\u0487\u00d5\3\2\2\2\u0488")
        buf.write("\u0489\t\16\2\2\u0489\u00d7\3\2\2\2\u008c\u00d9\u00de")
        buf.write("\u00e4\u00ed\u00f8\u00fd\u0101\u0106\u010a\u010f\u0113")
        buf.write("\u0118\u011c\u0121\u0125\u0127\u0130\u0136\u0142\u014b")
        buf.write("\u0154\u0159\u0161\u0165\u0169\u016b\u016f\u0179\u017e")
        buf.write("\u0182\u0186\u019b\u01a2\u01a6\u01ab\u01b0\u01c0\u01cc")
        buf.write("\u01d5\u01d8\u01df\u01e8\u01ef\u01f6\u01fa\u0202\u0205")
        buf.write("\u0209\u020f\u0214\u021f\u0227\u022e\u0234\u024b\u0253")
        buf.write("\u0257\u025c\u0262\u0268\u026b\u0282\u029b\u02a1\u02ab")
        buf.write("\u02b1\u02be\u02c3\u02ca\u02d5\u02d8\u02e2\u02ec\u02f4")
        buf.write("\u02fa\u0301\u0318\u031e\u0324\u0328\u0332\u0338\u033a")
        buf.write("\u0348\u0356\u035d\u035f\u0365\u036c\u036e\u0373\u037a")
        buf.write("\u037e\u0383\u0385\u0387\u0398\u03a0\u03a3\u03a6\u03ae")
        buf.write("\u03b1\u03b4\u03bc\u03bf\u03c2\u03c6\u03d4\u03dc\u03df")
        buf.write("\u03ed\u03f3\u03f7\u03fa\u0401\u0409\u040c\u0416\u0419")
        buf.write("\u0428\u042c\u0434\u0438\u0443\u044a\u044f\u0454\u0457")
        buf.write("\u045b\u045f\u0463\u0468\u046c\u0472\u0476\u047c\u0480")
        buf.write("\u0482")
        return buf.getvalue()


class jacParser ( Parser ):

    grammarFileName = "jac.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'version'", "'&'", "'-->'", "'->'", "'<--'", 
                     "'<-'", "'<-->'", "'--'", "'str'", "'int'", "'float'", 
                     "'list'", "'dict'", "'bool'", "'type'", "'graph'", 
                     "'strict'", "'digraph'", "'subgraph'", "'node'", "'ignore'", 
                     "'take'", "'spawn'", "'with'", "'entry'", "'exit'", 
                     "'length'", "'keys'", "'context'", "'info'", "'details'", 
                     "'activity'", "'import'", "':'", "'::'", "'s::'", "'l::'", 
                     "'d::'", "'::>'", "'{'", "'}'", "'edge'", "'walker'", 
                     "'test'", "'assert'", "';'", "'='", "'+='", "'-='", 
                     "'*='", "'/='", "':='", "<INVALID>", "<INVALID>", "'if'", 
                     "'elif'", "'else'", "'for'", "'to'", "'by'", "'while'", 
                     "'continue'", "'break'", "'disengage'", "'skip'", "'report'", 
                     "'destroy'", "'try'", "'.'", "<INVALID>", "'=='", "'<'", 
                     "'>'", "'<='", "'>='", "'!='", "'in'", "'anchor'", 
                     "'has'", "'global'", "'private'", "','", "'can'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'^'", "'('", "')'", "'['", 
                     "']'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'null'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TYP_STRING", "TYP_INT", "TYP_FLOAT", 
                      "TYP_LIST", "TYP_DICT", "TYP_BOOL", "KW_TYPE", "KW_GRAPH", 
                      "KW_STRICT", "KW_DIGRAPH", "KW_SUBGRAPH", "KW_NODE", 
                      "KW_IGNORE", "KW_TAKE", "KW_SPAWN", "KW_WITH", "KW_ENTRY", 
                      "KW_EXIT", "KW_LENGTH", "KW_KEYS", "KW_CONTEXT", "KW_INFO", 
                      "KW_DETAILS", "KW_ACTIVITY", "KW_IMPORT", "COLON", 
                      "DBL_COLON", "STR_DBL_COLON", "LIST_DBL_COLON", "DICT_DBL_COLON", 
                      "COLON_OUT", "LBRACE", "RBRACE", "KW_EDGE", "KW_WALKER", 
                      "KW_TEST", "KW_ASSERT", "SEMI", "EQ", "PEQ", "MEQ", 
                      "TEQ", "DEQ", "CPY_EQ", "KW_AND", "KW_OR", "KW_IF", 
                      "KW_ELIF", "KW_ELSE", "KW_FOR", "KW_TO", "KW_BY", 
                      "KW_WHILE", "KW_CONTINUE", "KW_BREAK", "KW_DISENGAGE", 
                      "KW_SKIP", "KW_REPORT", "KW_DESTROY", "KW_TRY", "DOT", 
                      "NOT", "EE", "LT", "GT", "LTE", "GTE", "NE", "KW_IN", 
                      "KW_ANCHOR", "KW_HAS", "KW_GLOBAL", "KW_PRIVATE", 
                      "COMMA", "KW_CAN", "PLUS", "MINUS", "STAR_MUL", "DIV", 
                      "MOD", "POW", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
                      "FLOAT", "STRING", "BOOL", "INT", "NULL", "NAME", 
                      "COMMENT", "LINE_COMMENT", "PY_COMMENT", "WS", "ErrorChar" ]

    RULE_start = 0
    RULE_import_module = 1
    RULE_ver_label = 2
    RULE_import_items = 3
    RULE_import_names = 4
    RULE_element = 5
    RULE_global_var = 6
    RULE_architype = 7
    RULE_walker = 8
    RULE_walker_block = 9
    RULE_test = 10
    RULE_namespaces = 11
    RULE_walk_entry_block = 12
    RULE_walk_exit_block = 13
    RULE_walk_activity_block = 14
    RULE_attr_block = 15
    RULE_attr_stmt = 16
    RULE_can_block = 17
    RULE_graph_block = 18
    RULE_graph_block_spawn = 19
    RULE_graph_block_dot = 20
    RULE_has_root = 21
    RULE_has_stmt = 22
    RULE_has_assign = 23
    RULE_can_stmt = 24
    RULE_event_clause = 25
    RULE_preset_in_out = 26
    RULE_dotted_name = 27
    RULE_name_list = 28
    RULE_expr_list = 29
    RULE_code_block = 30
    RULE_node_ctx_block = 31
    RULE_statement = 32
    RULE_if_stmt = 33
    RULE_try_stmt = 34
    RULE_else_from_try = 35
    RULE_elif_stmt = 36
    RULE_else_stmt = 37
    RULE_for_stmt = 38
    RULE_while_stmt = 39
    RULE_ctrl_stmt = 40
    RULE_assert_stmt = 41
    RULE_destroy_action = 42
    RULE_report_action = 43
    RULE_walker_action = 44
    RULE_ignore_action = 45
    RULE_take_action = 46
    RULE_expression = 47
    RULE_assignment = 48
    RULE_copy_assign = 49
    RULE_inc_assign = 50
    RULE_connect = 51
    RULE_logical = 52
    RULE_compare = 53
    RULE_cmp_op = 54
    RULE_nin = 55
    RULE_arithmetic = 56
    RULE_term = 57
    RULE_factor = 58
    RULE_power = 59
    RULE_atom = 60
    RULE_atom_trailer = 61
    RULE_ref = 62
    RULE_deref = 63
    RULE_built_in = 64
    RULE_cast_built_in = 65
    RULE_obj_built_in = 66
    RULE_dict_built_in = 67
    RULE_list_built_in = 68
    RULE_string_built_in = 69
    RULE_node_edge_ref = 70
    RULE_node_ref = 71
    RULE_walker_ref = 72
    RULE_graph_ref = 73
    RULE_edge_ref = 74
    RULE_edge_to = 75
    RULE_edge_from = 76
    RULE_edge_any = 77
    RULE_list_val = 78
    RULE_index_slice = 79
    RULE_dict_val = 80
    RULE_kv_pair = 81
    RULE_spawn = 82
    RULE_spawn_object = 83
    RULE_spawn_edge = 84
    RULE_node_spawn = 85
    RULE_graph_spawn = 86
    RULE_walker_spawn = 87
    RULE_spawn_ctx = 88
    RULE_filter_ctx = 89
    RULE_spawn_assign = 90
    RULE_filter_compare = 91
    RULE_any_type = 92
    RULE_dot_graph = 93
    RULE_dot_stmt_list = 94
    RULE_dot_stmt = 95
    RULE_dot_attr_stmt = 96
    RULE_dot_attr_list = 97
    RULE_dot_a_list = 98
    RULE_dot_edge_stmt = 99
    RULE_dot_edgeRHS = 100
    RULE_dot_edgeop = 101
    RULE_dot_node_stmt = 102
    RULE_dot_node_id = 103
    RULE_dot_port = 104
    RULE_dot_subgraph = 105
    RULE_dot_id = 106

    ruleNames =  [ "start", "import_module", "ver_label", "import_items", 
                   "import_names", "element", "global_var", "architype", 
                   "walker", "walker_block", "test", "namespaces", "walk_entry_block", 
                   "walk_exit_block", "walk_activity_block", "attr_block", 
                   "attr_stmt", "can_block", "graph_block", "graph_block_spawn", 
                   "graph_block_dot", "has_root", "has_stmt", "has_assign", 
                   "can_stmt", "event_clause", "preset_in_out", "dotted_name", 
                   "name_list", "expr_list", "code_block", "node_ctx_block", 
                   "statement", "if_stmt", "try_stmt", "else_from_try", 
                   "elif_stmt", "else_stmt", "for_stmt", "while_stmt", "ctrl_stmt", 
                   "assert_stmt", "destroy_action", "report_action", "walker_action", 
                   "ignore_action", "take_action", "expression", "assignment", 
                   "copy_assign", "inc_assign", "connect", "logical", "compare", 
                   "cmp_op", "nin", "arithmetic", "term", "factor", "power", 
                   "atom", "atom_trailer", "ref", "deref", "built_in", "cast_built_in", 
                   "obj_built_in", "dict_built_in", "list_built_in", "string_built_in", 
                   "node_edge_ref", "node_ref", "walker_ref", "graph_ref", 
                   "edge_ref", "edge_to", "edge_from", "edge_any", "list_val", 
                   "index_slice", "dict_val", "kv_pair", "spawn", "spawn_object", 
                   "spawn_edge", "node_spawn", "graph_spawn", "walker_spawn", 
                   "spawn_ctx", "filter_ctx", "spawn_assign", "filter_compare", 
                   "any_type", "dot_graph", "dot_stmt_list", "dot_stmt", 
                   "dot_attr_stmt", "dot_attr_list", "dot_a_list", "dot_edge_stmt", 
                   "dot_edgeRHS", "dot_edgeop", "dot_node_stmt", "dot_node_id", 
                   "dot_port", "dot_subgraph", "dot_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    TYP_STRING=9
    TYP_INT=10
    TYP_FLOAT=11
    TYP_LIST=12
    TYP_DICT=13
    TYP_BOOL=14
    KW_TYPE=15
    KW_GRAPH=16
    KW_STRICT=17
    KW_DIGRAPH=18
    KW_SUBGRAPH=19
    KW_NODE=20
    KW_IGNORE=21
    KW_TAKE=22
    KW_SPAWN=23
    KW_WITH=24
    KW_ENTRY=25
    KW_EXIT=26
    KW_LENGTH=27
    KW_KEYS=28
    KW_CONTEXT=29
    KW_INFO=30
    KW_DETAILS=31
    KW_ACTIVITY=32
    KW_IMPORT=33
    COLON=34
    DBL_COLON=35
    STR_DBL_COLON=36
    LIST_DBL_COLON=37
    DICT_DBL_COLON=38
    COLON_OUT=39
    LBRACE=40
    RBRACE=41
    KW_EDGE=42
    KW_WALKER=43
    KW_TEST=44
    KW_ASSERT=45
    SEMI=46
    EQ=47
    PEQ=48
    MEQ=49
    TEQ=50
    DEQ=51
    CPY_EQ=52
    KW_AND=53
    KW_OR=54
    KW_IF=55
    KW_ELIF=56
    KW_ELSE=57
    KW_FOR=58
    KW_TO=59
    KW_BY=60
    KW_WHILE=61
    KW_CONTINUE=62
    KW_BREAK=63
    KW_DISENGAGE=64
    KW_SKIP=65
    KW_REPORT=66
    KW_DESTROY=67
    KW_TRY=68
    DOT=69
    NOT=70
    EE=71
    LT=72
    GT=73
    LTE=74
    GTE=75
    NE=76
    KW_IN=77
    KW_ANCHOR=78
    KW_HAS=79
    KW_GLOBAL=80
    KW_PRIVATE=81
    COMMA=82
    KW_CAN=83
    PLUS=84
    MINUS=85
    STAR_MUL=86
    DIV=87
    MOD=88
    POW=89
    LPAREN=90
    RPAREN=91
    LSQUARE=92
    RSQUARE=93
    FLOAT=94
    STRING=95
    BOOL=96
    INT=97
    NULL=98
    NAME=99
    COMMENT=100
    LINE_COMMENT=101
    PY_COMMENT=102
    WS=103
    ErrorChar=104

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(jacParser.EOF, 0)

        def ver_label(self):
            return self.getTypedRuleContext(jacParser.Ver_labelContext,0)


        def import_module(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Import_moduleContext)
            else:
                return self.getTypedRuleContext(jacParser.Import_moduleContext,i)


        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ElementContext)
            else:
                return self.getTypedRuleContext(jacParser.ElementContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = jacParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.T__0:
                self.state = 214
                self.ver_label()


            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.KW_IMPORT:
                self.state = 217
                self.import_module()
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE) | (1 << jacParser.KW_WALKER) | (1 << jacParser.KW_TEST))) != 0) or _la==jacParser.KW_GLOBAL:
                self.state = 223
                self.element()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 229
            self.match(jacParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_moduleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(jacParser.KW_IMPORT, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext,0)


        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_module" ):
                listener.enterImport_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_module" ):
                listener.exitImport_module(self)




    def import_module(self):

        localctx = jacParser.Import_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_import_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(jacParser.KW_IMPORT)
            self.state = 232
            self.match(jacParser.LBRACE)
            self.state = 235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE, jacParser.KW_WALKER, jacParser.KW_GLOBAL]:
                self.state = 233
                self.import_items()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 234
                self.match(jacParser.STAR_MUL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 237
            self.match(jacParser.RBRACE)
            self.state = 238
            self.match(jacParser.KW_WITH)
            self.state = 239
            self.match(jacParser.STRING)
            self.state = 240
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ver_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ver_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVer_label" ):
                listener.enterVer_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVer_label" ):
                listener.exitVer_label(self)




    def ver_label(self):

        localctx = jacParser.Ver_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ver_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(jacParser.T__0)
            self.state = 243
            self.match(jacParser.COLON)
            self.state = 244
            self.match(jacParser.STRING)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.SEMI:
                self.state = 245
                self.match(jacParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def import_names(self):
            return self.getTypedRuleContext(jacParser.Import_namesContext,0)


        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext,0)


        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_items" ):
                listener.enterImport_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_items" ):
                listener.exitImport_items(self)




    def import_items(self):

        localctx = jacParser.Import_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_items)
        self._la = 0 # Token type
        try:
            self.state = 293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.match(jacParser.KW_WALKER)
                self.state = 251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 249
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 250
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 253
                    self.match(jacParser.COMMA)
                    self.state = 254
                    self.import_items()


                pass
            elif token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self.match(jacParser.KW_NODE)
                self.state = 260
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 258
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 259
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 262
                    self.match(jacParser.COMMA)
                    self.state = 263
                    self.import_items()


                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 266
                self.match(jacParser.KW_EDGE)
                self.state = 269
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 267
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 268
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 271
                    self.match(jacParser.COMMA)
                    self.state = 272
                    self.import_items()


                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 275
                self.match(jacParser.KW_GRAPH)
                self.state = 278
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 276
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 277
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 280
                    self.match(jacParser.COMMA)
                    self.state = 281
                    self.import_items()


                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 284
                self.match(jacParser.KW_GLOBAL)
                self.state = 287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 285
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 286
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 289
                    self.match(jacParser.COMMA)
                    self.state = 290
                    self.import_items()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_names" ):
                listener.enterImport_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_names" ):
                listener.exitImport_names(self)




    def import_names(self):

        localctx = jacParser.Import_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_import_names)
        try:
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 295
                self.match(jacParser.DBL_COLON)
                self.state = 296
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.match(jacParser.DBL_COLON)
                self.state = 298
                self.match(jacParser.LBRACE)
                self.state = 299
                self.name_list()
                self.state = 300
                self.match(jacParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_var(self):
            return self.getTypedRuleContext(jacParser.Global_varContext,0)


        def architype(self):
            return self.getTypedRuleContext(jacParser.ArchitypeContext,0)


        def walker(self):
            return self.getTypedRuleContext(jacParser.WalkerContext,0)


        def test(self):
            return self.getTypedRuleContext(jacParser.TestContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = jacParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_element)
        try:
            self.state = 308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.global_var()
                pass
            elif token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.architype()
                pass
            elif token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.walker()
                pass
            elif token in [jacParser.KW_TEST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 307
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_global_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_var" ):
                listener.enterGlobal_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_var" ):
                listener.exitGlobal_var(self)




    def global_var(self):

        localctx = jacParser.Global_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_global_var)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(jacParser.KW_GLOBAL)
            self.state = 311
            self.match(jacParser.NAME)
            self.state = 312
            self.match(jacParser.EQ)
            self.state = 313
            self.expression()
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 314
                self.match(jacParser.COMMA)
                self.state = 315
                self.match(jacParser.NAME)
                self.state = 316
                self.match(jacParser.EQ)
                self.state = 317
                self.expression()
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 323
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchitypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def attr_block(self):
            return self.getTypedRuleContext(jacParser.Attr_blockContext,0)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_architype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchitype" ):
                listener.enterArchitype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchitype" ):
                listener.exitArchitype(self)




    def architype(self):

        localctx = jacParser.ArchitypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_architype)
        try:
            self.state = 338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.match(jacParser.KW_NODE)
                self.state = 326
                self.match(jacParser.NAME)
                self.state = 329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 327
                    self.match(jacParser.COLON)
                    self.state = 328
                    self.match(jacParser.INT)


                self.state = 331
                self.attr_block()
                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.match(jacParser.KW_EDGE)
                self.state = 333
                self.match(jacParser.NAME)
                self.state = 334
                self.attr_block()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 335
                self.match(jacParser.KW_GRAPH)
                self.state = 336
                self.match(jacParser.NAME)
                self.state = 337
                self.graph_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WalkerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext,0)


        def namespaces(self):
            return self.getTypedRuleContext(jacParser.NamespacesContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker" ):
                listener.enterWalker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker" ):
                listener.exitWalker(self)




    def walker(self):

        localctx = jacParser.WalkerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_walker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(jacParser.KW_WALKER)
            self.state = 341
            self.match(jacParser.NAME)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 342
                self.namespaces()


            self.state = 345
            self.walker_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext,i)


        def walk_entry_block(self):
            return self.getTypedRuleContext(jacParser.Walk_entry_blockContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext,i)


        def walk_activity_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Walk_activity_blockContext)
            else:
                return self.getTypedRuleContext(jacParser.Walk_activity_blockContext,i)


        def walk_exit_block(self):
            return self.getTypedRuleContext(jacParser.Walk_exit_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walker_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_block" ):
                listener.enterWalker_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_block" ):
                listener.exitWalker_block(self)




    def walker_block(self):

        localctx = jacParser.Walker_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_walker_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(jacParser.LBRACE)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.KW_HAS or _la==jacParser.KW_CAN:
                self.state = 348
                self.attr_stmt()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 354
                self.walk_entry_block()


            self.state = 361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 359
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [jacParser.T__1, jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.TYP_STRING, jacParser.TYP_INT, jacParser.TYP_FLOAT, jacParser.TYP_LIST, jacParser.TYP_DICT, jacParser.TYP_BOOL, jacParser.KW_TYPE, jacParser.KW_NODE, jacParser.KW_IGNORE, jacParser.KW_TAKE, jacParser.KW_SPAWN, jacParser.COLON, jacParser.DBL_COLON, jacParser.LBRACE, jacParser.KW_EDGE, jacParser.KW_ASSERT, jacParser.KW_IF, jacParser.KW_FOR, jacParser.KW_WHILE, jacParser.KW_CONTINUE, jacParser.KW_BREAK, jacParser.KW_DISENGAGE, jacParser.KW_SKIP, jacParser.KW_REPORT, jacParser.KW_DESTROY, jacParser.KW_TRY, jacParser.NOT, jacParser.KW_GLOBAL, jacParser.PLUS, jacParser.MINUS, jacParser.STAR_MUL, jacParser.LPAREN, jacParser.LSQUARE, jacParser.FLOAT, jacParser.STRING, jacParser.BOOL, jacParser.INT, jacParser.NULL, jacParser.NAME]:
                        self.state = 357
                        self.statement()
                        pass
                    elif token in [jacParser.KW_WITH]:
                        self.state = 358
                        self.walk_activity_block()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_WITH:
                self.state = 364
                self.walk_exit_block()


            self.state = 367
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TEST(self):
            return self.getToken(jacParser.KW_TEST, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext,0)


        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext,0)


        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext,0)


        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)




    def test(self):

        localctx = jacParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(jacParser.KW_TEST)
            self.state = 370
            self.match(jacParser.STRING)
            self.state = 371
            self.match(jacParser.KW_WITH)
            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 372
                self.graph_ref()
                pass

            elif la_ == 2:
                self.state = 373
                self.match(jacParser.KW_GRAPH)
                self.state = 374
                self.graph_block()
                pass


            self.state = 377
            self.match(jacParser.KW_BY)
            self.state = 388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 378
                self.walker_ref()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LPAREN:
                    self.state = 379
                    self.spawn_ctx()


                self.state = 384
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.COLON, jacParser.LBRACE]:
                    self.state = 382
                    self.code_block()
                    pass
                elif token in [jacParser.SEMI]:
                    self.state = 383
                    self.match(jacParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 386
                self.match(jacParser.KW_WALKER)
                self.state = 387
                self.walker_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_namespaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaces" ):
                listener.enterNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaces" ):
                listener.exitNamespaces(self)




    def namespaces(self):

        localctx = jacParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_namespaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(jacParser.COLON)
            self.state = 391
            self.name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_entry_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_entry_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_entry_block" ):
                listener.enterWalk_entry_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_entry_block" ):
                listener.exitWalk_entry_block(self)




    def walk_entry_block(self):

        localctx = jacParser.Walk_entry_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_walk_entry_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(jacParser.KW_WITH)
            self.state = 394
            self.match(jacParser.KW_ENTRY)
            self.state = 395
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_exit_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_exit_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_exit_block" ):
                listener.enterWalk_exit_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_exit_block" ):
                listener.exitWalk_exit_block(self)




    def walk_exit_block(self):

        localctx = jacParser.Walk_exit_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_walk_exit_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(jacParser.KW_WITH)
            self.state = 398
            self.match(jacParser.KW_EXIT)
            self.state = 399
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walk_activity_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walk_activity_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalk_activity_block" ):
                listener.enterWalk_activity_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalk_activity_block" ):
                listener.exitWalk_activity_block(self)




    def walk_activity_block(self):

        localctx = jacParser.Walk_activity_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_walk_activity_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(jacParser.KW_WITH)
            self.state = 402
            self.match(jacParser.KW_ACTIVITY)
            self.state = 403
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext,i)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_block" ):
                listener.enterAttr_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_block" ):
                listener.exitAttr_block(self)




    def attr_block(self):

        localctx = jacParser.Attr_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attr_block)
        self._la = 0 # Token type
        try:
            self.state = 416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.match(jacParser.LBRACE)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.KW_HAS or _la==jacParser.KW_CAN:
                    self.state = 406
                    self.attr_stmt()
                    self.state = 411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 412
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self.match(jacParser.COLON)
                self.state = 414
                self.attr_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 415
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def has_stmt(self):
            return self.getTypedRuleContext(jacParser.Has_stmtContext,0)


        def can_stmt(self):
            return self.getTypedRuleContext(jacParser.Can_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_attr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_stmt" ):
                listener.enterAttr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_stmt" ):
                listener.exitAttr_stmt(self)




    def attr_stmt(self):

        localctx = jacParser.Attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attr_stmt)
        try:
            self.state = 420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_HAS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.has_stmt()
                pass
            elif token in [jacParser.KW_CAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 419
                self.can_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Can_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def can_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Can_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Can_stmtContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_can_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCan_block" ):
                listener.enterCan_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCan_block" ):
                listener.exitCan_block(self)




    def can_block(self):

        localctx = jacParser.Can_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_can_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.KW_CAN:
                self.state = 422
                self.can_stmt()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_block_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_block_spawnContext,0)


        def graph_block_dot(self):
            return self.getTypedRuleContext(jacParser.Graph_block_dotContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_graph_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block" ):
                listener.enterGraph_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block" ):
                listener.exitGraph_block(self)




    def graph_block(self):

        localctx = jacParser.Graph_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_graph_block)
        try:
            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                self.graph_block_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.graph_block_dot()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_block_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext,0)


        def can_block(self):
            return self.getTypedRuleContext(jacParser.Can_blockContext,0)


        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block_spawn" ):
                listener.enterGraph_block_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block_spawn" ):
                listener.exitGraph_block_spawn(self)




    def graph_block_spawn(self):

        localctx = jacParser.Graph_block_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_graph_block_spawn)
        try:
            self.state = 446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.match(jacParser.LBRACE)
                self.state = 433
                self.has_root()
                self.state = 434
                self.can_block()
                self.state = 435
                self.match(jacParser.KW_SPAWN)
                self.state = 436
                self.code_block()
                self.state = 437
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.match(jacParser.COLON)
                self.state = 440
                self.has_root()
                self.state = 441
                self.can_block()
                self.state = 442
                self.match(jacParser.KW_SPAWN)
                self.state = 443
                self.code_block()
                self.state = 444
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_block_dotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext,0)


        def dot_graph(self):
            return self.getTypedRuleContext(jacParser.Dot_graphContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_dot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_block_dot" ):
                listener.enterGraph_block_dot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_block_dot" ):
                listener.exitGraph_block_dot(self)




    def graph_block_dot(self):

        localctx = jacParser.Graph_block_dotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_graph_block_dot)
        try:
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.match(jacParser.LBRACE)
                self.state = 449
                self.has_root()
                self.state = 450
                self.dot_graph()
                self.state = 451
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 453
                self.match(jacParser.COLON)
                self.state = 454
                self.has_root()
                self.state = 455
                self.dot_graph()
                self.state = 456
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_rootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_root" ):
                listener.enterHas_root(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_root" ):
                listener.exitHas_root(self)




    def has_root(self):

        localctx = jacParser.Has_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_has_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(jacParser.KW_HAS)
            self.state = 461
            self.match(jacParser.KW_ANCHOR)
            self.state = 462
            self.match(jacParser.NAME)
            self.state = 463
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def has_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_assignContext,i)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def KW_PRIVATE(self):
            return self.getToken(jacParser.KW_PRIVATE, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_has_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_stmt" ):
                listener.enterHas_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_stmt" ):
                listener.exitHas_stmt(self)




    def has_stmt(self):

        localctx = jacParser.Has_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_has_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(jacParser.KW_HAS)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_PRIVATE:
                self.state = 466
                self.match(jacParser.KW_PRIVATE)


            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_ANCHOR:
                self.state = 469
                self.match(jacParser.KW_ANCHOR)


            self.state = 472
            self.has_assign()
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 473
                self.match(jacParser.COMMA)
                self.state = 474
                self.has_assign()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 480
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_has_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_assign" ):
                listener.enterHas_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_assign" ):
                listener.exitHas_assign(self)




    def has_assign(self):

        localctx = jacParser.Has_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_has_assign)
        try:
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.match(jacParser.NAME)
                self.state = 484
                self.match(jacParser.EQ)
                self.state = 485
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Can_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAN(self):
            return self.getToken(jacParser.KW_CAN, 0)

        def dotted_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(jacParser.Dotted_nameContext,i)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def preset_in_out(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Preset_in_outContext)
            else:
                return self.getTypedRuleContext(jacParser.Preset_in_outContext,i)


        def event_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Event_clauseContext)
            else:
                return self.getTypedRuleContext(jacParser.Event_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_can_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCan_stmt" ):
                listener.enterCan_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCan_stmt" ):
                listener.exitCan_stmt(self)




    def can_stmt(self):

        localctx = jacParser.Can_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_can_stmt)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                self.match(jacParser.KW_CAN)
                self.state = 489
                self.dotted_name()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.DBL_COLON:
                    self.state = 490
                    self.preset_in_out()
                    self.state = 491
                    self.event_clause()


                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 495
                    self.match(jacParser.COMMA)
                    self.state = 496
                    self.dotted_name()
                    self.state = 500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==jacParser.DBL_COLON:
                        self.state = 497
                        self.preset_in_out()
                        self.state = 498
                        self.event_clause()


                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 507
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.match(jacParser.KW_CAN)
                self.state = 510
                self.match(jacParser.NAME)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.KW_WITH:
                    self.state = 511
                    self.event_clause()


                self.state = 514
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_event_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_clause" ):
                listener.enterEvent_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_clause" ):
                listener.exitEvent_clause(self)




    def event_clause(self):

        localctx = jacParser.Event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(jacParser.KW_WITH)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 518
                self.name_list()


            self.state = 521
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_ENTRY) | (1 << jacParser.KW_EXIT) | (1 << jacParser.KW_ACTIVITY))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preset_in_outContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.DBL_COLON)
            else:
                return self.getToken(jacParser.DBL_COLON, i)

        def COLON_OUT(self):
            return self.getToken(jacParser.COLON_OUT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_preset_in_out

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreset_in_out" ):
                listener.enterPreset_in_out(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreset_in_out" ):
                listener.exitPreset_in_out(self)




    def preset_in_out(self):

        localctx = jacParser.Preset_in_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_preset_in_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(jacParser.DBL_COLON)
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 524
                self.expr_list()


            self.state = 530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.DBL_COLON]:
                self.state = 527
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.COLON_OUT]:
                self.state = 528
                self.match(jacParser.COLON_OUT)
                self.state = 529
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)




    def dotted_name(self):

        localctx = jacParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dotted_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.match(jacParser.NAME)
            self.state = 533
            self.match(jacParser.DOT)
            self.state = 534
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list" ):
                listener.enterName_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list" ):
                listener.exitName_list(self)




    def name_list(self):

        localctx = jacParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(jacParser.NAME)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 537
                self.match(jacParser.COMMA)
                self.state = 538
                self.match(jacParser.NAME)
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)




    def expr_list(self):

        localctx = jacParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.expression()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==jacParser.COMMA:
                self.state = 545
                self.match(jacParser.COMMA)
                self.state = 546
                self.expression()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Code_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext,i)


        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_code_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_block" ):
                listener.enterCode_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_block" ):
                listener.exitCode_block(self)




    def code_block(self):

        localctx = jacParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_code_block)
        self._la = 0 # Token type
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 552
                self.match(jacParser.LBRACE)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_IGNORE) | (1 << jacParser.KW_TAKE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.COLON) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE) | (1 << jacParser.KW_ASSERT) | (1 << jacParser.KW_IF) | (1 << jacParser.KW_FOR) | (1 << jacParser.KW_WHILE) | (1 << jacParser.KW_CONTINUE) | (1 << jacParser.KW_BREAK))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (jacParser.KW_DISENGAGE - 64)) | (1 << (jacParser.KW_SKIP - 64)) | (1 << (jacParser.KW_REPORT - 64)) | (1 << (jacParser.KW_DESTROY - 64)) | (1 << (jacParser.KW_TRY - 64)) | (1 << (jacParser.NOT - 64)) | (1 << (jacParser.KW_GLOBAL - 64)) | (1 << (jacParser.PLUS - 64)) | (1 << (jacParser.MINUS - 64)) | (1 << (jacParser.STAR_MUL - 64)) | (1 << (jacParser.LPAREN - 64)) | (1 << (jacParser.LSQUARE - 64)) | (1 << (jacParser.FLOAT - 64)) | (1 << (jacParser.STRING - 64)) | (1 << (jacParser.BOOL - 64)) | (1 << (jacParser.INT - 64)) | (1 << (jacParser.NULL - 64)) | (1 << (jacParser.NAME - 64)))) != 0):
                    self.state = 553
                    self.statement()
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 559
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 560
                self.match(jacParser.COLON)
                self.state = 561
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_ctx_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_ctx_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_ctx_block" ):
                listener.enterNode_ctx_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_ctx_block" ):
                listener.exitNode_ctx_block(self)




    def node_ctx_block(self):

        localctx = jacParser.Node_ctx_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_node_ctx_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.name_list()
            self.state = 565
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def node_ctx_block(self):
            return self.getTypedRuleContext(jacParser.Node_ctx_blockContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(jacParser.If_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(jacParser.Try_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(jacParser.For_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(jacParser.While_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(jacParser.Assert_stmtContext,0)


        def ctrl_stmt(self):
            return self.getTypedRuleContext(jacParser.Ctrl_stmtContext,0)


        def destroy_action(self):
            return self.getTypedRuleContext(jacParser.Destroy_actionContext,0)


        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext,0)


        def walker_action(self):
            return self.getTypedRuleContext(jacParser.Walker_actionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = jacParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_statement)
        try:
            self.state = 585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.node_ctx_block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                self.expression()
                self.state = 570
                self.match(jacParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 572
                self.if_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 573
                self.try_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 574
                self.for_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 575
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 576
                self.assert_stmt()
                self.state = 577
                self.match(jacParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 579
                self.ctrl_stmt()
                self.state = 580
                self.match(jacParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 582
                self.destroy_action()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 583
                self.report_action()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 584
                self.walker_action()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(jacParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def elif_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Elif_stmtContext,i)


        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = jacParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(jacParser.KW_IF)
            self.state = 588
            self.expression()
            self.state = 589
            self.code_block()
            self.state = 593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 590
                    self.elif_stmt() 
                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 596
                self.else_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRY(self):
            return self.getToken(jacParser.KW_TRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def else_from_try(self):
            return self.getTypedRuleContext(jacParser.Else_from_tryContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)




    def try_stmt(self):

        localctx = jacParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(jacParser.KW_TRY)
            self.state = 600
            self.code_block()
            self.state = 602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 601
                self.else_from_try()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_from_tryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_from_try

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_from_try" ):
                listener.enterElse_from_try(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_from_try" ):
                listener.exitElse_from_try(self)




    def else_from_try(self):

        localctx = jacParser.Else_from_tryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_else_from_try)
        self._la = 0 # Token type
        try:
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self.match(jacParser.KW_ELSE)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LPAREN:
                    self.state = 605
                    self.match(jacParser.LPAREN)
                    self.state = 606
                    self.match(jacParser.NAME)
                    self.state = 607
                    self.match(jacParser.RPAREN)


                self.state = 610
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.match(jacParser.KW_ELSE)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.KW_WITH:
                    self.state = 612
                    self.match(jacParser.KW_WITH)
                    self.state = 613
                    self.match(jacParser.NAME)


                self.state = 616
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELIF(self):
            return self.getToken(jacParser.KW_ELIF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_elif_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_stmt" ):
                listener.enterElif_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_stmt" ):
                listener.exitElif_stmt(self)




    def elif_stmt(self):

        localctx = jacParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(jacParser.KW_ELIF)
            self.state = 620
            self.expression()
            self.state = 621
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_else_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_stmt" ):
                listener.enterElse_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_stmt" ):
                listener.exitElse_stmt(self)




    def else_stmt(self):

        localctx = jacParser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(jacParser.KW_ELSE)
            self.state = 624
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(jacParser.KW_FOR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def KW_TO(self):
            return self.getToken(jacParser.KW_TO, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = jacParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_for_stmt)
        try:
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.match(jacParser.KW_FOR)
                self.state = 627
                self.expression()
                self.state = 628
                self.match(jacParser.KW_TO)
                self.state = 629
                self.expression()
                self.state = 630
                self.match(jacParser.KW_BY)
                self.state = 631
                self.expression()
                self.state = 632
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(jacParser.KW_FOR)
                self.state = 635
                self.match(jacParser.NAME)
                self.state = 636
                self.match(jacParser.KW_IN)
                self.state = 637
                self.expression()
                self.state = 638
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(jacParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)




    def while_stmt(self):

        localctx = jacParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(jacParser.KW_WHILE)
            self.state = 643
            self.expression()
            self.state = 644
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ctrl_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTINUE(self):
            return self.getToken(jacParser.KW_CONTINUE, 0)

        def KW_BREAK(self):
            return self.getToken(jacParser.KW_BREAK, 0)

        def KW_SKIP(self):
            return self.getToken(jacParser.KW_SKIP, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ctrl_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtrl_stmt" ):
                listener.enterCtrl_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtrl_stmt" ):
                listener.exitCtrl_stmt(self)




    def ctrl_stmt(self):

        localctx = jacParser.Ctrl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ctrl_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (jacParser.KW_CONTINUE - 62)) | (1 << (jacParser.KW_BREAK - 62)) | (1 << (jacParser.KW_SKIP - 62)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASSERT(self):
            return self.getToken(jacParser.KW_ASSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)




    def assert_stmt(self):

        localctx = jacParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assert_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(jacParser.KW_ASSERT)
            self.state = 649
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destroy_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_destroy_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestroy_action" ):
                listener.enterDestroy_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestroy_action" ):
                listener.exitDestroy_action(self)




    def destroy_action(self):

        localctx = jacParser.Destroy_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_destroy_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(jacParser.KW_DESTROY)
            self.state = 652
            self.expression()
            self.state = 653
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Report_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPORT(self):
            return self.getToken(jacParser.KW_REPORT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_report_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReport_action" ):
                listener.enterReport_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReport_action" ):
                listener.exitReport_action(self)




    def report_action(self):

        localctx = jacParser.Report_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_report_action)
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.match(jacParser.KW_REPORT)
                self.state = 656
                self.expression()
                self.state = 657
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.match(jacParser.KW_REPORT)
                self.state = 660
                self.match(jacParser.DOT)
                self.state = 661
                self.match(jacParser.NAME)
                self.state = 662
                self.match(jacParser.EQ)
                self.state = 663
                self.match(jacParser.INT)
                self.state = 664
                self.match(jacParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ignore_action(self):
            return self.getTypedRuleContext(jacParser.Ignore_actionContext,0)


        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext,0)


        def KW_DISENGAGE(self):
            return self.getToken(jacParser.KW_DISENGAGE, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_action" ):
                listener.enterWalker_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_action" ):
                listener.exitWalker_action(self)




    def walker_action(self):

        localctx = jacParser.Walker_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_walker_action)
        try:
            self.state = 671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.ignore_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 668
                self.take_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 669
                self.match(jacParser.KW_DISENGAGE)
                self.state = 670
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IGNORE(self):
            return self.getToken(jacParser.KW_IGNORE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ignore_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_action" ):
                listener.enterIgnore_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_action" ):
                listener.exitIgnore_action(self)




    def ignore_action(self):

        localctx = jacParser.Ignore_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ignore_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(jacParser.KW_IGNORE)
            self.state = 674
            self.expression()
            self.state = 675
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Take_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TAKE(self):
            return self.getToken(jacParser.KW_TAKE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_take_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTake_action" ):
                listener.enterTake_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTake_action" ):
                listener.exitTake_action(self)




    def take_action(self):

        localctx = jacParser.Take_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_take_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(jacParser.KW_TAKE)
            self.state = 678
            self.expression()
            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.SEMI]:
                self.state = 679
                self.match(jacParser.SEMI)
                pass
            elif token in [jacParser.KW_ELSE]:
                self.state = 680
                self.else_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self):
            return self.getTypedRuleContext(jacParser.ConnectContext,0)


        def assignment(self):
            return self.getTypedRuleContext(jacParser.AssignmentContext,0)


        def copy_assign(self):
            return self.getTypedRuleContext(jacParser.Copy_assignContext,0)


        def inc_assign(self):
            return self.getTypedRuleContext(jacParser.Inc_assignContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = jacParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.connect()
            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 684
                self.assignment()

            elif la_ == 2:
                self.state = 685
                self.copy_assign()

            elif la_ == 3:
                self.state = 686
                self.inc_assign()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = jacParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(jacParser.EQ)
            self.state = 690
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CPY_EQ(self):
            return self.getToken(jacParser.CPY_EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_copy_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_assign" ):
                listener.enterCopy_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_assign" ):
                listener.exitCopy_assign(self)




    def copy_assign(self):

        localctx = jacParser.Copy_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_copy_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(jacParser.CPY_EQ)
            self.state = 693
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def PEQ(self):
            return self.getToken(jacParser.PEQ, 0)

        def MEQ(self):
            return self.getToken(jacParser.MEQ, 0)

        def TEQ(self):
            return self.getToken(jacParser.TEQ, 0)

        def DEQ(self):
            return self.getToken(jacParser.DEQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_inc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInc_assign" ):
                listener.enterInc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInc_assign" ):
                listener.exitInc_assign(self)




    def inc_assign(self):

        localctx = jacParser.Inc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_inc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.PEQ) | (1 << jacParser.MEQ) | (1 << jacParser.TEQ) | (1 << jacParser.DEQ))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 696
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical(self):
            return self.getTypedRuleContext(jacParser.LogicalContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnect" ):
                listener.enterConnect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnect" ):
                listener.exitConnect(self)




    def connect(self):

        localctx = jacParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_connect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.logical()
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.NOT:
                    self.state = 699
                    self.match(jacParser.NOT)


                self.state = 702
                self.edge_ref()
                self.state = 703
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.CompareContext)
            else:
                return self.getTypedRuleContext(jacParser.CompareContext,i)


        def KW_AND(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.KW_AND)
            else:
                return self.getToken(jacParser.KW_AND, i)

        def KW_OR(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.KW_OR)
            else:
                return self.getToken(jacParser.KW_OR, i)

        def getRuleIndex(self):
            return jacParser.RULE_logical

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical" ):
                listener.enterLogical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical" ):
                listener.exitLogical(self)




    def logical(self):

        localctx = jacParser.LogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_logical)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.compare()
            self.state = 712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 708
                    _la = self._input.LA(1)
                    if not(_la==jacParser.KW_AND or _la==jacParser.KW_OR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 709
                    self.compare() 
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def compare(self):
            return self.getTypedRuleContext(jacParser.CompareContext,0)


        def arithmetic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(jacParser.ArithmeticContext,i)


        def cmp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Cmp_opContext)
            else:
                return self.getTypedRuleContext(jacParser.Cmp_opContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_compare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompare" ):
                listener.enterCompare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompare" ):
                listener.exitCompare(self)




    def compare(self):

        localctx = jacParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_compare)
        try:
            self.state = 726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 715
                self.match(jacParser.NOT)
                self.state = 716
                self.compare()
                pass
            elif token in [jacParser.T__1, jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.TYP_STRING, jacParser.TYP_INT, jacParser.TYP_FLOAT, jacParser.TYP_LIST, jacParser.TYP_DICT, jacParser.TYP_BOOL, jacParser.KW_TYPE, jacParser.KW_NODE, jacParser.KW_SPAWN, jacParser.DBL_COLON, jacParser.LBRACE, jacParser.KW_EDGE, jacParser.KW_GLOBAL, jacParser.PLUS, jacParser.MINUS, jacParser.STAR_MUL, jacParser.LPAREN, jacParser.LSQUARE, jacParser.FLOAT, jacParser.STRING, jacParser.BOOL, jacParser.INT, jacParser.NULL, jacParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.arithmetic()
                self.state = 723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 718
                        self.cmp_op()
                        self.state = 719
                        self.arithmetic() 
                    self.state = 725
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cmp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(jacParser.EE, 0)

        def LT(self):
            return self.getToken(jacParser.LT, 0)

        def GT(self):
            return self.getToken(jacParser.GT, 0)

        def LTE(self):
            return self.getToken(jacParser.LTE, 0)

        def GTE(self):
            return self.getToken(jacParser.GTE, 0)

        def NE(self):
            return self.getToken(jacParser.NE, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def nin(self):
            return self.getTypedRuleContext(jacParser.NinContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_cmp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmp_op" ):
                listener.enterCmp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmp_op" ):
                listener.exitCmp_op(self)




    def cmp_op(self):

        localctx = jacParser.Cmp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_cmp_op)
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.EE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.match(jacParser.EE)
                pass
            elif token in [jacParser.LT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self.match(jacParser.LT)
                pass
            elif token in [jacParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 730
                self.match(jacParser.GT)
                pass
            elif token in [jacParser.LTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 731
                self.match(jacParser.LTE)
                pass
            elif token in [jacParser.GTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 732
                self.match(jacParser.GTE)
                pass
            elif token in [jacParser.NE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 733
                self.match(jacParser.NE)
                pass
            elif token in [jacParser.KW_IN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 734
                self.match(jacParser.KW_IN)
                pass
            elif token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 735
                self.nin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_nin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNin" ):
                listener.enterNin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNin" ):
                listener.exitNin(self)




    def nin(self):

        localctx = jacParser.NinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_nin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(jacParser.NOT)
            self.state = 739
            self.match(jacParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.TermContext)
            else:
                return self.getTypedRuleContext(jacParser.TermContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.PLUS)
            else:
                return self.getToken(jacParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.MINUS)
            else:
                return self.getToken(jacParser.MINUS, i)

        def getRuleIndex(self):
            return jacParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)




    def arithmetic(self):

        localctx = jacParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.term()
            self.state = 746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 742
                    _la = self._input.LA(1)
                    if not(_la==jacParser.PLUS or _la==jacParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 743
                    self.term() 
                self.state = 748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext,i)


        def STAR_MUL(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.STAR_MUL)
            else:
                return self.getToken(jacParser.STAR_MUL, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.DIV)
            else:
                return self.getToken(jacParser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.MOD)
            else:
                return self.getToken(jacParser.MOD, i)

        def getRuleIndex(self):
            return jacParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = jacParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.factor()
            self.state = 754
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 750
                    _la = self._input.LA(1)
                    if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (jacParser.STAR_MUL - 86)) | (1 << (jacParser.DIV - 86)) | (1 << (jacParser.MOD - 86)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 751
                    self.factor() 
                self.state = 756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(jacParser.FactorContext,0)


        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def power(self):
            return self.getTypedRuleContext(jacParser.PowerContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = jacParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                _la = self._input.LA(1)
                if not(_la==jacParser.PLUS or _la==jacParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 758
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                self.power()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext,0)


        def POW(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.POW)
            else:
                return self.getToken(jacParser.POW, i)

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)




    def power(self):

        localctx = jacParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.atom(0)
            self.state = 767
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 763
                    self.match(jacParser.POW)
                    self.state = 764
                    self.factor() 
                self.state = 769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def BOOL(self):
            return self.getToken(jacParser.BOOL, 0)

        def NULL(self):
            return self.getToken(jacParser.NULL, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext,0)


        def list_val(self):
            return self.getTypedRuleContext(jacParser.List_valContext,0)


        def dict_val(self):
            return self.getTypedRuleContext(jacParser.Dict_valContext,0)


        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def spawn(self):
            return self.getTypedRuleContext(jacParser.SpawnContext,0)


        def ref(self):
            return self.getTypedRuleContext(jacParser.RefContext,0)


        def deref(self):
            return self.getTypedRuleContext(jacParser.DerefContext,0)


        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext,0)


        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext,0)


        def atom_trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Atom_trailerContext)
            else:
                return self.getTypedRuleContext(jacParser.Atom_trailerContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)



    def atom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = jacParser.AtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_atom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 771
                self.match(jacParser.INT)
                pass

            elif la_ == 2:
                self.state = 772
                self.match(jacParser.FLOAT)
                pass

            elif la_ == 3:
                self.state = 773
                self.match(jacParser.STRING)
                pass

            elif la_ == 4:
                self.state = 774
                self.match(jacParser.BOOL)
                pass

            elif la_ == 5:
                self.state = 775
                self.match(jacParser.NULL)
                pass

            elif la_ == 6:
                self.state = 776
                self.match(jacParser.NAME)
                pass

            elif la_ == 7:
                self.state = 777
                self.match(jacParser.KW_GLOBAL)
                self.state = 778
                self.match(jacParser.DOT)
                self.state = 779
                self.match(jacParser.NAME)
                pass

            elif la_ == 8:
                self.state = 780
                self.node_edge_ref()
                pass

            elif la_ == 9:
                self.state = 781
                self.list_val()
                pass

            elif la_ == 10:
                self.state = 782
                self.dict_val()
                pass

            elif la_ == 11:
                self.state = 783
                self.match(jacParser.LPAREN)
                self.state = 784
                self.expression()
                self.state = 785
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 12:
                self.state = 787
                self.match(jacParser.DBL_COLON)
                self.state = 788
                self.match(jacParser.NAME)
                self.state = 790
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 789
                    self.spawn_ctx()


                pass

            elif la_ == 13:
                self.state = 792
                self.spawn()
                pass

            elif la_ == 14:
                self.state = 793
                self.ref()
                pass

            elif la_ == 15:
                self.state = 794
                self.deref()
                pass

            elif la_ == 16:
                self.state = 795
                self.any_type()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 806
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                    self.state = 798
                    if not self.precpred(self._ctx, 5):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                    self.state = 800 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 799
                            self.atom_trailer()

                        else:
                            raise NoViableAltException(self)
                        self.state = 802 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
             
                self.state = 808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Atom_trailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def built_in(self):
            return self.getTypedRuleContext(jacParser.Built_inContext,0)


        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def index_slice(self):
            return self.getTypedRuleContext(jacParser.Index_sliceContext,0)


        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_atom_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_trailer" ):
                listener.enterAtom_trailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_trailer" ):
                listener.exitAtom_trailer(self)




    def atom_trailer(self):

        localctx = jacParser.Atom_trailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_atom_trailer)
        self._la = 0 # Token type
        try:
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.match(jacParser.DOT)
                self.state = 810
                self.built_in()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.match(jacParser.DOT)
                self.state = 812
                self.match(jacParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.index_slice()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 814
                self.match(jacParser.LPAREN)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (jacParser.NOT - 70)) | (1 << (jacParser.KW_GLOBAL - 70)) | (1 << (jacParser.PLUS - 70)) | (1 << (jacParser.MINUS - 70)) | (1 << (jacParser.STAR_MUL - 70)) | (1 << (jacParser.LPAREN - 70)) | (1 << (jacParser.LSQUARE - 70)) | (1 << (jacParser.FLOAT - 70)) | (1 << (jacParser.STRING - 70)) | (1 << (jacParser.BOOL - 70)) | (1 << (jacParser.INT - 70)) | (1 << (jacParser.NULL - 70)) | (1 << (jacParser.NAME - 70)))) != 0):
                    self.state = 815
                    self.expr_list()


                self.state = 818
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 819
                self.match(jacParser.DBL_COLON)
                self.state = 820
                self.match(jacParser.NAME)
                self.state = 822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 821
                    self.spawn_ctx()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef" ):
                listener.enterRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef" ):
                listener.exitRef(self)




    def ref(self):

        localctx = jacParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(jacParser.T__1)
            self.state = 827
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)




    def deref(self):

        localctx = jacParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(jacParser.STAR_MUL)
            self.state = 830
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_built_in(self):
            return self.getTypedRuleContext(jacParser.String_built_inContext,0)


        def dict_built_in(self):
            return self.getTypedRuleContext(jacParser.Dict_built_inContext,0)


        def list_built_in(self):
            return self.getTypedRuleContext(jacParser.List_built_inContext,0)


        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext,0)


        def cast_built_in(self):
            return self.getTypedRuleContext(jacParser.Cast_built_inContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuilt_in" ):
                listener.enterBuilt_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuilt_in" ):
                listener.exitBuilt_in(self)




    def built_in(self):

        localctx = jacParser.Built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_built_in)
        try:
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.string_built_in()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 834
                self.dict_built_in()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 835
                self.list_built_in()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 836
                self.obj_built_in()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 837
                self.cast_built_in()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_cast_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_built_in" ):
                listener.enterCast_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_built_in" ):
                listener.exitCast_built_in(self)




    def cast_built_in(self):

        localctx = jacParser.Cast_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_cast_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Obj_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(jacParser.KW_CONTEXT, 0)

        def KW_INFO(self):
            return self.getToken(jacParser.KW_INFO, 0)

        def KW_DETAILS(self):
            return self.getToken(jacParser.KW_DETAILS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_obj_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObj_built_in" ):
                listener.enterObj_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObj_built_in" ):
                listener.exitObj_built_in(self)




    def obj_built_in(self):

        localctx = jacParser.Obj_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_obj_built_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_CONTEXT) | (1 << jacParser.KW_INFO) | (1 << jacParser.KW_DETAILS))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dict_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KEYS(self):
            return self.getToken(jacParser.KW_KEYS, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def DICT_DBL_COLON(self):
            return self.getToken(jacParser.DICT_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dict_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_built_in" ):
                listener.enterDict_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_built_in" ):
                listener.exitDict_built_in(self)




    def dict_built_in(self):

        localctx = jacParser.Dict_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dict_built_in)
        self._la = 0 # Token type
        try:
            self.state = 861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_KEYS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.match(jacParser.KW_KEYS)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.match(jacParser.LBRACE)
                self.state = 846
                self.name_list()
                self.state = 847
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.TYP_DICT, jacParser.DICT_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_DICT]:
                    self.state = 849
                    self.match(jacParser.TYP_DICT)
                    self.state = 850
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.DICT_DBL_COLON]:
                    self.state = 851
                    self.match(jacParser.DICT_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 854
                _la = self._input.LA(1)
                if not(_la==jacParser.KW_KEYS or _la==jacParser.NAME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 859
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 855
                    self.match(jacParser.LPAREN)
                    self.state = 856
                    self.expr_list()
                    self.state = 857
                    self.match(jacParser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LENGTH(self):
            return self.getToken(jacParser.KW_LENGTH, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def LIST_DBL_COLON(self):
            return self.getToken(jacParser.LIST_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_built_in" ):
                listener.enterList_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_built_in" ):
                listener.exitList_built_in(self)




    def list_built_in(self):

        localctx = jacParser.List_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_list_built_in)
        try:
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_LENGTH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                self.match(jacParser.KW_LENGTH)
                pass
            elif token in [jacParser.TYP_LIST, jacParser.LIST_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_LIST]:
                    self.state = 864
                    self.match(jacParser.TYP_LIST)
                    self.state = 865
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.LIST_DBL_COLON]:
                    self.state = 866
                    self.match(jacParser.LIST_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 869
                self.match(jacParser.NAME)
                self.state = 874
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 870
                    self.match(jacParser.LPAREN)
                    self.state = 871
                    self.expr_list()
                    self.state = 872
                    self.match(jacParser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_built_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def STR_DBL_COLON(self):
            return self.getToken(jacParser.STR_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_string_built_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_built_in" ):
                listener.enterString_built_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_built_in" ):
                listener.exitString_built_in(self)




    def string_built_in(self):

        localctx = jacParser.String_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_string_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.TYP_STRING]:
                self.state = 878
                self.match(jacParser.TYP_STRING)
                self.state = 879
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.STR_DBL_COLON]:
                self.state = 880
                self.match(jacParser.STR_DBL_COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 883
            self.match(jacParser.NAME)
            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 884
                self.match(jacParser.LPAREN)
                self.state = 885
                self.expr_list()
                self.state = 886
                self.match(jacParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_edge_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_edge_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_edge_ref" ):
                listener.enterNode_edge_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_edge_ref" ):
                listener.exitNode_edge_ref(self)




    def node_edge_ref(self):

        localctx = jacParser.Node_edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_node_edge_ref)
        try:
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self.node_ref()
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 891
                    self.filter_ctx()


                pass
            elif token in [jacParser.T__2, jacParser.T__4, jacParser.T__5, jacParser.T__6, jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.edge_ref()
                self.state = 899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 895
                    self.node_ref()
                    self.state = 897
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                    if la_ == 1:
                        self.state = 896
                        self.filter_ctx()




                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_ref" ):
                listener.enterNode_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_ref" ):
                listener.exitNode_ref(self)




    def node_ref(self):

        localctx = jacParser.Node_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_node_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(jacParser.KW_NODE)
            self.state = 904
            self.match(jacParser.DBL_COLON)
            self.state = 905
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_ref" ):
                listener.enterWalker_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_ref" ):
                listener.exitWalker_ref(self)




    def walker_ref(self):

        localctx = jacParser.Walker_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_walker_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(jacParser.KW_WALKER)
            self.state = 908
            self.match(jacParser.DBL_COLON)
            self.state = 909
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_ref" ):
                listener.enterGraph_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_ref" ):
                listener.exitGraph_ref(self)




    def graph_ref(self):

        localctx = jacParser.Graph_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_graph_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(jacParser.KW_GRAPH)
            self.state = 912
            self.match(jacParser.DBL_COLON)
            self.state = 913
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_to(self):
            return self.getTypedRuleContext(jacParser.Edge_toContext,0)


        def edge_from(self):
            return self.getTypedRuleContext(jacParser.Edge_fromContext,0)


        def edge_any(self):
            return self.getTypedRuleContext(jacParser.Edge_anyContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_ref" ):
                listener.enterEdge_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_ref" ):
                listener.exitEdge_ref(self)




    def edge_ref(self):

        localctx = jacParser.Edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_edge_ref)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.edge_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.edge_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.edge_any()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_toContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_to

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_to" ):
                listener.enterEdge_to(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_to" ):
                listener.exitEdge_to(self)




    def edge_to(self):

        localctx = jacParser.Edge_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_edge_to)
        self._la = 0 # Token type
        try:
            self.state = 932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 920
                self.match(jacParser.T__2)
                pass
            elif token in [jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 921
                self.match(jacParser.MINUS)
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 922
                    self.match(jacParser.LSQUARE)
                    self.state = 923
                    self.match(jacParser.NAME)
                    self.state = 926
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                    if la_ == 1:
                        self.state = 924
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 925
                        self.filter_ctx()


                    self.state = 928
                    self.match(jacParser.RSQUARE)


                self.state = 931
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_from" ):
                listener.enterEdge_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_from" ):
                listener.exitEdge_from(self)




    def edge_from(self):

        localctx = jacParser.Edge_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_edge_from)
        self._la = 0 # Token type
        try:
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.match(jacParser.T__4)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 935
                self.match(jacParser.T__5)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 936
                    self.match(jacParser.LSQUARE)
                    self.state = 937
                    self.match(jacParser.NAME)
                    self.state = 940
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        self.state = 938
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 939
                        self.filter_ctx()


                    self.state = 942
                    self.match(jacParser.RSQUARE)


                self.state = 945
                self.match(jacParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Edge_anyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_edge_any

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEdge_any" ):
                listener.enterEdge_any(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEdge_any" ):
                listener.exitEdge_any(self)




    def edge_any(self):

        localctx = jacParser.Edge_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_edge_any)
        self._la = 0 # Token type
        try:
            self.state = 960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.match(jacParser.T__6)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self.match(jacParser.T__5)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.LSQUARE:
                    self.state = 950
                    self.match(jacParser.LSQUARE)
                    self.state = 951
                    self.match(jacParser.NAME)
                    self.state = 954
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        self.state = 952
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 953
                        self.filter_ctx()


                    self.state = 956
                    self.match(jacParser.RSQUARE)


                self.state = 959
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_list_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_val" ):
                listener.enterList_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_val" ):
                listener.exitList_val(self)




    def list_val(self):

        localctx = jacParser.List_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_list_val)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(jacParser.LSQUARE)
            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (jacParser.NOT - 70)) | (1 << (jacParser.KW_GLOBAL - 70)) | (1 << (jacParser.PLUS - 70)) | (1 << (jacParser.MINUS - 70)) | (1 << (jacParser.STAR_MUL - 70)) | (1 << (jacParser.LPAREN - 70)) | (1 << (jacParser.LSQUARE - 70)) | (1 << (jacParser.FLOAT - 70)) | (1 << (jacParser.STRING - 70)) | (1 << (jacParser.BOOL - 70)) | (1 << (jacParser.INT - 70)) | (1 << (jacParser.NULL - 70)) | (1 << (jacParser.NAME - 70)))) != 0):
                self.state = 963
                self.expr_list()


            self.state = 966
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_sliceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext,i)


        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index_slice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_slice" ):
                listener.enterIndex_slice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_slice" ):
                listener.exitIndex_slice(self)




    def index_slice(self):

        localctx = jacParser.Index_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_index_slice)
        try:
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.match(jacParser.LSQUARE)
                self.state = 969
                self.expression()
                self.state = 970
                self.match(jacParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 972
                self.match(jacParser.LSQUARE)
                self.state = 973
                self.expression()
                self.state = 974
                self.match(jacParser.COLON)
                self.state = 975
                self.expression()
                self.state = 976
                self.match(jacParser.RSQUARE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dict_valContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def kv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(jacParser.Kv_pairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dict_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_val" ):
                listener.enterDict_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_val" ):
                listener.exitDict_val(self)




    def dict_val(self):

        localctx = jacParser.Dict_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_dict_val)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(jacParser.LBRACE)
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.STRING:
                self.state = 981
                self.kv_pair()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 982
                    self.match(jacParser.COMMA)
                    self.state = 983
                    self.kv_pair()
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 991
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_kv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKv_pair" ):
                listener.enterKv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKv_pair" ):
                listener.exitKv_pair(self)




    def kv_pair(self):

        localctx = jacParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(jacParser.STRING)
            self.state = 994
            self.match(jacParser.COLON)
            self.state = 995
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def spawn_object(self):
            return self.getTypedRuleContext(jacParser.Spawn_objectContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn" ):
                listener.enterSpawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn" ):
                listener.exitSpawn(self)




    def spawn(self):

        localctx = jacParser.SpawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(jacParser.KW_SPAWN)
            self.state = 998
            self.spawn_object()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_spawn(self):
            return self.getTypedRuleContext(jacParser.Node_spawnContext,0)


        def walker_spawn(self):
            return self.getTypedRuleContext(jacParser.Walker_spawnContext,0)


        def graph_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_spawnContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_object" ):
                listener.enterSpawn_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_object" ):
                listener.exitSpawn_object(self)




    def spawn_object(self):

        localctx = jacParser.Spawn_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_spawn_object)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.node_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.walker_spawn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1002
                self.graph_spawn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_edgeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn_edge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_edge" ):
                listener.enterSpawn_edge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_edge" ):
                listener.exitSpawn_edge(self)




    def spawn_edge(self):

        localctx = jacParser.Spawn_edgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_spawn_edge)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.expression()
            self.state = 1006
            self.edge_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Node_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext,0)


        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext,0)


        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_node_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode_spawn" ):
                listener.enterNode_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode_spawn" ):
                listener.exitNode_spawn(self)




    def node_spawn(self):

        localctx = jacParser.Node_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_node_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1008
                self.spawn_edge()


            self.state = 1011
            self.node_ref()
            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1012
                self.spawn_ctx()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext,0)


        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_graph_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_spawn" ):
                listener.enterGraph_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_spawn" ):
                listener.exitGraph_spawn(self)




    def graph_spawn(self):

        localctx = jacParser.Graph_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_graph_spawn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.T__1) | (1 << jacParser.T__2) | (1 << jacParser.T__4) | (1 << jacParser.T__5) | (1 << jacParser.T__6) | (1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_SPAWN) | (1 << jacParser.DBL_COLON) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (jacParser.NOT - 70)) | (1 << (jacParser.KW_GLOBAL - 70)) | (1 << (jacParser.PLUS - 70)) | (1 << (jacParser.MINUS - 70)) | (1 << (jacParser.STAR_MUL - 70)) | (1 << (jacParser.LPAREN - 70)) | (1 << (jacParser.LSQUARE - 70)) | (1 << (jacParser.FLOAT - 70)) | (1 << (jacParser.STRING - 70)) | (1 << (jacParser.BOOL - 70)) | (1 << (jacParser.INT - 70)) | (1 << (jacParser.NULL - 70)) | (1 << (jacParser.NAME - 70)))) != 0):
                self.state = 1015
                self.spawn_edge()


            self.state = 1018
            self.graph_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Walker_spawnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext,0)


        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_walker_spawn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWalker_spawn" ):
                listener.enterWalker_spawn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWalker_spawn" ):
                listener.exitWalker_spawn(self)




    def walker_spawn(self):

        localctx = jacParser.Walker_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_walker_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.expression()
            self.state = 1021
            self.walker_ref()
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.spawn_ctx()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_ctxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Spawn_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Spawn_assignContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_ctx

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_ctx" ):
                listener.enterSpawn_ctx(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_ctx" ):
                listener.exitSpawn_ctx(self)




    def spawn_ctx(self):

        localctx = jacParser.Spawn_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_spawn_ctx)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(jacParser.LPAREN)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 1026
                self.spawn_assign()
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 1027
                    self.match(jacParser.COMMA)
                    self.state = 1028
                    self.spawn_assign()
                    self.state = 1033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1036
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_ctxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def filter_compare(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Filter_compareContext)
            else:
                return self.getTypedRuleContext(jacParser.Filter_compareContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_filter_ctx

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_ctx" ):
                listener.enterFilter_ctx(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_ctx" ):
                listener.exitFilter_ctx(self)




    def filter_ctx(self):

        localctx = jacParser.Filter_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_filter_ctx)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(jacParser.LPAREN)
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.NAME:
                self.state = 1039
                self.filter_compare()
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==jacParser.COMMA:
                    self.state = 1040
                    self.match(jacParser.COMMA)
                    self.state = 1041
                    self.filter_compare()
                    self.state = 1046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1049
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spawn_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_spawn_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpawn_assign" ):
                listener.enterSpawn_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpawn_assign" ):
                listener.exitSpawn_assign(self)




    def spawn_assign(self):

        localctx = jacParser.Spawn_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_spawn_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(jacParser.NAME)
            self.state = 1052
            self.match(jacParser.EQ)
            self.state = 1053
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_compareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def cmp_op(self):
            return self.getTypedRuleContext(jacParser.Cmp_opContext,0)


        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_filter_compare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_compare" ):
                listener.enterFilter_compare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_compare" ):
                listener.exitFilter_compare(self)




    def filter_compare(self):

        localctx = jacParser.Filter_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_filter_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(jacParser.NAME)
            self.state = 1056
            self.cmp_op()
            self.state = 1057
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def TYP_INT(self):
            return self.getToken(jacParser.TYP_INT, 0)

        def TYP_FLOAT(self):
            return self.getToken(jacParser.TYP_FLOAT, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def TYP_BOOL(self):
            return self.getToken(jacParser.TYP_BOOL, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_type" ):
                listener.enterAny_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_type" ):
                listener.exitAny_type(self)




    def any_type(self):

        localctx = jacParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_any_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.TYP_STRING) | (1 << jacParser.TYP_INT) | (1 << jacParser.TYP_FLOAT) | (1 << jacParser.TYP_LIST) | (1 << jacParser.TYP_DICT) | (1 << jacParser.TYP_BOOL) | (1 << jacParser.KW_TYPE) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_graphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_DIGRAPH(self):
            return self.getToken(jacParser.KW_DIGRAPH, 0)

        def KW_STRICT(self):
            return self.getToken(jacParser.KW_STRICT, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_graph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_graph" ):
                listener.enterDot_graph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_graph" ):
                listener.exitDot_graph(self)




    def dot_graph(self):

        localctx = jacParser.Dot_graphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_dot_graph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_STRICT:
                self.state = 1061
                self.match(jacParser.KW_STRICT)


            self.state = 1064
            _la = self._input.LA(1)
            if not(_la==jacParser.KW_GRAPH or _la==jacParser.KW_DIGRAPH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (jacParser.FLOAT - 94)) | (1 << (jacParser.STRING - 94)) | (1 << (jacParser.INT - 94)) | (1 << (jacParser.NAME - 94)))) != 0):
                self.state = 1065
                self.dot_id()


            self.state = 1068
            self.match(jacParser.LBRACE)
            self.state = 1069
            self.dot_stmt_list()
            self.state = 1070
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_stmtContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.SEMI)
            else:
                return self.getToken(jacParser.SEMI, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_stmt_list" ):
                listener.enterDot_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_stmt_list" ):
                listener.exitDot_stmt_list(self)




    def dot_stmt_list(self):

        localctx = jacParser.Dot_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dot_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_SUBGRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.LBRACE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (jacParser.FLOAT - 94)) | (1 << (jacParser.STRING - 94)) | (1 << (jacParser.INT - 94)) | (1 << (jacParser.NAME - 94)))) != 0):
                self.state = 1072
                self.dot_stmt()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.SEMI:
                    self.state = 1073
                    self.match(jacParser.SEMI)


                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_node_stmtContext,0)


        def dot_edge_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_edge_stmtContext,0)


        def dot_attr_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_stmtContext,0)


        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_stmt" ):
                listener.enterDot_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_stmt" ):
                listener.exitDot_stmt(self)




    def dot_stmt(self):

        localctx = jacParser.Dot_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dot_stmt)
        try:
            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self.dot_node_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.dot_edge_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.dot_attr_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1084
                self.dot_id()
                self.state = 1085
                self.match(jacParser.EQ)
                self.state = 1086
                self.dot_id()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1088
                self.dot_subgraph()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_attr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_attr_stmt" ):
                listener.enterDot_attr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_attr_stmt" ):
                listener.exitDot_attr_stmt(self)




    def dot_attr_stmt(self):

        localctx = jacParser.Dot_attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_dot_attr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1092
            self.dot_attr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_attr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.LSQUARE)
            else:
                return self.getToken(jacParser.LSQUARE, i)

        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.RSQUARE)
            else:
                return self.getToken(jacParser.RSQUARE, i)

        def dot_a_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_a_listContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_a_listContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_attr_list" ):
                listener.enterDot_attr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_attr_list" ):
                listener.exitDot_attr_list(self)




    def dot_attr_list(self):

        localctx = jacParser.Dot_attr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dot_attr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1094
                self.match(jacParser.LSQUARE)
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (jacParser.FLOAT - 94)) | (1 << (jacParser.STRING - 94)) | (1 << (jacParser.INT - 94)) | (1 << (jacParser.NAME - 94)))) != 0):
                    self.state = 1095
                    self.dot_a_list()


                self.state = 1098
                self.match(jacParser.RSQUARE)
                self.state = 1101 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==jacParser.LSQUARE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_a_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_a_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_a_list" ):
                listener.enterDot_a_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_a_list" ):
                listener.exitDot_a_list(self)




    def dot_a_list(self):

        localctx = jacParser.Dot_a_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dot_a_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1103
                self.dot_id()
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.EQ:
                    self.state = 1104
                    self.match(jacParser.EQ)
                    self.state = 1105
                    self.dot_id()


                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==jacParser.COMMA:
                    self.state = 1108
                    self.match(jacParser.COMMA)


                self.state = 1113 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (jacParser.FLOAT - 94)) | (1 << (jacParser.STRING - 94)) | (1 << (jacParser.INT - 94)) | (1 << (jacParser.NAME - 94)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edge_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeRHS(self):
            return self.getTypedRuleContext(jacParser.Dot_edgeRHSContext,0)


        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext,0)


        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext,0)


        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_edge_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edge_stmt" ):
                listener.enterDot_edge_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edge_stmt" ):
                listener.exitDot_edge_stmt(self)




    def dot_edge_stmt(self):

        localctx = jacParser.Dot_edge_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_dot_edge_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE, jacParser.FLOAT, jacParser.STRING, jacParser.INT, jacParser.NAME]:
                self.state = 1115
                self.dot_node_id()
                pass
            elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                self.state = 1116
                self.dot_subgraph()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1119
            self.dot_edgeRHS()
            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.LSQUARE:
                self.state = 1120
                self.dot_attr_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edgeRHSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_edgeopContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_edgeopContext,i)


        def dot_node_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_node_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_node_idContext,i)


        def dot_subgraph(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_subgraphContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_subgraphContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edgeRHS" ):
                listener.enterDot_edgeRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edgeRHS" ):
                listener.exitDot_edgeRHS(self)




    def dot_edgeRHS(self):

        localctx = jacParser.Dot_edgeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dot_edgeRHS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1123
                self.dot_edgeop()
                self.state = 1126
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE, jacParser.FLOAT, jacParser.STRING, jacParser.INT, jacParser.NAME]:
                    self.state = 1124
                    self.dot_node_id()
                    pass
                elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                    self.state = 1125
                    self.dot_subgraph()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1130 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==jacParser.T__3 or _la==jacParser.T__7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_edgeopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_edgeop" ):
                listener.enterDot_edgeop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_edgeop" ):
                listener.exitDot_edgeop(self)




    def dot_edgeop(self):

        localctx = jacParser.Dot_edgeopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_dot_edgeop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            _la = self._input.LA(1)
            if not(_la==jacParser.T__3 or _la==jacParser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_node_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext,0)


        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_node_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_node_stmt" ):
                listener.enterDot_node_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_node_stmt" ):
                listener.exitDot_node_stmt(self)




    def dot_node_stmt(self):

        localctx = jacParser.Dot_node_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_dot_node_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.dot_node_id()
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.LSQUARE:
                self.state = 1135
                self.dot_attr_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_node_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def dot_port(self):
            return self.getTypedRuleContext(jacParser.Dot_portContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_node_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_node_id" ):
                listener.enterDot_node_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_node_id" ):
                listener.exitDot_node_id(self)




    def dot_node_id(self):

        localctx = jacParser.Dot_node_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dot_node_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.dot_id()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 1139
                self.dot_port()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_portContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def dot_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext,i)


        def getRuleIndex(self):
            return jacParser.RULE_dot_port

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_port" ):
                listener.enterDot_port(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_port" ):
                listener.exitDot_port(self)




    def dot_port(self):

        localctx = jacParser.Dot_portContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_dot_port)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(jacParser.COLON)
            self.state = 1143
            self.dot_id()
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.COLON:
                self.state = 1144
                self.match(jacParser.COLON)
                self.state = 1145
                self.dot_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_subgraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_SUBGRAPH(self):
            return self.getToken(jacParser.KW_SUBGRAPH, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext,0)


        def getRuleIndex(self):
            return jacParser.RULE_dot_subgraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_subgraph" ):
                listener.enterDot_subgraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_subgraph" ):
                listener.exitDot_subgraph(self)




    def dot_subgraph(self):

        localctx = jacParser.Dot_subgraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_dot_subgraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==jacParser.KW_SUBGRAPH:
                self.state = 1148
                self.match(jacParser.KW_SUBGRAPH)
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (jacParser.FLOAT - 94)) | (1 << (jacParser.STRING - 94)) | (1 << (jacParser.INT - 94)) | (1 << (jacParser.NAME - 94)))) != 0):
                    self.state = 1149
                    self.dot_id()




            self.state = 1154
            self.match(jacParser.LBRACE)
            self.state = 1155
            self.dot_stmt_list()
            self.state = 1156
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_id" ):
                listener.enterDot_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_id" ):
                listener.exitDot_id(self)




    def dot_id(self):

        localctx = jacParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_dot_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << jacParser.KW_GRAPH) | (1 << jacParser.KW_NODE) | (1 << jacParser.KW_EDGE))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (jacParser.FLOAT - 94)) | (1 << (jacParser.STRING - 94)) | (1 << (jacParser.INT - 94)) | (1 << (jacParser.NAME - 94)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[60] = self.atom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def atom_sempred(self, localctx:AtomContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         




