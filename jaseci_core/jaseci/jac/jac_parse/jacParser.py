# Generated from jac.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3l")
        buf.write("\u04bb\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\3\2\5\2")
        buf.write("\u00e0\n\2\3\2\7\2\u00e3\n\2\f\2\16\2\u00e6\13\2\3\2\7")
        buf.write("\2\u00e9\n\2\f\2\16\2\u00ec\13\2\3\2\3\2\3\3\3\3\3\3\3")
        buf.write("\3\5\3\u00f4\n\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\5")
        buf.write("\4\u00ff\n\4\3\5\3\5\3\5\5\5\u0104\n\5\3\5\3\5\5\5\u0108")
        buf.write("\n\5\3\5\3\5\3\5\5\5\u010d\n\5\3\5\3\5\5\5\u0111\n\5\3")
        buf.write("\5\3\5\3\5\5\5\u0116\n\5\3\5\3\5\5\5\u011a\n\5\3\5\3\5")
        buf.write("\3\5\5\5\u011f\n\5\3\5\3\5\5\5\u0123\n\5\3\5\3\5\3\5\5")
        buf.write("\5\u0128\n\5\3\5\3\5\5\5\u012c\n\5\5\5\u012e\n\5\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u0137\n\6\3\7\3\7\3\7\3\7\5")
        buf.write("\7\u013d\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0147")
        buf.write("\n\b\f\b\16\b\u014a\13\b\3\b\3\b\3\t\3\t\3\t\3\t\7\t\u0152")
        buf.write("\n\t\f\t\16\t\u0155\13\t\3\t\3\t\5\t\u0159\n\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\7\t\u0160\n\t\f\t\16\t\u0163\13\t\3\t\3\t")
        buf.write("\3\t\3\t\5\t\u0169\n\t\3\n\3\n\3\n\5\n\u016e\n\n\3\n\3")
        buf.write("\n\3\13\3\13\7\13\u0174\n\13\f\13\16\13\u0177\13\13\3")
        buf.write("\13\5\13\u017a\n\13\3\13\3\13\7\13\u017e\n\13\f\13\16")
        buf.write("\13\u0181\13\13\3\13\5\13\u0184\n\13\3\13\3\13\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\5\f\u018e\n\f\3\f\3\f\3\f\5\f\u0193\n")
        buf.write("\f\3\f\3\f\5\f\u0197\n\f\3\f\3\f\5\f\u019b\n\f\3\r\3\r")
        buf.write("\3\r\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20")
        buf.write("\3\20\3\20\3\21\3\21\7\21\u01ae\n\21\f\21\16\21\u01b1")
        buf.write("\13\21\3\21\3\21\3\21\3\21\5\21\u01b7\n\21\3\22\3\22\5")
        buf.write("\22\u01bb\n\22\3\23\7\23\u01be\n\23\f\23\16\23\u01c1\13")
        buf.write("\23\3\24\3\24\5\24\u01c5\n\24\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u01d5")
        buf.write("\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\5\26\u01e1\n\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\5")
        buf.write("\30\u01ea\n\30\3\30\5\30\u01ed\n\30\3\30\3\30\3\30\7\30")
        buf.write("\u01f2\n\30\f\30\16\30\u01f5\13\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u01fd\n\31\3\32\3\32\3\32\3\32\3\32\5")
        buf.write("\32\u0204\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u020b\n\32")
        buf.write("\7\32\u020d\n\32\f\32\16\32\u0210\13\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u0217\n\32\3\32\5\32\u021a\n\32\3\33\3")
        buf.write("\33\5\33\u021e\n\33\3\33\3\33\3\34\3\34\5\34\u0224\n\34")
        buf.write("\3\34\3\34\3\34\5\34\u0229\n\34\3\35\3\35\3\35\3\35\3")
        buf.write("\36\3\36\3\36\7\36\u0232\n\36\f\36\16\36\u0235\13\36\3")
        buf.write("\37\3\37\3\37\7\37\u023a\n\37\f\37\16\37\u023d\13\37\3")
        buf.write(" \3 \7 \u0241\n \f \16 \u0244\13 \3 \3 \3 \5 \u0249\n")
        buf.write(' \3!\3!\3!\3"\3"\3"\3"\3"\3"\3"\3"\3"\3"\3"')
        buf.write('\3"\3"\3"\3"\3"\3"\3"\5"\u0260\n"\3#\3#\3#\3')
        buf.write("#\7#\u0266\n#\f#\16#\u0269\13#\3#\5#\u026c\n#\3$\3$\3")
        buf.write("$\5$\u0271\n$\3%\3%\3%\7%\u0276\n%\f%\16%\u0279\13%\3")
        buf.write("%\3%\3%\5%\u027e\n%\3&\3&\3&\3&\5&\u0284\n&\3&\3&\3&\3")
        buf.write("&\5&\u028a\n&\3&\5&\u028d\n&\3'\3'\3'\3'\3(\3(\3(")
        buf.write("\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u02a4\n")
        buf.write(")\3*\3*\3*\3*\3+\3+\3,\3,\3,\3-\3-\3-\3-\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\5.\u02be\n.\3/\3/\3/\3/\3/\5/\u02c5")
        buf.write("\n/\5/\u02c7\n/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61")
        buf.write("\5\61\u02d1\n\61\3\62\3\62\3\62\3\62\5\62\u02d7\n\62\3")
        buf.write("\63\3\63\3\63\3\64\3\64\3\64\3\65\3\65\3\65\3\66\3\66")
        buf.write("\5\66\u02e4\n\66\3\66\3\66\3\66\5\66\u02e9\n\66\3\67\3")
        buf.write("\67\3\67\7\67\u02ee\n\67\f\67\16\67\u02f1\13\67\38\38")
        buf.write("\38\38\38\38\78\u02f9\n8\f8\168\u02fc\138\58\u02fe\n8")
        buf.write("\39\39\39\39\39\39\39\39\59\u0308\n9\3:\3:\3:\3;\3;\3")
        buf.write(";\7;\u0310\n;\f;\16;\u0313\13;\3<\3<\3<\7<\u0318\n<\f")
        buf.write("<\16<\u031b\13<\3=\3=\3=\5=\u0320\n=\3>\3>\3>\7>\u0325")
        buf.write("\n>\f>\16>\u0328\13>\3?\3?\3?\3?\5?\u032e\n?\3@\3@\3@")
        buf.write("\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u0343")
        buf.write("\n@\3@\3@\3@\3@\5@\u0349\n@\3@\3@\6@\u034d\n@\r@\16@\u034e")
        buf.write("\7@\u0351\n@\f@\16@\u0354\13@\3A\3A\3A\3A\3A\3A\3A\5A")
        buf.write("\u035d\nA\3A\3A\3A\3A\5A\u0363\nA\5A\u0365\nA\3B\3B\3")
        buf.write("B\3B\5B\u036b\nB\3C\3C\3C\3D\3D\3D\3E\3E\3E\3E\3E\3E\5")
        buf.write("E\u0379\nE\3F\3F\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\5H\u0387")
        buf.write("\nH\3H\3H\3H\3H\3H\5H\u038e\nH\5H\u0390\nH\3I\3I\3I\3")
        buf.write("I\5I\u0396\nI\3I\3I\3I\3I\3I\5I\u039d\nI\5I\u039f\nI\3")
        buf.write("J\3J\3J\5J\u03a4\nJ\3J\3J\3J\3J\3J\5J\u03ab\nJ\3K\3K\5")
        buf.write("K\u03af\nK\3K\3K\3K\5K\u03b4\nK\5K\u03b6\nK\5K\u03b8\n")
        buf.write("K\3L\3L\3L\3L\3M\3M\3M\3M\3N\3N\3N\3N\3O\3O\3O\5O\u03c9")
        buf.write("\nO\3P\3P\3P\3P\3P\3P\5P\u03d1\nP\3P\5P\u03d4\nP\3P\5")
        buf.write("P\u03d7\nP\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u03df\nQ\3Q\5Q\u03e2\n")
        buf.write("Q\3Q\5Q\u03e5\nQ\3R\3R\3R\3R\3R\3R\5R\u03ed\nR\3R\5R\u03f0")
        buf.write("\nR\3R\5R\u03f3\nR\3S\3S\5S\u03f7\nS\3S\3S\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\5T\u0405\nT\3U\3U\3U\3U\7U\u040b\n")
        buf.write("U\fU\16U\u040e\13U\5U\u0410\nU\3U\3U\3V\3V\3V\3V\3W\3")
        buf.write("W\3W\3X\3X\3X\5X\u041e\nX\3Y\3Y\3Y\3Z\5Z\u0424\nZ\3Z\3")
        buf.write("Z\5Z\u0428\nZ\3[\5[\u042b\n[\3[\3[\3\\\3\\\3\\\5\\\u0432")
        buf.write("\n\\\3]\3]\3]\3]\7]\u0438\n]\f]\16]\u043b\13]\5]\u043d")
        buf.write("\n]\3]\3]\3^\3^\3^\3^\7^\u0445\n^\f^\16^\u0448\13^\5^")
        buf.write("\u044a\n^\3^\3^\3_\3_\3_\3_\3`\3`\3`\3`\3a\3a\3b\5b\u0459")
        buf.write("\nb\3b\3b\5b\u045d\nb\3b\3b\3b\3b\3c\3c\5c\u0465\nc\7")
        buf.write("c\u0467\nc\fc\16c\u046a\13c\3d\3d\3d\3d\3d\3d\3d\3d\5")
        buf.write("d\u0474\nd\3e\3e\3e\3f\3f\5f\u047b\nf\3f\6f\u047e\nf\r")
        buf.write("f\16f\u047f\3g\3g\3g\5g\u0485\ng\3g\5g\u0488\ng\6g\u048a")
        buf.write("\ng\rg\16g\u048b\3h\3h\5h\u0490\nh\3h\3h\5h\u0494\nh\3")
        buf.write("i\3i\3i\5i\u0499\ni\6i\u049b\ni\ri\16i\u049c\3j\3j\3k")
        buf.write("\3k\5k\u04a3\nk\3l\3l\5l\u04a7\nl\3m\3m\3m\3m\5m\u04ad")
        buf.write("\nm\3n\3n\5n\u04b1\nn\5n\u04b3\nn\3n\3n\3n\3n\3o\3o\3")
        buf.write('o\2\3~p\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 "$&(*')
        buf.write(",.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write('\u00dc\2\17\4\2\33\34""\4\2@ACC\3\2\62\65\3\2\678\3')
        buf.write("\2XY\3\2Z\\\3\2\37!\4\2\36\36gg\5\2\13\21\26\26,,\4\2")
        buf.write("\22\22\24\24\5\2\22\22\26\26,,\4\2\6\6\n\n\b\2\22\22\26")
        buf.write("\26,,bceegg\2\u0516\2\u00df\3\2\2\2\4\u00ef\3\2\2\2\6")
        buf.write("\u00fa\3\2\2\2\b\u012d\3\2\2\2\n\u0136\3\2\2\2\f\u013c")
        buf.write("\3\2\2\2\16\u013e\3\2\2\2\20\u0168\3\2\2\2\22\u016a\3")
        buf.write("\2\2\2\24\u0171\3\2\2\2\26\u0187\3\2\2\2\30\u019c\3\2")
        buf.write("\2\2\32\u019f\3\2\2\2\34\u01a3\3\2\2\2\36\u01a7\3\2\2")
        buf.write('\2 \u01b6\3\2\2\2"\u01ba\3\2\2\2$\u01bf\3\2\2\2&\u01c4')
        buf.write("\3\2\2\2(\u01d4\3\2\2\2*\u01e0\3\2\2\2,\u01e2\3\2\2\2")
        buf.write(".\u01e7\3\2\2\2\60\u01fc\3\2\2\2\62\u0219\3\2\2\2\64\u021b")
        buf.write("\3\2\2\2\66\u0221\3\2\2\28\u022a\3\2\2\2:\u022e\3\2\2")
        buf.write("\2<\u0236\3\2\2\2>\u0248\3\2\2\2@\u024a\3\2\2\2B\u025f")
        buf.write("\3\2\2\2D\u0261\3\2\2\2F\u026d\3\2\2\2H\u0272\3\2\2\2")
        buf.write("J\u028c\3\2\2\2L\u028e\3\2\2\2N\u0292\3\2\2\2P\u02a3\3")
        buf.write("\2\2\2R\u02a5\3\2\2\2T\u02a9\3\2\2\2V\u02ab\3\2\2\2X\u02ae")
        buf.write("\3\2\2\2Z\u02bd\3\2\2\2\\\u02c6\3\2\2\2^\u02c8\3\2\2\2")
        buf.write("`\u02cc\3\2\2\2b\u02d2\3\2\2\2d\u02d8\3\2\2\2f\u02db\3")
        buf.write("\2\2\2h\u02de\3\2\2\2j\u02e1\3\2\2\2l\u02ea\3\2\2\2n\u02fd")
        buf.write("\3\2\2\2p\u0307\3\2\2\2r\u0309\3\2\2\2t\u030c\3\2\2\2")
        buf.write("v\u0314\3\2\2\2x\u031f\3\2\2\2z\u0321\3\2\2\2|\u0329\3")
        buf.write("\2\2\2~\u0348\3\2\2\2\u0080\u0364\3\2\2\2\u0082\u036a")
        buf.write("\3\2\2\2\u0084\u036c\3\2\2\2\u0086\u036f\3\2\2\2\u0088")
        buf.write("\u0378\3\2\2\2\u008a\u037a\3\2\2\2\u008c\u037c\3\2\2\2")
        buf.write("\u008e\u038f\3\2\2\2\u0090\u039e\3\2\2\2\u0092\u03a3\3")
        buf.write("\2\2\2\u0094\u03b7\3\2\2\2\u0096\u03b9\3\2\2\2\u0098\u03bd")
        buf.write("\3\2\2\2\u009a\u03c1\3\2\2\2\u009c\u03c8\3\2\2\2\u009e")
        buf.write("\u03d6\3\2\2\2\u00a0\u03e4\3\2\2\2\u00a2\u03f2\3\2\2\2")
        buf.write("\u00a4\u03f4\3\2\2\2\u00a6\u0404\3\2\2\2\u00a8\u0406\3")
        buf.write("\2\2\2\u00aa\u0413\3\2\2\2\u00ac\u0417\3\2\2\2\u00ae\u041d")
        buf.write("\3\2\2\2\u00b0\u041f\3\2\2\2\u00b2\u0423\3\2\2\2\u00b4")
        buf.write("\u042a\3\2\2\2\u00b6\u042e\3\2\2\2\u00b8\u0433\3\2\2\2")
        buf.write("\u00ba\u0440\3\2\2\2\u00bc\u044d\3\2\2\2\u00be\u0451\3")
        buf.write("\2\2\2\u00c0\u0455\3\2\2\2\u00c2\u0458\3\2\2\2\u00c4\u0468")
        buf.write("\3\2\2\2\u00c6\u0473\3\2\2\2\u00c8\u0475\3\2\2\2\u00ca")
        buf.write("\u047d\3\2\2\2\u00cc\u0489\3\2\2\2\u00ce\u048f\3\2\2\2")
        buf.write("\u00d0\u049a\3\2\2\2\u00d2\u049e\3\2\2\2\u00d4\u04a0\3")
        buf.write("\2\2\2\u00d6\u04a4\3\2\2\2\u00d8\u04a8\3\2\2\2\u00da\u04b2")
        buf.write("\3\2\2\2\u00dc\u04b8\3\2\2\2\u00de\u00e0\5\6\4\2\u00df")
        buf.write("\u00de\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e4\3\2\2\2")
        buf.write("\u00e1\u00e3\5\4\3\2\u00e2\u00e1\3\2\2\2\u00e3\u00e6\3")
        buf.write("\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00ea")
        buf.write("\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e7\u00e9\5\f\7\2\u00e8")
        buf.write("\u00e7\3\2\2\2\u00e9\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2")
        buf.write("\u00ea\u00eb\3\2\2\2\u00eb\u00ed\3\2\2\2\u00ec\u00ea\3")
        buf.write("\2\2\2\u00ed\u00ee\7\2\2\3\u00ee\3\3\2\2\2\u00ef\u00f0")
        buf.write("\7#\2\2\u00f0\u00f3\7*\2\2\u00f1\u00f4\5\b\5\2\u00f2\u00f4")
        buf.write("\7Z\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f2\3\2\2\2\u00f4")
        buf.write("\u00f5\3\2\2\2\u00f5\u00f6\7+\2\2\u00f6\u00f7\7\32\2\2")
        buf.write("\u00f7\u00f8\7c\2\2\u00f8\u00f9\7\60\2\2\u00f9\5\3\2\2")
        buf.write("\2\u00fa\u00fb\7\3\2\2\u00fb\u00fc\7$\2\2\u00fc\u00fe")
        buf.write("\7c\2\2\u00fd\u00ff\7\60\2\2\u00fe\u00fd\3\2\2\2\u00fe")
        buf.write("\u00ff\3\2\2\2\u00ff\7\3\2\2\2\u0100\u0103\7-\2\2\u0101")
        buf.write("\u0104\7Z\2\2\u0102\u0104\5\n\6\2\u0103\u0101\3\2\2\2")
        buf.write("\u0103\u0102\3\2\2\2\u0104\u0107\3\2\2\2\u0105\u0106\7")
        buf.write("V\2\2\u0106\u0108\5\b\5\2\u0107\u0105\3\2\2\2\u0107\u0108")
        buf.write("\3\2\2\2\u0108\u012e\3\2\2\2\u0109\u010c\7\26\2\2\u010a")
        buf.write("\u010d\7Z\2\2\u010b\u010d\5\n\6\2\u010c\u010a\3\2\2\2")
        buf.write("\u010c\u010b\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010f\7")
        buf.write("V\2\2\u010f\u0111\5\b\5\2\u0110\u010e\3\2\2\2\u0110\u0111")
        buf.write("\3\2\2\2\u0111\u012e\3\2\2\2\u0112\u0115\7,\2\2\u0113")
        buf.write("\u0116\7Z\2\2\u0114\u0116\5\n\6\2\u0115\u0113\3\2\2\2")
        buf.write("\u0115\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0118\7")
        buf.write("V\2\2\u0118\u011a\5\b\5\2\u0119\u0117\3\2\2\2\u0119\u011a")
        buf.write("\3\2\2\2\u011a\u012e\3\2\2\2\u011b\u011e\7\22\2\2\u011c")
        buf.write("\u011f\7Z\2\2\u011d\u011f\5\n\6\2\u011e\u011c\3\2\2\2")
        buf.write("\u011e\u011d\3\2\2\2\u011f\u0122\3\2\2\2\u0120\u0121\7")
        buf.write("V\2\2\u0121\u0123\5\b\5\2\u0122\u0120\3\2\2\2\u0122\u0123")
        buf.write("\3\2\2\2\u0123\u012e\3\2\2\2\u0124\u0127\7T\2\2\u0125")
        buf.write("\u0128\7Z\2\2\u0126\u0128\5\n\6\2\u0127\u0125\3\2\2\2")
        buf.write("\u0127\u0126\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u012a\7")
        buf.write("V\2\2\u012a\u012c\5\b\5\2\u012b\u0129\3\2\2\2\u012b\u012c")
        buf.write("\3\2\2\2\u012c\u012e\3\2\2\2\u012d\u0100\3\2\2\2\u012d")
        buf.write("\u0109\3\2\2\2\u012d\u0112\3\2\2\2\u012d\u011b\3\2\2\2")
        buf.write("\u012d\u0124\3\2\2\2\u012e\t\3\2\2\2\u012f\u0130\7%\2")
        buf.write("\2\u0130\u0137\7g\2\2\u0131\u0132\7%\2\2\u0132\u0133\7")
        buf.write("*\2\2\u0133\u0134\5:\36\2\u0134\u0135\7+\2\2\u0135\u0137")
        buf.write("\3\2\2\2\u0136\u012f\3\2\2\2\u0136\u0131\3\2\2\2\u0137")
        buf.write("\13\3\2\2\2\u0138\u013d\5\16\b\2\u0139\u013d\5\20\t\2")
        buf.write("\u013a\u013d\5\22\n\2\u013b\u013d\5\26\f\2\u013c\u0138")
        buf.write("\3\2\2\2\u013c\u0139\3\2\2\2\u013c\u013a\3\2\2\2\u013c")
        buf.write("\u013b\3\2\2\2\u013d\r\3\2\2\2\u013e\u013f\7T\2\2\u013f")
        buf.write("\u0140\7g\2\2\u0140\u0141\7\61\2\2\u0141\u0148\5b\62\2")
        buf.write("\u0142\u0143\7V\2\2\u0143\u0144\7g\2\2\u0144\u0145\7\61")
        buf.write("\2\2\u0145\u0147\5b\62\2\u0146\u0142\3\2\2\2\u0147\u014a")
        buf.write("\3\2\2\2\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\u014b\3\2\2\2\u014a\u0148\3\2\2\2\u014b\u014c\7\60\2")
        buf.write("\2\u014c\17\3\2\2\2\u014d\u014e\7\26\2\2\u014e\u0153\7")
        buf.write("g\2\2\u014f\u0150\7$\2\2\u0150\u0152\7g\2\2\u0151\u014f")
        buf.write("\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0153")
        buf.write("\u0154\3\2\2\2\u0154\u0158\3\2\2\2\u0155\u0153\3\2\2\2")
        buf.write("\u0156\u0157\7$\2\2\u0157\u0159\7e\2\2\u0158\u0156\3\2")
        buf.write("\2\2\u0158\u0159\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u0169")
        buf.write("\5 \21\2\u015b\u015c\7,\2\2\u015c\u0161\7g\2\2\u015d\u015e")
        buf.write("\7$\2\2\u015e\u0160\7g\2\2\u015f\u015d\3\2\2\2\u0160\u0163")
        buf.write("\3\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162")
        buf.write("\u0164\3\2\2\2\u0163\u0161\3\2\2\2\u0164\u0169\5 \21\2")
        buf.write("\u0165\u0166\7\22\2\2\u0166\u0167\7g\2\2\u0167\u0169\5")
        buf.write("&\24\2\u0168\u014d\3\2\2\2\u0168\u015b\3\2\2\2\u0168\u0165")
        buf.write("\3\2\2\2\u0169\21\3\2\2\2\u016a\u016b\7-\2\2\u016b\u016d")
        buf.write("\7g\2\2\u016c\u016e\5\30\r\2\u016d\u016c\3\2\2\2\u016d")
        buf.write("\u016e\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0170\5\24\13")
        buf.write('\2\u0170\23\3\2\2\2\u0171\u0175\7*\2\2\u0172\u0174\5"')
        buf.write("\22\2\u0173\u0172\3\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173")
        buf.write("\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0179\3\2\2\2\u0177")
        buf.write("\u0175\3\2\2\2\u0178\u017a\5\32\16\2\u0179\u0178\3\2\2")
        buf.write("\2\u0179\u017a\3\2\2\2\u017a\u017f\3\2\2\2\u017b\u017e")
        buf.write('\5B"\2\u017c\u017e\5\36\20\2\u017d\u017b\3\2\2\2\u017d')
        buf.write("\u017c\3\2\2\2\u017e\u0181\3\2\2\2\u017f\u017d\3\2\2\2")
        buf.write("\u017f\u0180\3\2\2\2\u0180\u0183\3\2\2\2\u0181\u017f\3")
        buf.write("\2\2\2\u0182\u0184\5\34\17\2\u0183\u0182\3\2\2\2\u0183")
        buf.write("\u0184\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0186\7+\2\2")
        buf.write("\u0186\25\3\2\2\2\u0187\u0188\7.\2\2\u0188\u0189\7c\2")
        buf.write("\2\u0189\u018d\7\32\2\2\u018a\u018e\5\u009aN\2\u018b\u018c")
        buf.write("\7\22\2\2\u018c\u018e\5&\24\2\u018d\u018a\3\2\2\2\u018d")
        buf.write("\u018b\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u019a\7>\2\2")
        buf.write("\u0190\u0192\5\u0098M\2\u0191\u0193\5\u00b8]\2\u0192\u0191")
        buf.write("\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0196\3\2\2\2\u0194")
        buf.write("\u0197\5> \2\u0195\u0197\7\60\2\2\u0196\u0194\3\2\2\2")
        buf.write("\u0196\u0195\3\2\2\2\u0197\u019b\3\2\2\2\u0198\u0199\7")
        buf.write("-\2\2\u0199\u019b\5\24\13\2\u019a\u0190\3\2\2\2\u019a")
        buf.write("\u0198\3\2\2\2\u019b\27\3\2\2\2\u019c\u019d\7$\2\2\u019d")
        buf.write("\u019e\5:\36\2\u019e\31\3\2\2\2\u019f\u01a0\7\32\2\2\u01a0")
        buf.write("\u01a1\7\33\2\2\u01a1\u01a2\5> \2\u01a2\33\3\2\2\2\u01a3")
        buf.write("\u01a4\7\32\2\2\u01a4\u01a5\7\34\2\2\u01a5\u01a6\5> \2")
        buf.write('\u01a6\35\3\2\2\2\u01a7\u01a8\7\32\2\2\u01a8\u01a9\7"')
        buf.write("\2\2\u01a9\u01aa\5> \2\u01aa\37\3\2\2\2\u01ab\u01af\7")
        buf.write('*\2\2\u01ac\u01ae\5"\22\2\u01ad\u01ac\3\2\2\2\u01ae\u01b1')
        buf.write("\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0")
        buf.write("\u01b2\3\2\2\2\u01b1\u01af\3\2\2\2\u01b2\u01b7\7+\2\2")
        buf.write('\u01b3\u01b4\7$\2\2\u01b4\u01b7\5"\22\2\u01b5\u01b7\7')
        buf.write("\60\2\2\u01b6\u01ab\3\2\2\2\u01b6\u01b3\3\2\2\2\u01b6")
        buf.write("\u01b5\3\2\2\2\u01b7!\3\2\2\2\u01b8\u01bb\5.\30\2\u01b9")
        buf.write("\u01bb\5\62\32\2\u01ba\u01b8\3\2\2\2\u01ba\u01b9\3\2\2")
        buf.write("\2\u01bb#\3\2\2\2\u01bc\u01be\5\62\32\2\u01bd\u01bc\3")
        buf.write("\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01c0")
        buf.write("\3\2\2\2\u01c0%\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c5")
        buf.write("\5(\25\2\u01c3\u01c5\5*\26\2\u01c4\u01c2\3\2\2\2\u01c4")
        buf.write("\u01c3\3\2\2\2\u01c5'\3\2\2\2\u01c6\u01c7\7*\2\2\u01c7")
        buf.write("\u01c8\5,\27\2\u01c8\u01c9\5$\23\2\u01c9\u01ca\7\31\2")
        buf.write("\2\u01ca\u01cb\5> \2\u01cb\u01cc\7+\2\2\u01cc\u01d5\3")
        buf.write("\2\2\2\u01cd\u01ce\7$\2\2\u01ce\u01cf\5,\27\2\u01cf\u01d0")
        buf.write("\5$\23\2\u01d0\u01d1\7\31\2\2\u01d1\u01d2\5> \2\u01d2")
        buf.write("\u01d3\7\60\2\2\u01d3\u01d5\3\2\2\2\u01d4\u01c6\3\2\2")
        buf.write("\2\u01d4\u01cd\3\2\2\2\u01d5)\3\2\2\2\u01d6\u01d7\7*\2")
        buf.write("\2\u01d7\u01d8\5,\27\2\u01d8\u01d9\5\u00c2b\2\u01d9\u01da")
        buf.write("\7+\2\2\u01da\u01e1\3\2\2\2\u01db\u01dc\7$\2\2\u01dc\u01dd")
        buf.write("\5,\27\2\u01dd\u01de\5\u00c2b\2\u01de\u01df\7\60\2\2\u01df")
        buf.write("\u01e1\3\2\2\2\u01e0\u01d6\3\2\2\2\u01e0\u01db\3\2\2\2")
        buf.write("\u01e1+\3\2\2\2\u01e2\u01e3\7S\2\2\u01e3\u01e4\7R\2\2")
        buf.write("\u01e4\u01e5\7g\2\2\u01e5\u01e6\7\60\2\2\u01e6-\3\2\2")
        buf.write("\2\u01e7\u01e9\7S\2\2\u01e8\u01ea\7U\2\2\u01e9\u01e8\3")
        buf.write("\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01ec\3\2\2\2\u01eb\u01ed")
        buf.write("\7R\2\2\u01ec\u01eb\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed")
        buf.write("\u01ee\3\2\2\2\u01ee\u01f3\5\60\31\2\u01ef\u01f0\7V\2")
        buf.write("\2\u01f0\u01f2\5\60\31\2\u01f1\u01ef\3\2\2\2\u01f2\u01f5")
        buf.write("\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4")
        buf.write("\u01f6\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u01f7\7\60\2")
        buf.write("\2\u01f7/\3\2\2\2\u01f8\u01fd\7g\2\2\u01f9\u01fa\7g\2")
        buf.write("\2\u01fa\u01fb\7\61\2\2\u01fb\u01fd\5b\62\2\u01fc\u01f8")
        buf.write("\3\2\2\2\u01fc\u01f9\3\2\2\2\u01fd\61\3\2\2\2\u01fe\u01ff")
        buf.write("\7W\2\2\u01ff\u0203\58\35\2\u0200\u0201\5\66\34\2\u0201")
        buf.write("\u0202\5\64\33\2\u0202\u0204\3\2\2\2\u0203\u0200\3\2\2")
        buf.write("\2\u0203\u0204\3\2\2\2\u0204\u020e\3\2\2\2\u0205\u0206")
        buf.write("\7V\2\2\u0206\u020a\58\35\2\u0207\u0208\5\66\34\2\u0208")
        buf.write("\u0209\5\64\33\2\u0209\u020b\3\2\2\2\u020a\u0207\3\2\2")
        buf.write("\2\u020a\u020b\3\2\2\2\u020b\u020d\3\2\2\2\u020c\u0205")
        buf.write("\3\2\2\2\u020d\u0210\3\2\2\2\u020e\u020c\3\2\2\2\u020e")
        buf.write("\u020f\3\2\2\2\u020f\u0211\3\2\2\2\u0210\u020e\3\2\2\2")
        buf.write("\u0211\u0212\7\60\2\2\u0212\u021a\3\2\2\2\u0213\u0214")
        buf.write("\7W\2\2\u0214\u0216\7g\2\2\u0215\u0217\5\64\33\2\u0216")
        buf.write("\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218\3\2\2\2")
        buf.write("\u0218\u021a\5> \2\u0219\u01fe\3\2\2\2\u0219\u0213\3\2")
        buf.write("\2\2\u021a\63\3\2\2\2\u021b\u021d\7\32\2\2\u021c\u021e")
        buf.write("\5:\36\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2\u021e")
        buf.write("\u021f\3\2\2\2\u021f\u0220\t\2\2\2\u0220\65\3\2\2\2\u0221")
        buf.write("\u0223\7%\2\2\u0222\u0224\5<\37\2\u0223\u0222\3\2\2\2")
        buf.write("\u0223\u0224\3\2\2\2\u0224\u0228\3\2\2\2\u0225\u0229\7")
        buf.write("%\2\2\u0226\u0227\7)\2\2\u0227\u0229\5b\62\2\u0228\u0225")
        buf.write("\3\2\2\2\u0228\u0226\3\2\2\2\u0229\67\3\2\2\2\u022a\u022b")
        buf.write("\7g\2\2\u022b\u022c\7I\2\2\u022c\u022d\7g\2\2\u022d9\3")
        buf.write("\2\2\2\u022e\u0233\7g\2\2\u022f\u0230\7V\2\2\u0230\u0232")
        buf.write("\7g\2\2\u0231\u022f\3\2\2\2\u0232\u0235\3\2\2\2\u0233")
        buf.write("\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u0234;\3\2\2\2\u0235")
        buf.write("\u0233\3\2\2\2\u0236\u023b\5b\62\2\u0237\u0238\7V\2\2")
        buf.write("\u0238\u023a\5b\62\2\u0239\u0237\3\2\2\2\u023a\u023d\3")
        buf.write("\2\2\2\u023b\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023c=")
        buf.write("\3\2\2\2\u023d\u023b\3\2\2\2\u023e\u0242\7*\2\2\u023f")
        buf.write('\u0241\5B"\2\u0240\u023f\3\2\2\2\u0241\u0244\3\2\2\2')
        buf.write("\u0242\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0245\3")
        buf.write("\2\2\2\u0244\u0242\3\2\2\2\u0245\u0249\7+\2\2\u0246\u0247")
        buf.write('\7$\2\2\u0247\u0249\5B"\2\u0248\u023e\3\2\2\2\u0248\u0246')
        buf.write("\3\2\2\2\u0249?\3\2\2\2\u024a\u024b\5:\36\2\u024b\u024c")
        buf.write("\5> \2\u024cA\3\2\2\2\u024d\u0260\5> \2\u024e\u0260\5")
        buf.write("@!\2\u024f\u0250\5b\62\2\u0250\u0251\7\60\2\2\u0251\u0260")
        buf.write("\3\2\2\2\u0252\u0260\5D#\2\u0253\u0260\5F$\2\u0254\u0260")
        buf.write("\5P)\2\u0255\u0260\5R*\2\u0256\u0257\5V,\2\u0257\u0258")
        buf.write("\7\60\2\2\u0258\u0260\3\2\2\2\u0259\u025a\5T+\2\u025a")
        buf.write("\u025b\7\60\2\2\u025b\u0260\3\2\2\2\u025c\u0260\5X-\2")
        buf.write("\u025d\u0260\5Z.\2\u025e\u0260\5\\/\2\u025f\u024d\3\2")
        buf.write("\2\2\u025f\u024e\3\2\2\2\u025f\u024f\3\2\2\2\u025f\u0252")
        buf.write("\3\2\2\2\u025f\u0253\3\2\2\2\u025f\u0254\3\2\2\2\u025f")
        buf.write("\u0255\3\2\2\2\u025f\u0256\3\2\2\2\u025f\u0259\3\2\2\2")
        buf.write("\u025f\u025c\3\2\2\2\u025f\u025d\3\2\2\2\u025f\u025e\3")
        buf.write("\2\2\2\u0260C\3\2\2\2\u0261\u0262\79\2\2\u0262\u0263\5")
        buf.write("b\62\2\u0263\u0267\5> \2\u0264\u0266\5L'\2\u0265\u0264")
        buf.write("\3\2\2\2\u0266\u0269\3\2\2\2\u0267\u0265\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267\3\2\2\2")
        buf.write("\u026a\u026c\5N(\2\u026b\u026a\3\2\2\2\u026b\u026c\3\2")
        buf.write("\2\2\u026cE\3\2\2\2\u026d\u026e\7F\2\2\u026e\u0270\5>")
        buf.write(" \2\u026f\u0271\5J&\2\u0270\u026f\3\2\2\2\u0270\u0271")
        buf.write("\3\2\2\2\u0271G\3\2\2\2\u0272\u027d\7G\2\2\u0273\u0277")
        buf.write('\7*\2\2\u0274\u0276\5B"\2\u0275\u0274\3\2\2\2\u0276\u0279')
        buf.write("\3\2\2\2\u0277\u0275\3\2\2\2\u0277\u0278\3\2\2\2\u0278")
        buf.write("\u027a\3\2\2\2\u0279\u0277\3\2\2\2\u027a\u027e\7+\2\2")
        buf.write("\u027b\u027c\7$\2\2\u027c\u027e\5b\62\2\u027d\u0273\3")
        buf.write("\2\2\2\u027d\u027b\3\2\2\2\u027eI\3\2\2\2\u027f\u0283")
        buf.write("\7;\2\2\u0280\u0281\7^\2\2\u0281\u0282\7g\2\2\u0282\u0284")
        buf.write("\7_\2\2\u0283\u0280\3\2\2\2\u0283\u0284\3\2\2\2\u0284")
        buf.write("\u0285\3\2\2\2\u0285\u028d\5> \2\u0286\u0289\7;\2\2\u0287")
        buf.write("\u0288\7\32\2\2\u0288\u028a\7g\2\2\u0289\u0287\3\2\2\2")
        buf.write("\u0289\u028a\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028d\5")
        buf.write("> \2\u028c\u027f\3\2\2\2\u028c\u0286\3\2\2\2\u028dK\3")
        buf.write("\2\2\2\u028e\u028f\7:\2\2\u028f\u0290\5b\62\2\u0290\u0291")
        buf.write("\5> \2\u0291M\3\2\2\2\u0292\u0293\7;\2\2\u0293\u0294\5")
        buf.write("> \2\u0294O\3\2\2\2\u0295\u0296\7<\2\2\u0296\u0297\5b")
        buf.write("\62\2\u0297\u0298\7=\2\2\u0298\u0299\5b\62\2\u0299\u029a")
        buf.write("\7>\2\2\u029a\u029b\5b\62\2\u029b\u029c\5> \2\u029c\u02a4")
        buf.write("\3\2\2\2\u029d\u029e\7<\2\2\u029e\u029f\7g\2\2\u029f\u02a0")
        buf.write("\7Q\2\2\u02a0\u02a1\5b\62\2\u02a1\u02a2\5> \2\u02a2\u02a4")
        buf.write("\3\2\2\2\u02a3\u0295\3\2\2\2\u02a3\u029d\3\2\2\2\u02a4")
        buf.write("Q\3\2\2\2\u02a5\u02a6\7?\2\2\u02a6\u02a7\5b\62\2\u02a7")
        buf.write("\u02a8\5> \2\u02a8S\3\2\2\2\u02a9\u02aa\t\3\2\2\u02aa")
        buf.write("U\3\2\2\2\u02ab\u02ac\7/\2\2\u02ac\u02ad\5b\62\2\u02ad")
        buf.write("W\3\2\2\2\u02ae\u02af\7E\2\2\u02af\u02b0\5b\62\2\u02b0")
        buf.write("\u02b1\7\60\2\2\u02b1Y\3\2\2\2\u02b2\u02b3\7D\2\2\u02b3")
        buf.write("\u02b4\5b\62\2\u02b4\u02b5\7\60\2\2\u02b5\u02be\3\2\2")
        buf.write("\2\u02b6\u02b7\7D\2\2\u02b7\u02b8\7$\2\2\u02b8\u02b9\7")
        buf.write("g\2\2\u02b9\u02ba\7\61\2\2\u02ba\u02bb\5b\62\2\u02bb\u02bc")
        buf.write("\7\60\2\2\u02bc\u02be\3\2\2\2\u02bd\u02b2\3\2\2\2\u02bd")
        buf.write("\u02b6\3\2\2\2\u02be[\3\2\2\2\u02bf\u02c7\5^\60\2\u02c0")
        buf.write("\u02c7\5`\61\2\u02c1\u02c4\7B\2\2\u02c2\u02c5\5Z.\2\u02c3")
        buf.write("\u02c5\7\60\2\2\u02c4\u02c2\3\2\2\2\u02c4\u02c3\3\2\2")
        buf.write("\2\u02c5\u02c7\3\2\2\2\u02c6\u02bf\3\2\2\2\u02c6\u02c0")
        buf.write("\3\2\2\2\u02c6\u02c1\3\2\2\2\u02c7]\3\2\2\2\u02c8\u02c9")
        buf.write("\7\27\2\2\u02c9\u02ca\5b\62\2\u02ca\u02cb\7\60\2\2\u02cb")
        buf.write("_\3\2\2\2\u02cc\u02cd\7\30\2\2\u02cd\u02d0\5b\62\2\u02ce")
        buf.write("\u02d1\7\60\2\2\u02cf\u02d1\5N(\2\u02d0\u02ce\3\2\2\2")
        buf.write("\u02d0\u02cf\3\2\2\2\u02d1a\3\2\2\2\u02d2\u02d6\5j\66")
        buf.write("\2\u02d3\u02d7\5d\63\2\u02d4\u02d7\5f\64\2\u02d5\u02d7")
        buf.write("\5h\65\2\u02d6\u02d3\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6")
        buf.write("\u02d5\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7c\3\2\2\2\u02d8")
        buf.write("\u02d9\7\61\2\2\u02d9\u02da\5b\62\2\u02dae\3\2\2\2\u02db")
        buf.write("\u02dc\7\66\2\2\u02dc\u02dd\5b\62\2\u02ddg\3\2\2\2\u02de")
        buf.write("\u02df\t\4\2\2\u02df\u02e0\5b\62\2\u02e0i\3\2\2\2\u02e1")
        buf.write("\u02e8\5l\67\2\u02e2\u02e4\7J\2\2\u02e3\u02e2\3\2\2\2")
        buf.write("\u02e3\u02e4\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\5")
        buf.write("\u009cO\2\u02e6\u02e7\5b\62\2\u02e7\u02e9\3\2\2\2\u02e8")
        buf.write("\u02e3\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9k\3\2\2\2\u02ea")
        buf.write("\u02ef\5n8\2\u02eb\u02ec\t\5\2\2\u02ec\u02ee\5n8\2\u02ed")
        buf.write("\u02eb\3\2\2\2\u02ee\u02f1\3\2\2\2\u02ef\u02ed\3\2\2\2")
        buf.write("\u02ef\u02f0\3\2\2\2\u02f0m\3\2\2\2\u02f1\u02ef\3\2\2")
        buf.write("\2\u02f2\u02f3\7J\2\2\u02f3\u02fe\5n8\2\u02f4\u02fa\5")
        buf.write("t;\2\u02f5\u02f6\5p9\2\u02f6\u02f7\5t;\2\u02f7\u02f9\3")
        buf.write("\2\2\2\u02f8\u02f5\3\2\2\2\u02f9\u02fc\3\2\2\2\u02fa\u02f8")
        buf.write("\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fe\3\2\2\2\u02fc")
        buf.write("\u02fa\3\2\2\2\u02fd\u02f2\3\2\2\2\u02fd\u02f4\3\2\2\2")
        buf.write("\u02feo\3\2\2\2\u02ff\u0308\7K\2\2\u0300\u0308\7L\2\2")
        buf.write("\u0301\u0308\7M\2\2\u0302\u0308\7N\2\2\u0303\u0308\7O")
        buf.write("\2\2\u0304\u0308\7P\2\2\u0305\u0308\7Q\2\2\u0306\u0308")
        buf.write("\5r:\2\u0307\u02ff\3\2\2\2\u0307\u0300\3\2\2\2\u0307\u0301")
        buf.write("\3\2\2\2\u0307\u0302\3\2\2\2\u0307\u0303\3\2\2\2\u0307")
        buf.write("\u0304\3\2\2\2\u0307\u0305\3\2\2\2\u0307\u0306\3\2\2\2")
        buf.write("\u0308q\3\2\2\2\u0309\u030a\7J\2\2\u030a\u030b\7Q\2\2")
        buf.write("\u030bs\3\2\2\2\u030c\u0311\5v<\2\u030d\u030e\t\6\2\2")
        buf.write("\u030e\u0310\5v<\2\u030f\u030d\3\2\2\2\u0310\u0313\3\2")
        buf.write("\2\2\u0311\u030f\3\2\2\2\u0311\u0312\3\2\2\2\u0312u\3")
        buf.write("\2\2\2\u0313\u0311\3\2\2\2\u0314\u0319\5x=\2\u0315\u0316")
        buf.write("\t\7\2\2\u0316\u0318\5x=\2\u0317\u0315\3\2\2\2\u0318\u031b")
        buf.write("\3\2\2\2\u0319\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a")
        buf.write("w\3\2\2\2\u031b\u0319\3\2\2\2\u031c\u031d\t\6\2\2\u031d")
        buf.write("\u0320\5x=\2\u031e\u0320\5z>\2\u031f\u031c\3\2\2\2\u031f")
        buf.write("\u031e\3\2\2\2\u0320y\3\2\2\2\u0321\u0326\5~@\2\u0322")
        buf.write("\u0323\7]\2\2\u0323\u0325\5x=\2\u0324\u0322\3\2\2\2\u0325")
        buf.write("\u0328\3\2\2\2\u0326\u0324\3\2\2\2\u0326\u0327\3\2\2\2")
        buf.write("\u0327{\3\2\2\2\u0328\u0326\3\2\2\2\u0329\u032a\7T\2\2")
        buf.write("\u032a\u032d\7I\2\2\u032b\u032e\5\u008cG\2\u032c\u032e")
        buf.write("\7g\2\2\u032d\u032b\3\2\2\2\u032d\u032c\3\2\2\2\u032e")
        buf.write("}\3\2\2\2\u032f\u0330\b@\1\2\u0330\u0349\7e\2\2\u0331")
        buf.write("\u0349\7b\2\2\u0332\u0349\7c\2\2\u0333\u0349\7d\2\2\u0334")
        buf.write("\u0349\7f\2\2\u0335\u0349\7g\2\2\u0336\u0349\5H%\2\u0337")
        buf.write("\u0349\5|?\2\u0338\u0349\5\u0094K\2\u0339\u0349\5\u00a4")
        buf.write("S\2\u033a\u0349\5\u00a8U\2\u033b\u033c\7^\2\2\u033c\u033d")
        buf.write("\5b\62\2\u033d\u033e\7_\2\2\u033e\u0349\3\2\2\2\u033f")
        buf.write("\u0340\5\u0082B\2\u0340\u0342\7g\2\2\u0341\u0343\5\u00b8")
        buf.write("]\2\u0342\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0349")
        buf.write("\3\2\2\2\u0344\u0349\5\u00acW\2\u0345\u0349\5\u0084C\2")
        buf.write("\u0346\u0349\5\u0086D\2\u0347\u0349\5\u00c0a\2\u0348\u032f")
        buf.write("\3\2\2\2\u0348\u0331\3\2\2\2\u0348\u0332\3\2\2\2\u0348")
        buf.write("\u0333\3\2\2\2\u0348\u0334\3\2\2\2\u0348\u0335\3\2\2\2")
        buf.write("\u0348\u0336\3\2\2\2\u0348\u0337\3\2\2\2\u0348\u0338\3")
        buf.write("\2\2\2\u0348\u0339\3\2\2\2\u0348\u033a\3\2\2\2\u0348\u033b")
        buf.write("\3\2\2\2\u0348\u033f\3\2\2\2\u0348\u0344\3\2\2\2\u0348")
        buf.write("\u0345\3\2\2\2\u0348\u0346\3\2\2\2\u0348\u0347\3\2\2\2")
        buf.write("\u0349\u0352\3\2\2\2\u034a\u034c\f\7\2\2\u034b\u034d\5")
        buf.write("\u0080A\2\u034c\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e")
        buf.write("\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0351\3\2\2\2")
        buf.write("\u0350\u034a\3\2\2\2\u0351\u0354\3\2\2\2\u0352\u0350\3")
        buf.write("\2\2\2\u0352\u0353\3\2\2\2\u0353\177\3\2\2\2\u0354\u0352")
        buf.write("\3\2\2\2\u0355\u0356\7I\2\2\u0356\u0365\5\u0088E\2\u0357")
        buf.write("\u0358\7I\2\2\u0358\u0365\7g\2\2\u0359\u0365\5\u00a6T")
        buf.write("\2\u035a\u035c\7^\2\2\u035b\u035d\5<\37\2\u035c\u035b")
        buf.write("\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e\3\2\2\2\u035e")
        buf.write("\u0365\7_\2\2\u035f\u0360\5\u0082B\2\u0360\u0362\7g\2")
        buf.write("\2\u0361\u0363\5\u00b8]\2\u0362\u0361\3\2\2\2\u0362\u0363")
        buf.write("\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0355\3\2\2\2\u0364")
        buf.write("\u0357\3\2\2\2\u0364\u0359\3\2\2\2\u0364\u035a\3\2\2\2")
        buf.write("\u0364\u035f\3\2\2\2\u0365\u0081\3\2\2\2\u0366\u036b\7")
        buf.write("%\2\2\u0367\u0368\7%\2\2\u0368\u0369\7g\2\2\u0369\u036b")
        buf.write("\7$\2\2\u036a\u0366\3\2\2\2\u036a\u0367\3\2\2\2\u036b")
        buf.write("\u0083\3\2\2\2\u036c\u036d\7\4\2\2\u036d\u036e\5~@\2\u036e")
        buf.write("\u0085\3\2\2\2\u036f\u0370\7Z\2\2\u0370\u0371\5~@\2\u0371")
        buf.write("\u0087\3\2\2\2\u0372\u0379\3\2\2\2\u0373\u0379\5\u0092")
        buf.write("J\2\u0374\u0379\5\u008eH\2\u0375\u0379\5\u0090I\2\u0376")
        buf.write("\u0379\5\u008cG\2\u0377\u0379\5\u008aF\2\u0378\u0372\3")
        buf.write("\2\2\2\u0378\u0373\3\2\2\2\u0378\u0374\3\2\2\2\u0378\u0375")
        buf.write("\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0377\3\2\2\2\u0379")
        buf.write("\u0089\3\2\2\2\u037a\u037b\5\u00c0a\2\u037b\u008b\3\2")
        buf.write("\2\2\u037c\u037d\t\b\2\2\u037d\u008d\3\2\2\2\u037e\u0390")
        buf.write("\7\36\2\2\u037f\u0380\7*\2\2\u0380\u0381\5:\36\2\u0381")
        buf.write("\u0382\7+\2\2\u0382\u0390\3\2\2\2\u0383\u0384\7\17\2\2")
        buf.write("\u0384\u0387\7%\2\2\u0385\u0387\7(\2\2\u0386\u0383\3\2")
        buf.write("\2\2\u0386\u0385\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u038d")
        buf.write("\t\t\2\2\u0389\u038a\7^\2\2\u038a\u038b\5<\37\2\u038b")
        buf.write("\u038c\7_\2\2\u038c\u038e\3\2\2\2\u038d\u0389\3\2\2\2")
        buf.write("\u038d\u038e\3\2\2\2\u038e\u0390\3\2\2\2\u038f\u037e\3")
        buf.write("\2\2\2\u038f\u037f\3\2\2\2\u038f\u0386\3\2\2\2\u0390\u008f")
        buf.write("\3\2\2\2\u0391\u039f\7\35\2\2\u0392\u0393\7\16\2\2\u0393")
        buf.write("\u0396\7%\2\2\u0394\u0396\7'\2\2\u0395\u0392\3\2\2\2")
        buf.write("\u0395\u0394\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u039c\7")
        buf.write("g\2\2\u0398\u0399\7^\2\2\u0399\u039a\5<\37\2\u039a\u039b")
        buf.write("\7_\2\2\u039b\u039d\3\2\2\2\u039c\u0398\3\2\2\2\u039c")
        buf.write("\u039d\3\2\2\2\u039d\u039f\3\2\2\2\u039e\u0391\3\2\2\2")
        buf.write("\u039e\u0395\3\2\2\2\u039f\u0091\3\2\2\2\u03a0\u03a1\7")
        buf.write("\13\2\2\u03a1\u03a4\7%\2\2\u03a2\u03a4\7&\2\2\u03a3\u03a0")
        buf.write("\3\2\2\2\u03a3\u03a2\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5")
        buf.write("\u03aa\7g\2\2\u03a6\u03a7\7^\2\2\u03a7\u03a8\5<\37\2\u03a8")
        buf.write("\u03a9\7_\2\2\u03a9\u03ab\3\2\2\2\u03aa\u03a6\3\2\2\2")
        buf.write("\u03aa\u03ab\3\2\2\2\u03ab\u0093\3\2\2\2\u03ac\u03ae\5")
        buf.write("\u0096L\2\u03ad\u03af\5\u00ba^\2\u03ae\u03ad\3\2\2\2\u03ae")
        buf.write("\u03af\3\2\2\2\u03af\u03b8\3\2\2\2\u03b0\u03b5\5\u009c")
        buf.write("O\2\u03b1\u03b3\5\u0096L\2\u03b2\u03b4\5\u00ba^\2\u03b3")
        buf.write("\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b6\3\2\2\2")
        buf.write("\u03b5\u03b1\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\3")
        buf.write("\2\2\2\u03b7\u03ac\3\2\2\2\u03b7\u03b0\3\2\2\2\u03b8\u0095")
        buf.write("\3\2\2\2\u03b9\u03ba\7\26\2\2\u03ba\u03bb\7%\2\2\u03bb")
        buf.write("\u03bc\7g\2\2\u03bc\u0097\3\2\2\2\u03bd\u03be\7-\2\2\u03be")
        buf.write("\u03bf\7%\2\2\u03bf\u03c0\7g\2\2\u03c0\u0099\3\2\2\2\u03c1")
        buf.write("\u03c2\7\22\2\2\u03c2\u03c3\7%\2\2\u03c3\u03c4\7g\2\2")
        buf.write("\u03c4\u009b\3\2\2\2\u03c5\u03c9\5\u009eP\2\u03c6\u03c9")
        buf.write("\5\u00a0Q\2\u03c7\u03c9\5\u00a2R\2\u03c8\u03c5\3\2\2\2")
        buf.write("\u03c8\u03c6\3\2\2\2\u03c8\u03c7\3\2\2\2\u03c9\u009d\3")
        buf.write("\2\2\2\u03ca\u03d7\7\5\2\2\u03cb\u03d3\7Y\2\2\u03cc\u03cd")
        buf.write("\7`\2\2\u03cd\u03d0\7g\2\2\u03ce\u03d1\5\u00b8]\2\u03cf")
        buf.write("\u03d1\5\u00ba^\2\u03d0\u03ce\3\2\2\2\u03d0\u03cf\3\2")
        buf.write("\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d4")
        buf.write("\7a\2\2\u03d3\u03cc\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4")
        buf.write("\u03d5\3\2\2\2\u03d5\u03d7\7\6\2\2\u03d6\u03ca\3\2\2\2")
        buf.write("\u03d6\u03cb\3\2\2\2\u03d7\u009f\3\2\2\2\u03d8\u03e5\7")
        buf.write("\7\2\2\u03d9\u03e1\7\b\2\2\u03da\u03db\7`\2\2\u03db\u03de")
        buf.write("\7g\2\2\u03dc\u03df\5\u00b8]\2\u03dd\u03df\5\u00ba^\2")
        buf.write("\u03de\u03dc\3\2\2\2\u03de\u03dd\3\2\2\2\u03de\u03df\3")
        buf.write("\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e2\7a\2\2\u03e1\u03da")
        buf.write("\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write("\u03e5\7Y\2\2\u03e4\u03d8\3\2\2\2\u03e4\u03d9\3\2\2\2")
        buf.write("\u03e5\u00a1\3\2\2\2\u03e6\u03f3\7\t\2\2\u03e7\u03ef\7")
        buf.write("\b\2\2\u03e8\u03e9\7`\2\2\u03e9\u03ec\7g\2\2\u03ea\u03ed")
        buf.write("\5\u00b8]\2\u03eb\u03ed\5\u00ba^\2\u03ec\u03ea\3\2\2\2")
        buf.write("\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ee\3")
        buf.write("\2\2\2\u03ee\u03f0\7a\2\2\u03ef\u03e8\3\2\2\2\u03ef\u03f0")
        buf.write("\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f3\7\6\2\2\u03f2")
        buf.write("\u03e6\3\2\2\2\u03f2\u03e7\3\2\2\2\u03f3\u00a3\3\2\2\2")
        buf.write("\u03f4\u03f6\7`\2\2\u03f5\u03f7\5<\37\2\u03f6\u03f5\3")
        buf.write("\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9")
        buf.write("\7a\2\2\u03f9\u00a5\3\2\2\2\u03fa\u03fb\7`\2\2\u03fb\u03fc")
        buf.write("\5b\62\2\u03fc\u03fd\7a\2\2\u03fd\u0405\3\2\2\2\u03fe")
        buf.write("\u03ff\7`\2\2\u03ff\u0400\5b\62\2\u0400\u0401\7$\2\2\u0401")
        buf.write("\u0402\5b\62\2\u0402\u0403\7a\2\2\u0403\u0405\3\2\2\2")
        buf.write("\u0404\u03fa\3\2\2\2\u0404\u03fe\3\2\2\2\u0405\u00a7\3")
        buf.write("\2\2\2\u0406\u040f\7*\2\2\u0407\u040c\5\u00aaV\2\u0408")
        buf.write("\u0409\7V\2\2\u0409\u040b\5\u00aaV\2\u040a\u0408\3\2\2")
        buf.write("\2\u040b\u040e\3\2\2\2\u040c\u040a\3\2\2\2\u040c\u040d")
        buf.write("\3\2\2\2\u040d\u0410\3\2\2\2\u040e\u040c\3\2\2\2\u040f")
        buf.write("\u0407\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\3\2\2\2")
        buf.write("\u0411\u0412\7+\2\2\u0412\u00a9\3\2\2\2\u0413\u0414\7")
        buf.write("c\2\2\u0414\u0415\7$\2\2\u0415\u0416\5b\62\2\u0416\u00ab")
        buf.write("\3\2\2\2\u0417\u0418\7\31\2\2\u0418\u0419\5\u00aeX\2\u0419")
        buf.write("\u00ad\3\2\2\2\u041a\u041e\5\u00b2Z\2\u041b\u041e\5\u00b6")
        buf.write("\\\2\u041c\u041e\5\u00b4[\2\u041d\u041a\3\2\2\2\u041d")
        buf.write("\u041b\3\2\2\2\u041d\u041c\3\2\2\2\u041e\u00af\3\2\2\2")
        buf.write("\u041f\u0420\5b\62\2\u0420\u0421\5\u009cO\2\u0421\u00b1")
        buf.write("\3\2\2\2\u0422\u0424\5\u00b0Y\2\u0423\u0422\3\2\2\2\u0423")
        buf.write("\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0427\5\u0096")
        buf.write("L\2\u0426\u0428\5\u00b8]\2\u0427\u0426\3\2\2\2\u0427\u0428")
        buf.write("\3\2\2\2\u0428\u00b3\3\2\2\2\u0429\u042b\5\u00b0Y\2\u042a")
        buf.write("\u0429\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c\3\2\2\2")
        buf.write("\u042c\u042d\5\u009aN\2\u042d\u00b5\3\2\2\2\u042e\u042f")
        buf.write("\5b\62\2\u042f\u0431\5\u0098M\2\u0430\u0432\5\u00b8]\2")
        buf.write("\u0431\u0430\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u00b7\3")
        buf.write("\2\2\2\u0433\u043c\7^\2\2\u0434\u0439\5\u00bc_\2\u0435")
        buf.write("\u0436\7V\2\2\u0436\u0438\5\u00bc_\2\u0437\u0435\3\2\2")
        buf.write("\2\u0438\u043b\3\2\2\2\u0439\u0437\3\2\2\2\u0439\u043a")
        buf.write("\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2\u043c")
        buf.write("\u0434\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u043e\3\2\2\2")
        buf.write("\u043e\u043f\7_\2\2\u043f\u00b9\3\2\2\2\u0440\u0449\7")
        buf.write("^\2\2\u0441\u0446\5\u00be`\2\u0442\u0443\7V\2\2\u0443")
        buf.write("\u0445\5\u00be`\2\u0444\u0442\3\2\2\2\u0445\u0448\3\2")
        buf.write("\2\2\u0446\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u044a")
        buf.write("\3\2\2\2\u0448\u0446\3\2\2\2\u0449\u0441\3\2\2\2\u0449")
        buf.write("\u044a\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\7_\2\2")
        buf.write("\u044c\u00bb\3\2\2\2\u044d\u044e\7g\2\2\u044e\u044f\7")
        buf.write("\61\2\2\u044f\u0450\5b\62\2\u0450\u00bd\3\2\2\2\u0451")
        buf.write("\u0452\7g\2\2\u0452\u0453\5p9\2\u0453\u0454\5b\62\2\u0454")
        buf.write("\u00bf\3\2\2\2\u0455\u0456\t\n\2\2\u0456\u00c1\3\2\2\2")
        buf.write("\u0457\u0459\7\23\2\2\u0458\u0457\3\2\2\2\u0458\u0459")
        buf.write("\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045c\t\13\2\2\u045b")
        buf.write("\u045d\5\u00dco\2\u045c\u045b\3\2\2\2\u045c\u045d\3\2")
        buf.write("\2\2\u045d\u045e\3\2\2\2\u045e\u045f\7*\2\2\u045f\u0460")
        buf.write("\5\u00c4c\2\u0460\u0461\7+\2\2\u0461\u00c3\3\2\2\2\u0462")
        buf.write("\u0464\5\u00c6d\2\u0463\u0465\7\60\2\2\u0464\u0463\3\2")
        buf.write("\2\2\u0464\u0465\3\2\2\2\u0465\u0467\3\2\2\2\u0466\u0462")
        buf.write("\3\2\2\2\u0467\u046a\3\2\2\2\u0468\u0466\3\2\2\2\u0468")
        buf.write("\u0469\3\2\2\2\u0469\u00c5\3\2\2\2\u046a\u0468\3\2\2\2")
        buf.write("\u046b\u0474\5\u00d4k\2\u046c\u0474\5\u00ceh\2\u046d\u0474")
        buf.write("\5\u00c8e\2\u046e\u046f\5\u00dco\2\u046f\u0470\7\61\2")
        buf.write("\2\u0470\u0471\5\u00dco\2\u0471\u0474\3\2\2\2\u0472\u0474")
        buf.write("\5\u00dan\2\u0473\u046b\3\2\2\2\u0473\u046c\3\2\2\2\u0473")
        buf.write("\u046d\3\2\2\2\u0473\u046e\3\2\2\2\u0473\u0472\3\2\2\2")
        buf.write("\u0474\u00c7\3\2\2\2\u0475\u0476\t\f\2\2\u0476\u0477\5")
        buf.write("\u00caf\2\u0477\u00c9\3\2\2\2\u0478\u047a\7`\2\2\u0479")
        buf.write("\u047b\5\u00ccg\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2")
        buf.write("\2\2\u047b\u047c\3\2\2\2\u047c\u047e\7a\2\2\u047d\u0478")
        buf.write("\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u047d\3\2\2\2\u047f")
        buf.write("\u0480\3\2\2\2\u0480\u00cb\3\2\2\2\u0481\u0484\5\u00dc")
        buf.write("o\2\u0482\u0483\7\61\2\2\u0483\u0485\5\u00dco\2\u0484")
        buf.write("\u0482\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0487\3\2\2\2")
        buf.write("\u0486\u0488\7V\2\2\u0487\u0486\3\2\2\2\u0487\u0488\3")
        buf.write("\2\2\2\u0488\u048a\3\2\2\2\u0489\u0481\3\2\2\2\u048a\u048b")
        buf.write("\3\2\2\2\u048b\u0489\3\2\2\2\u048b\u048c\3\2\2\2\u048c")
        buf.write("\u00cd\3\2\2\2\u048d\u0490\5\u00d6l\2\u048e\u0490\5\u00da")
        buf.write("n\2\u048f\u048d\3\2\2\2\u048f\u048e\3\2\2\2\u0490\u0491")
        buf.write("\3\2\2\2\u0491\u0493\5\u00d0i\2\u0492\u0494\5\u00caf\2")
        buf.write("\u0493\u0492\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u00cf\3")
        buf.write("\2\2\2\u0495\u0498\5\u00d2j\2\u0496\u0499\5\u00d6l\2\u0497")
        buf.write("\u0499\5\u00dan\2\u0498\u0496\3\2\2\2\u0498\u0497\3\2")
        buf.write("\2\2\u0499\u049b\3\2\2\2\u049a\u0495\3\2\2\2\u049b\u049c")
        buf.write("\3\2\2\2\u049c\u049a\3\2\2\2\u049c\u049d\3\2\2\2\u049d")
        buf.write("\u00d1\3\2\2\2\u049e\u049f\t\r\2\2\u049f\u00d3\3\2\2\2")
        buf.write("\u04a0\u04a2\5\u00d6l\2\u04a1\u04a3\5\u00caf\2\u04a2\u04a1")
        buf.write("\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u00d5\3\2\2\2\u04a4")
        buf.write("\u04a6\5\u00dco\2\u04a5\u04a7\5\u00d8m\2\u04a6\u04a5\3")
        buf.write("\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u00d7\3\2\2\2\u04a8\u04a9")
        buf.write("\7$\2\2\u04a9\u04ac\5\u00dco\2\u04aa\u04ab\7$\2\2\u04ab")
        buf.write("\u04ad\5\u00dco\2\u04ac\u04aa\3\2\2\2\u04ac\u04ad\3\2")
        buf.write("\2\2\u04ad\u00d9\3\2\2\2\u04ae\u04b0\7\25\2\2\u04af\u04b1")
        buf.write("\5\u00dco\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1")
        buf.write("\u04b3\3\2\2\2\u04b2\u04ae\3\2\2\2\u04b2\u04b3\3\2\2\2")
        buf.write("\u04b3\u04b4\3\2\2\2\u04b4\u04b5\7*\2\2\u04b5\u04b6\5")
        buf.write("\u00c4c\2\u04b6\u04b7\7+\2\2\u04b7\u00db\3\2\2\2\u04b8")
        buf.write("\u04b9\t\16\2\2\u04b9\u00dd\3\2\2\2\u0093\u00df\u00e4")
        buf.write("\u00ea\u00f3\u00fe\u0103\u0107\u010c\u0110\u0115\u0119")
        buf.write("\u011e\u0122\u0127\u012b\u012d\u0136\u013c\u0148\u0153")
        buf.write("\u0158\u0161\u0168\u016d\u0175\u0179\u017d\u017f\u0183")
        buf.write("\u018d\u0192\u0196\u019a\u01af\u01b6\u01ba\u01bf\u01c4")
        buf.write("\u01d4\u01e0\u01e9\u01ec\u01f3\u01fc\u0203\u020a\u020e")
        buf.write("\u0216\u0219\u021d\u0223\u0228\u0233\u023b\u0242\u0248")
        buf.write("\u025f\u0267\u026b\u0270\u0277\u027d\u0283\u0289\u028c")
        buf.write("\u02a3\u02bd\u02c4\u02c6\u02d0\u02d6\u02e3\u02e8\u02ef")
        buf.write("\u02fa\u02fd\u0307\u0311\u0319\u031f\u0326\u032d\u0342")
        buf.write("\u0348\u034e\u0352\u035c\u0362\u0364\u036a\u0378\u0386")
        buf.write("\u038d\u038f\u0395\u039c\u039e\u03a3\u03aa\u03ae\u03b3")
        buf.write("\u03b5\u03b7\u03c8\u03d0\u03d3\u03d6\u03de\u03e1\u03e4")
        buf.write("\u03ec\u03ef\u03f2\u03f6\u0404\u040c\u040f\u041d\u0423")
        buf.write("\u0427\u042a\u0431\u0439\u043c\u0446\u0449\u0458\u045c")
        buf.write("\u0464\u0468\u0473\u047a\u047f\u0484\u0487\u048b\u048f")
        buf.write("\u0493\u0498\u049c\u04a2\u04a6\u04ac\u04b0\u04b2")
        return buf.getvalue()


class jacParser(Parser):

    grammarFileName = "jac.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'version'",
        "'&'",
        "'-->'",
        "'->'",
        "'<--'",
        "'<-'",
        "'<-->'",
        "'--'",
        "'str'",
        "'int'",
        "'float'",
        "'list'",
        "'dict'",
        "'bool'",
        "'type'",
        "'graph'",
        "'strict'",
        "'digraph'",
        "'subgraph'",
        "'node'",
        "'ignore'",
        "'take'",
        "'spawn'",
        "'with'",
        "'entry'",
        "'exit'",
        "'length'",
        "'keys'",
        "'context'",
        "'info'",
        "'details'",
        "'activity'",
        "'import'",
        "':'",
        "'::'",
        "'s::'",
        "'l::'",
        "'d::'",
        "'::>'",
        "'{'",
        "'}'",
        "'edge'",
        "'walker'",
        "'test'",
        "'assert'",
        "';'",
        "'='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "':='",
        "<INVALID>",
        "<INVALID>",
        "'if'",
        "'elif'",
        "'else'",
        "'for'",
        "'to'",
        "'by'",
        "'while'",
        "'continue'",
        "'break'",
        "'disengage'",
        "'skip'",
        "'report'",
        "'destroy'",
        "'try'",
        "'async'",
        "'await'",
        "'.'",
        "<INVALID>",
        "'=='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'!='",
        "'in'",
        "'anchor'",
        "'has'",
        "'global'",
        "'private'",
        "','",
        "'can'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'^'",
        "'('",
        "')'",
        "'['",
        "']'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'null'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "TYP_STRING",
        "TYP_INT",
        "TYP_FLOAT",
        "TYP_LIST",
        "TYP_DICT",
        "TYP_BOOL",
        "KW_TYPE",
        "KW_GRAPH",
        "KW_STRICT",
        "KW_DIGRAPH",
        "KW_SUBGRAPH",
        "KW_NODE",
        "KW_IGNORE",
        "KW_TAKE",
        "KW_SPAWN",
        "KW_WITH",
        "KW_ENTRY",
        "KW_EXIT",
        "KW_LENGTH",
        "KW_KEYS",
        "KW_CONTEXT",
        "KW_INFO",
        "KW_DETAILS",
        "KW_ACTIVITY",
        "KW_IMPORT",
        "COLON",
        "DBL_COLON",
        "STR_DBL_COLON",
        "LIST_DBL_COLON",
        "DICT_DBL_COLON",
        "COLON_OUT",
        "LBRACE",
        "RBRACE",
        "KW_EDGE",
        "KW_WALKER",
        "KW_TEST",
        "KW_ASSERT",
        "SEMI",
        "EQ",
        "PEQ",
        "MEQ",
        "TEQ",
        "DEQ",
        "CPY_EQ",
        "KW_AND",
        "KW_OR",
        "KW_IF",
        "KW_ELIF",
        "KW_ELSE",
        "KW_FOR",
        "KW_TO",
        "KW_BY",
        "KW_WHILE",
        "KW_CONTINUE",
        "KW_BREAK",
        "KW_DISENGAGE",
        "KW_SKIP",
        "KW_REPORT",
        "KW_DESTROY",
        "KW_TRY",
        "KW_ASYNC",
        "KW_AWAIT",
        "DOT",
        "NOT",
        "EE",
        "LT",
        "GT",
        "LTE",
        "GTE",
        "NE",
        "KW_IN",
        "KW_ANCHOR",
        "KW_HAS",
        "KW_GLOBAL",
        "KW_PRIVATE",
        "COMMA",
        "KW_CAN",
        "PLUS",
        "MINUS",
        "STAR_MUL",
        "DIV",
        "MOD",
        "POW",
        "LPAREN",
        "RPAREN",
        "LSQUARE",
        "RSQUARE",
        "FLOAT",
        "STRING",
        "BOOL",
        "INT",
        "NULL",
        "NAME",
        "COMMENT",
        "LINE_COMMENT",
        "PY_COMMENT",
        "WS",
        "ErrorChar",
    ]

    RULE_start = 0
    RULE_import_module = 1
    RULE_ver_label = 2
    RULE_import_items = 3
    RULE_import_names = 4
    RULE_element = 5
    RULE_global_var = 6
    RULE_architype = 7
    RULE_walker = 8
    RULE_walker_block = 9
    RULE_test = 10
    RULE_namespaces = 11
    RULE_walk_entry_block = 12
    RULE_walk_exit_block = 13
    RULE_walk_activity_block = 14
    RULE_attr_block = 15
    RULE_attr_stmt = 16
    RULE_can_block = 17
    RULE_graph_block = 18
    RULE_graph_block_spawn = 19
    RULE_graph_block_dot = 20
    RULE_has_root = 21
    RULE_has_stmt = 22
    RULE_has_assign = 23
    RULE_can_stmt = 24
    RULE_event_clause = 25
    RULE_preset_in_out = 26
    RULE_dotted_name = 27
    RULE_name_list = 28
    RULE_expr_list = 29
    RULE_code_block = 30
    RULE_node_ctx_block = 31
    RULE_statement = 32
    RULE_if_stmt = 33
    RULE_try_stmt = 34
    RULE_async_stmt = 35
    RULE_else_from_try = 36
    RULE_elif_stmt = 37
    RULE_else_stmt = 38
    RULE_for_stmt = 39
    RULE_while_stmt = 40
    RULE_ctrl_stmt = 41
    RULE_assert_stmt = 42
    RULE_destroy_action = 43
    RULE_report_action = 44
    RULE_walker_action = 45
    RULE_ignore_action = 46
    RULE_take_action = 47
    RULE_expression = 48
    RULE_assignment = 49
    RULE_copy_assign = 50
    RULE_inc_assign = 51
    RULE_connect = 52
    RULE_logical = 53
    RULE_compare = 54
    RULE_cmp_op = 55
    RULE_nin = 56
    RULE_arithmetic = 57
    RULE_term = 58
    RULE_factor = 59
    RULE_power = 60
    RULE_global_ref = 61
    RULE_atom = 62
    RULE_atom_trailer = 63
    RULE_ability_op = 64
    RULE_ref = 65
    RULE_deref = 66
    RULE_built_in = 67
    RULE_cast_built_in = 68
    RULE_obj_built_in = 69
    RULE_dict_built_in = 70
    RULE_list_built_in = 71
    RULE_string_built_in = 72
    RULE_node_edge_ref = 73
    RULE_node_ref = 74
    RULE_walker_ref = 75
    RULE_graph_ref = 76
    RULE_edge_ref = 77
    RULE_edge_to = 78
    RULE_edge_from = 79
    RULE_edge_any = 80
    RULE_list_val = 81
    RULE_index_slice = 82
    RULE_dict_val = 83
    RULE_kv_pair = 84
    RULE_spawn = 85
    RULE_spawn_object = 86
    RULE_spawn_edge = 87
    RULE_node_spawn = 88
    RULE_graph_spawn = 89
    RULE_walker_spawn = 90
    RULE_spawn_ctx = 91
    RULE_filter_ctx = 92
    RULE_spawn_assign = 93
    RULE_filter_compare = 94
    RULE_any_type = 95
    RULE_dot_graph = 96
    RULE_dot_stmt_list = 97
    RULE_dot_stmt = 98
    RULE_dot_attr_stmt = 99
    RULE_dot_attr_list = 100
    RULE_dot_a_list = 101
    RULE_dot_edge_stmt = 102
    RULE_dot_edgeRHS = 103
    RULE_dot_edgeop = 104
    RULE_dot_node_stmt = 105
    RULE_dot_node_id = 106
    RULE_dot_port = 107
    RULE_dot_subgraph = 108
    RULE_dot_id = 109

    ruleNames = [
        "start",
        "import_module",
        "ver_label",
        "import_items",
        "import_names",
        "element",
        "global_var",
        "architype",
        "walker",
        "walker_block",
        "test",
        "namespaces",
        "walk_entry_block",
        "walk_exit_block",
        "walk_activity_block",
        "attr_block",
        "attr_stmt",
        "can_block",
        "graph_block",
        "graph_block_spawn",
        "graph_block_dot",
        "has_root",
        "has_stmt",
        "has_assign",
        "can_stmt",
        "event_clause",
        "preset_in_out",
        "dotted_name",
        "name_list",
        "expr_list",
        "code_block",
        "node_ctx_block",
        "statement",
        "if_stmt",
        "try_stmt",
        "async_stmt",
        "else_from_try",
        "elif_stmt",
        "else_stmt",
        "for_stmt",
        "while_stmt",
        "ctrl_stmt",
        "assert_stmt",
        "destroy_action",
        "report_action",
        "walker_action",
        "ignore_action",
        "take_action",
        "expression",
        "assignment",
        "copy_assign",
        "inc_assign",
        "connect",
        "logical",
        "compare",
        "cmp_op",
        "nin",
        "arithmetic",
        "term",
        "factor",
        "power",
        "global_ref",
        "atom",
        "atom_trailer",
        "ability_op",
        "ref",
        "deref",
        "built_in",
        "cast_built_in",
        "obj_built_in",
        "dict_built_in",
        "list_built_in",
        "string_built_in",
        "node_edge_ref",
        "node_ref",
        "walker_ref",
        "graph_ref",
        "edge_ref",
        "edge_to",
        "edge_from",
        "edge_any",
        "list_val",
        "index_slice",
        "dict_val",
        "kv_pair",
        "spawn",
        "spawn_object",
        "spawn_edge",
        "node_spawn",
        "graph_spawn",
        "walker_spawn",
        "spawn_ctx",
        "filter_ctx",
        "spawn_assign",
        "filter_compare",
        "any_type",
        "dot_graph",
        "dot_stmt_list",
        "dot_stmt",
        "dot_attr_stmt",
        "dot_attr_list",
        "dot_a_list",
        "dot_edge_stmt",
        "dot_edgeRHS",
        "dot_edgeop",
        "dot_node_stmt",
        "dot_node_id",
        "dot_port",
        "dot_subgraph",
        "dot_id",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    TYP_STRING = 9
    TYP_INT = 10
    TYP_FLOAT = 11
    TYP_LIST = 12
    TYP_DICT = 13
    TYP_BOOL = 14
    KW_TYPE = 15
    KW_GRAPH = 16
    KW_STRICT = 17
    KW_DIGRAPH = 18
    KW_SUBGRAPH = 19
    KW_NODE = 20
    KW_IGNORE = 21
    KW_TAKE = 22
    KW_SPAWN = 23
    KW_WITH = 24
    KW_ENTRY = 25
    KW_EXIT = 26
    KW_LENGTH = 27
    KW_KEYS = 28
    KW_CONTEXT = 29
    KW_INFO = 30
    KW_DETAILS = 31
    KW_ACTIVITY = 32
    KW_IMPORT = 33
    COLON = 34
    DBL_COLON = 35
    STR_DBL_COLON = 36
    LIST_DBL_COLON = 37
    DICT_DBL_COLON = 38
    COLON_OUT = 39
    LBRACE = 40
    RBRACE = 41
    KW_EDGE = 42
    KW_WALKER = 43
    KW_TEST = 44
    KW_ASSERT = 45
    SEMI = 46
    EQ = 47
    PEQ = 48
    MEQ = 49
    TEQ = 50
    DEQ = 51
    CPY_EQ = 52
    KW_AND = 53
    KW_OR = 54
    KW_IF = 55
    KW_ELIF = 56
    KW_ELSE = 57
    KW_FOR = 58
    KW_TO = 59
    KW_BY = 60
    KW_WHILE = 61
    KW_CONTINUE = 62
    KW_BREAK = 63
    KW_DISENGAGE = 64
    KW_SKIP = 65
    KW_REPORT = 66
    KW_DESTROY = 67
    KW_TRY = 68
    KW_ASYNC = 69
    KW_AWAIT = 70
    DOT = 71
    NOT = 72
    EE = 73
    LT = 74
    GT = 75
    LTE = 76
    GTE = 77
    NE = 78
    KW_IN = 79
    KW_ANCHOR = 80
    KW_HAS = 81
    KW_GLOBAL = 82
    KW_PRIVATE = 83
    COMMA = 84
    KW_CAN = 85
    PLUS = 86
    MINUS = 87
    STAR_MUL = 88
    DIV = 89
    MOD = 90
    POW = 91
    LPAREN = 92
    RPAREN = 93
    LSQUARE = 94
    RSQUARE = 95
    FLOAT = 96
    STRING = 97
    BOOL = 98
    INT = 99
    NULL = 100
    NAME = 101
    COMMENT = 102
    LINE_COMMENT = 103
    PY_COMMENT = 104
    WS = 105
    ErrorChar = 106

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class StartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(jacParser.EOF, 0)

        def ver_label(self):
            return self.getTypedRuleContext(jacParser.Ver_labelContext, 0)

        def import_module(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Import_moduleContext)
            else:
                return self.getTypedRuleContext(jacParser.Import_moduleContext, i)

        def element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ElementContext)
            else:
                return self.getTypedRuleContext(jacParser.ElementContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_start

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStart"):
                listener.enterStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStart"):
                listener.exitStart(self)

    def start(self):

        localctx = jacParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.T__0:
                self.state = 220
                self.ver_label()

            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_IMPORT:
                self.state = 223
                self.import_module()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_WALKER)
                        | (1 << jacParser.KW_TEST)
                    )
                )
                != 0
            ) or _la == jacParser.KW_GLOBAL:
                self.state = 229
                self.element()
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 235
            self.match(jacParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_moduleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(jacParser.KW_IMPORT, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_module

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_module"):
                listener.enterImport_module(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_module"):
                listener.exitImport_module(self)

    def import_module(self):

        localctx = jacParser.Import_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_import_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(jacParser.KW_IMPORT)
            self.state = 238
            self.match(jacParser.LBRACE)
            self.state = 241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                jacParser.KW_GRAPH,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
                jacParser.KW_WALKER,
                jacParser.KW_GLOBAL,
            ]:
                self.state = 239
                self.import_items()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 240
                self.match(jacParser.STAR_MUL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 243
            self.match(jacParser.RBRACE)
            self.state = 244
            self.match(jacParser.KW_WITH)
            self.state = 245
            self.match(jacParser.STRING)
            self.state = 246
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ver_labelContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ver_label

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVer_label"):
                listener.enterVer_label(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVer_label"):
                listener.exitVer_label(self)

    def ver_label(self):

        localctx = jacParser.Ver_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ver_label)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(jacParser.T__0)
            self.state = 249
            self.match(jacParser.COLON)
            self.state = 250
            self.match(jacParser.STRING)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.SEMI:
                self.state = 251
                self.match(jacParser.SEMI)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_itemsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def import_names(self):
            return self.getTypedRuleContext(jacParser.Import_namesContext, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_items

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_items"):
                listener.enterImport_items(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_items"):
                listener.exitImport_items(self)

    def import_items(self):

        localctx = jacParser.Import_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_items)
        self._la = 0  # Token type
        try:
            self.state = 299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.match(jacParser.KW_WALKER)
                self.state = 257
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 255
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 256
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 259
                    self.match(jacParser.COMMA)
                    self.state = 260
                    self.import_items()

                pass
            elif token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self.match(jacParser.KW_NODE)
                self.state = 266
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 264
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 265
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 268
                    self.match(jacParser.COMMA)
                    self.state = 269
                    self.import_items()

                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 272
                self.match(jacParser.KW_EDGE)
                self.state = 275
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 273
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 274
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 277
                    self.match(jacParser.COMMA)
                    self.state = 278
                    self.import_items()

                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 281
                self.match(jacParser.KW_GRAPH)
                self.state = 284
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 282
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 283
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 286
                    self.match(jacParser.COMMA)
                    self.state = 287
                    self.import_items()

                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 290
                self.match(jacParser.KW_GLOBAL)
                self.state = 293
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 291
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.DBL_COLON]:
                    self.state = 292
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 295
                    self.match(jacParser.COMMA)
                    self.state = 296
                    self.import_items()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_names"):
                listener.enterImport_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_names"):
                listener.exitImport_names(self)

    def import_names(self):

        localctx = jacParser.Import_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_import_names)
        try:
            self.state = 308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.match(jacParser.DBL_COLON)
                self.state = 302
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.match(jacParser.DBL_COLON)
                self.state = 304
                self.match(jacParser.LBRACE)
                self.state = 305
                self.name_list()
                self.state = 306
                self.match(jacParser.RBRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_var(self):
            return self.getTypedRuleContext(jacParser.Global_varContext, 0)

        def architype(self):
            return self.getTypedRuleContext(jacParser.ArchitypeContext, 0)

        def walker(self):
            return self.getTypedRuleContext(jacParser.WalkerContext, 0)

        def test(self):
            return self.getTypedRuleContext(jacParser.TestContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)

    def element(self):

        localctx = jacParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_element)
        try:
            self.state = 314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self.global_var()
                pass
            elif token in [jacParser.KW_GRAPH, jacParser.KW_NODE, jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 311
                self.architype()
                pass
            elif token in [jacParser.KW_WALKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 312
                self.walker()
                pass
            elif token in [jacParser.KW_TEST]:
                self.enterOuterAlt(localctx, 4)
                self.state = 313
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_varContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_global_var

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_var"):
                listener.enterGlobal_var(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_var"):
                listener.exitGlobal_var(self)

    def global_var(self):

        localctx = jacParser.Global_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_global_var)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(jacParser.KW_GLOBAL)
            self.state = 317
            self.match(jacParser.NAME)
            self.state = 318
            self.match(jacParser.EQ)
            self.state = 319
            self.expression()
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 320
                self.match(jacParser.COMMA)
                self.state = 321
                self.match(jacParser.NAME)
                self.state = 322
                self.match(jacParser.EQ)
                self.state = 323
                self.expression()
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 329
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArchitypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def attr_block(self):
            return self.getTypedRuleContext(jacParser.Attr_blockContext, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_architype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArchitype"):
                listener.enterArchitype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArchitype"):
                listener.exitArchitype(self)

    def architype(self):

        localctx = jacParser.ArchitypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_architype)
        try:
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.match(jacParser.KW_NODE)
                self.state = 332
                self.match(jacParser.NAME)
                self.state = 337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 333
                        self.match(jacParser.COLON)
                        self.state = 334
                        self.match(jacParser.NAME)
                    self.state = 339
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)

                self.state = 342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
                if la_ == 1:
                    self.state = 340
                    self.match(jacParser.COLON)
                    self.state = 341
                    self.match(jacParser.INT)

                self.state = 344
                self.attr_block()
                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 345
                self.match(jacParser.KW_EDGE)
                self.state = 346
                self.match(jacParser.NAME)
                self.state = 351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 347
                        self.match(jacParser.COLON)
                        self.state = 348
                        self.match(jacParser.NAME)
                    self.state = 353
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 354
                self.attr_block()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 355
                self.match(jacParser.KW_GRAPH)
                self.state = 356
                self.match(jacParser.NAME)
                self.state = 357
                self.graph_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WalkerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def namespaces(self):
            return self.getTypedRuleContext(jacParser.NamespacesContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker"):
                listener.enterWalker(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker"):
                listener.exitWalker(self)

    def walker(self):

        localctx = jacParser.WalkerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_walker)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(jacParser.KW_WALKER)
            self.state = 361
            self.match(jacParser.NAME)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 362
                self.namespaces()

            self.state = 365
            self.walker_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def walk_entry_block(self):
            return self.getTypedRuleContext(jacParser.Walk_entry_blockContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def walk_activity_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Walk_activity_blockContext)
            else:
                return self.getTypedRuleContext(jacParser.Walk_activity_blockContext, i)

        def walk_exit_block(self):
            return self.getTypedRuleContext(jacParser.Walk_exit_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_block"):
                listener.enterWalker_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_block"):
                listener.exitWalker_block(self)

    def walker_block(self):

        localctx = jacParser.Walker_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_walker_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(jacParser.LBRACE)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                self.state = 368
                self.attr_stmt()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.state = 374
                self.walk_entry_block()

            self.state = 381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 379
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        jacParser.T__1,
                        jacParser.T__2,
                        jacParser.T__4,
                        jacParser.T__5,
                        jacParser.T__6,
                        jacParser.TYP_STRING,
                        jacParser.TYP_INT,
                        jacParser.TYP_FLOAT,
                        jacParser.TYP_LIST,
                        jacParser.TYP_DICT,
                        jacParser.TYP_BOOL,
                        jacParser.KW_TYPE,
                        jacParser.KW_NODE,
                        jacParser.KW_IGNORE,
                        jacParser.KW_TAKE,
                        jacParser.KW_SPAWN,
                        jacParser.COLON,
                        jacParser.DBL_COLON,
                        jacParser.LBRACE,
                        jacParser.KW_EDGE,
                        jacParser.KW_ASSERT,
                        jacParser.KW_IF,
                        jacParser.KW_FOR,
                        jacParser.KW_WHILE,
                        jacParser.KW_CONTINUE,
                        jacParser.KW_BREAK,
                        jacParser.KW_DISENGAGE,
                        jacParser.KW_SKIP,
                        jacParser.KW_REPORT,
                        jacParser.KW_DESTROY,
                        jacParser.KW_TRY,
                        jacParser.KW_ASYNC,
                        jacParser.NOT,
                        jacParser.KW_GLOBAL,
                        jacParser.PLUS,
                        jacParser.MINUS,
                        jacParser.STAR_MUL,
                        jacParser.LPAREN,
                        jacParser.LSQUARE,
                        jacParser.FLOAT,
                        jacParser.STRING,
                        jacParser.BOOL,
                        jacParser.INT,
                        jacParser.NULL,
                        jacParser.NAME,
                    ]:
                        self.state = 377
                        self.statement()
                        pass
                    elif token in [jacParser.KW_WITH]:
                        self.state = 378
                        self.walk_activity_block()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)

            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_WITH:
                self.state = 384
                self.walk_exit_block()

            self.state = 387
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TEST(self):
            return self.getToken(jacParser.KW_TEST, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTest"):
                listener.enterTest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTest"):
                listener.exitTest(self)

    def test(self):

        localctx = jacParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(jacParser.KW_TEST)
            self.state = 390
            self.match(jacParser.STRING)
            self.state = 391
            self.match(jacParser.KW_WITH)
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
            if la_ == 1:
                self.state = 392
                self.graph_ref()
                pass

            elif la_ == 2:
                self.state = 393
                self.match(jacParser.KW_GRAPH)
                self.state = 394
                self.graph_block()
                pass

            self.state = 397
            self.match(jacParser.KW_BY)
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 32, self._ctx)
            if la_ == 1:
                self.state = 398
                self.walker_ref()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 399
                    self.spawn_ctx()

                self.state = 404
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.COLON, jacParser.LBRACE]:
                    self.state = 402
                    self.code_block()
                    pass
                elif token in [jacParser.SEMI]:
                    self.state = 403
                    self.match(jacParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 406
                self.match(jacParser.KW_WALKER)
                self.state = 407
                self.walker_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_namespaces

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespaces"):
                listener.enterNamespaces(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespaces"):
                listener.exitNamespaces(self)

    def namespaces(self):

        localctx = jacParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_namespaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(jacParser.COLON)
            self.state = 411
            self.name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_entry_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_entry_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_entry_block"):
                listener.enterWalk_entry_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_entry_block"):
                listener.exitWalk_entry_block(self)

    def walk_entry_block(self):

        localctx = jacParser.Walk_entry_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_walk_entry_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(jacParser.KW_WITH)
            self.state = 414
            self.match(jacParser.KW_ENTRY)
            self.state = 415
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_exit_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_exit_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_exit_block"):
                listener.enterWalk_exit_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_exit_block"):
                listener.exitWalk_exit_block(self)

    def walk_exit_block(self):

        localctx = jacParser.Walk_exit_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_walk_exit_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(jacParser.KW_WITH)
            self.state = 418
            self.match(jacParser.KW_EXIT)
            self.state = 419
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_activity_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_activity_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_activity_block"):
                listener.enterWalk_activity_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_activity_block"):
                listener.exitWalk_activity_block(self)

    def walk_activity_block(self):

        localctx = jacParser.Walk_activity_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_walk_activity_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(jacParser.KW_WITH)
            self.state = 422
            self.match(jacParser.KW_ACTIVITY)
            self.state = 423
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_block"):
                listener.enterAttr_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_block"):
                listener.exitAttr_block(self)

    def attr_block(self):

        localctx = jacParser.Attr_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attr_block)
        self._la = 0  # Token type
        try:
            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self.match(jacParser.LBRACE)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                    self.state = 426
                    self.attr_stmt()
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 432
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.match(jacParser.COLON)
                self.state = 434
                self.attr_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def has_stmt(self):
            return self.getTypedRuleContext(jacParser.Has_stmtContext, 0)

        def can_stmt(self):
            return self.getTypedRuleContext(jacParser.Can_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_stmt"):
                listener.enterAttr_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_stmt"):
                listener.exitAttr_stmt(self)

    def attr_stmt(self):

        localctx = jacParser.Attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attr_stmt)
        try:
            self.state = 440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_HAS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.has_stmt()
                pass
            elif token in [jacParser.KW_CAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.can_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def can_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Can_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Can_stmtContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_can_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_block"):
                listener.enterCan_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_block"):
                listener.exitCan_block(self)

    def can_block(self):

        localctx = jacParser.Can_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_can_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_CAN:
                self.state = 442
                self.can_stmt()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_block_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_block_spawnContext, 0)

        def graph_block_dot(self):
            return self.getTypedRuleContext(jacParser.Graph_block_dotContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block"):
                listener.enterGraph_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block"):
                listener.exitGraph_block(self)

    def graph_block(self):

        localctx = jacParser.Graph_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_graph_block)
        try:
            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.graph_block_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.graph_block_dot()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_block_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext, 0)

        def can_block(self):
            return self.getTypedRuleContext(jacParser.Can_blockContext, 0)

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block_spawn"):
                listener.enterGraph_block_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block_spawn"):
                listener.exitGraph_block_spawn(self)

    def graph_block_spawn(self):

        localctx = jacParser.Graph_block_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_graph_block_spawn)
        try:
            self.state = 466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.match(jacParser.LBRACE)
                self.state = 453
                self.has_root()
                self.state = 454
                self.can_block()
                self.state = 455
                self.match(jacParser.KW_SPAWN)
                self.state = 456
                self.code_block()
                self.state = 457
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.match(jacParser.COLON)
                self.state = 460
                self.has_root()
                self.state = 461
                self.can_block()
                self.state = 462
                self.match(jacParser.KW_SPAWN)
                self.state = 463
                self.code_block()
                self.state = 464
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_block_dotContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext, 0)

        def dot_graph(self):
            return self.getTypedRuleContext(jacParser.Dot_graphContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_dot

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block_dot"):
                listener.enterGraph_block_dot(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block_dot"):
                listener.exitGraph_block_dot(self)

    def graph_block_dot(self):

        localctx = jacParser.Graph_block_dotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_graph_block_dot)
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.match(jacParser.LBRACE)
                self.state = 469
                self.has_root()
                self.state = 470
                self.dot_graph()
                self.state = 471
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.match(jacParser.COLON)
                self.state = 474
                self.has_root()
                self.state = 475
                self.dot_graph()
                self.state = 476
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_rootContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_root

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_root"):
                listener.enterHas_root(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_root"):
                listener.exitHas_root(self)

    def has_root(self):

        localctx = jacParser.Has_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_has_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(jacParser.KW_HAS)
            self.state = 481
            self.match(jacParser.KW_ANCHOR)
            self.state = 482
            self.match(jacParser.NAME)
            self.state = 483
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def has_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_assignContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def KW_PRIVATE(self):
            return self.getToken(jacParser.KW_PRIVATE, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_has_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_stmt"):
                listener.enterHas_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_stmt"):
                listener.exitHas_stmt(self)

    def has_stmt(self):

        localctx = jacParser.Has_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_has_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(jacParser.KW_HAS)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_PRIVATE:
                self.state = 486
                self.match(jacParser.KW_PRIVATE)

            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_ANCHOR:
                self.state = 489
                self.match(jacParser.KW_ANCHOR)

            self.state = 492
            self.has_assign()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 493
                self.match(jacParser.COMMA)
                self.state = 494
                self.has_assign()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 500
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_assign"):
                listener.enterHas_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_assign"):
                listener.exitHas_assign(self)

    def has_assign(self):

        localctx = jacParser.Has_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_has_assign)
        try:
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.match(jacParser.NAME)
                self.state = 504
                self.match(jacParser.EQ)
                self.state = 505
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAN(self):
            return self.getToken(jacParser.KW_CAN, 0)

        def dotted_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(jacParser.Dotted_nameContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def preset_in_out(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Preset_in_outContext)
            else:
                return self.getTypedRuleContext(jacParser.Preset_in_outContext, i)

        def event_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Event_clauseContext)
            else:
                return self.getTypedRuleContext(jacParser.Event_clauseContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_can_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_stmt"):
                listener.enterCan_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_stmt"):
                listener.exitCan_stmt(self)

    def can_stmt(self):

        localctx = jacParser.Can_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_can_stmt)
        self._la = 0  # Token type
        try:
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 48, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.match(jacParser.KW_CAN)
                self.state = 509
                self.dotted_name()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.DBL_COLON:
                    self.state = 510
                    self.preset_in_out()
                    self.state = 511
                    self.event_clause()

                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 515
                    self.match(jacParser.COMMA)
                    self.state = 516
                    self.dotted_name()
                    self.state = 520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.DBL_COLON:
                        self.state = 517
                        self.preset_in_out()
                        self.state = 518
                        self.event_clause()

                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 527
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self.match(jacParser.KW_CAN)
                self.state = 530
                self.match(jacParser.NAME)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 531
                    self.event_clause()

                self.state = 534
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_event_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEvent_clause"):
                listener.enterEvent_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEvent_clause"):
                listener.exitEvent_clause(self)

    def event_clause(self):

        localctx = jacParser.Event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_event_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(jacParser.KW_WITH)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 538
                self.name_list()

            self.state = 541
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_ENTRY)
                            | (1 << jacParser.KW_EXIT)
                            | (1 << jacParser.KW_ACTIVITY)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Preset_in_outContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DBL_COLON)
            else:
                return self.getToken(jacParser.DBL_COLON, i)

        def COLON_OUT(self):
            return self.getToken(jacParser.COLON_OUT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_preset_in_out

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPreset_in_out"):
                listener.enterPreset_in_out(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPreset_in_out"):
                listener.exitPreset_in_out(self)

    def preset_in_out(self):

        localctx = jacParser.Preset_in_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_preset_in_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(jacParser.DBL_COLON)
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
            if la_ == 1:
                self.state = 544
                self.expr_list()

            self.state = 550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.DBL_COLON]:
                self.state = 547
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.COLON_OUT]:
                self.state = 548
                self.match(jacParser.COLON_OUT)
                self.state = 549
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dotted_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_name"):
                listener.enterDotted_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_name"):
                listener.exitDotted_name(self)

    def dotted_name(self):

        localctx = jacParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dotted_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(jacParser.NAME)
            self.state = 553
            self.match(jacParser.DOT)
            self.state = 554
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_name_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName_list"):
                listener.enterName_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName_list"):
                listener.exitName_list(self)

    def name_list(self):

        localctx = jacParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_name_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(jacParser.NAME)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 557
                self.match(jacParser.COMMA)
                self.state = 558
                self.match(jacParser.NAME)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_expr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr_list"):
                listener.enterExpr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr_list"):
                listener.exitExpr_list(self)

    def expr_list(self):

        localctx = jacParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expr_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.expression()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 565
                self.match(jacParser.COMMA)
                self.state = 566
                self.expression()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_code_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCode_block"):
                listener.enterCode_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCode_block"):
                listener.exitCode_block(self)

    def code_block(self):

        localctx = jacParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_code_block)
        self._la = 0  # Token type
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.match(jacParser.LBRACE)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__2)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.T__6)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_IGNORE)
                            | (1 << jacParser.KW_TAKE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.COLON)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_ASSERT)
                            | (1 << jacParser.KW_IF)
                            | (1 << jacParser.KW_FOR)
                            | (1 << jacParser.KW_WHILE)
                            | (1 << jacParser.KW_CONTINUE)
                            | (1 << jacParser.KW_BREAK)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (jacParser.KW_DISENGAGE - 64))
                            | (1 << (jacParser.KW_SKIP - 64))
                            | (1 << (jacParser.KW_REPORT - 64))
                            | (1 << (jacParser.KW_DESTROY - 64))
                            | (1 << (jacParser.KW_TRY - 64))
                            | (1 << (jacParser.KW_ASYNC - 64))
                            | (1 << (jacParser.NOT - 64))
                            | (1 << (jacParser.KW_GLOBAL - 64))
                            | (1 << (jacParser.PLUS - 64))
                            | (1 << (jacParser.MINUS - 64))
                            | (1 << (jacParser.STAR_MUL - 64))
                            | (1 << (jacParser.LPAREN - 64))
                            | (1 << (jacParser.LSQUARE - 64))
                            | (1 << (jacParser.FLOAT - 64))
                            | (1 << (jacParser.STRING - 64))
                            | (1 << (jacParser.BOOL - 64))
                            | (1 << (jacParser.INT - 64))
                            | (1 << (jacParser.NULL - 64))
                            | (1 << (jacParser.NAME - 64))
                        )
                    )
                    != 0
                ):
                    self.state = 573
                    self.statement()
                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 579
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                self.match(jacParser.COLON)
                self.state = 581
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_ctx_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ctx_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ctx_block"):
                listener.enterNode_ctx_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ctx_block"):
                listener.exitNode_ctx_block(self)

    def node_ctx_block(self):

        localctx = jacParser.Node_ctx_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_node_ctx_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.name_list()
            self.state = 585
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def node_ctx_block(self):
            return self.getTypedRuleContext(jacParser.Node_ctx_blockContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(jacParser.If_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(jacParser.Try_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(jacParser.For_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(jacParser.While_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(jacParser.Assert_stmtContext, 0)

        def ctrl_stmt(self):
            return self.getTypedRuleContext(jacParser.Ctrl_stmtContext, 0)

        def destroy_action(self):
            return self.getTypedRuleContext(jacParser.Destroy_actionContext, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def walker_action(self):
            return self.getTypedRuleContext(jacParser.Walker_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = jacParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_statement)
        try:
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.node_ctx_block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 589
                self.expression()
                self.state = 590
                self.match(jacParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 592
                self.if_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 593
                self.try_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 594
                self.for_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 595
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 596
                self.assert_stmt()
                self.state = 597
                self.match(jacParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 599
                self.ctrl_stmt()
                self.state = 600
                self.match(jacParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 602
                self.destroy_action()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 603
                self.report_action()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 604
                self.walker_action()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(jacParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def elif_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Elif_stmtContext, i)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_if_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_stmt"):
                listener.enterIf_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_stmt"):
                listener.exitIf_stmt(self)

    def if_stmt(self):

        localctx = jacParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(jacParser.KW_IF)
            self.state = 608
            self.expression()
            self.state = 609
            self.code_block()
            self.state = 613
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 610
                    self.elif_stmt()
                self.state = 615
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)

            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
            if la_ == 1:
                self.state = 616
                self.else_stmt()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRY(self):
            return self.getToken(jacParser.KW_TRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def else_from_try(self):
            return self.getTypedRuleContext(jacParser.Else_from_tryContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_try_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTry_stmt"):
                listener.enterTry_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTry_stmt"):
                listener.exitTry_stmt(self)

    def try_stmt(self):

        localctx = jacParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(jacParser.KW_TRY)
            self.state = 620
            self.code_block()
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
            if la_ == 1:
                self.state = 621
                self.else_from_try()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASYNC(self):
            return self.getToken(jacParser.KW_ASYNC, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_async_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAsync_stmt"):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAsync_stmt"):
                listener.exitAsync_stmt(self)

    def async_stmt(self):

        localctx = jacParser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_async_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(jacParser.KW_ASYNC)
            self.state = 635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.state = 625
                self.match(jacParser.LBRACE)
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__2)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.T__6)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_IGNORE)
                            | (1 << jacParser.KW_TAKE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.COLON)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_ASSERT)
                            | (1 << jacParser.KW_IF)
                            | (1 << jacParser.KW_FOR)
                            | (1 << jacParser.KW_WHILE)
                            | (1 << jacParser.KW_CONTINUE)
                            | (1 << jacParser.KW_BREAK)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (jacParser.KW_DISENGAGE - 64))
                            | (1 << (jacParser.KW_SKIP - 64))
                            | (1 << (jacParser.KW_REPORT - 64))
                            | (1 << (jacParser.KW_DESTROY - 64))
                            | (1 << (jacParser.KW_TRY - 64))
                            | (1 << (jacParser.KW_ASYNC - 64))
                            | (1 << (jacParser.NOT - 64))
                            | (1 << (jacParser.KW_GLOBAL - 64))
                            | (1 << (jacParser.PLUS - 64))
                            | (1 << (jacParser.MINUS - 64))
                            | (1 << (jacParser.STAR_MUL - 64))
                            | (1 << (jacParser.LPAREN - 64))
                            | (1 << (jacParser.LSQUARE - 64))
                            | (1 << (jacParser.FLOAT - 64))
                            | (1 << (jacParser.STRING - 64))
                            | (1 << (jacParser.BOOL - 64))
                            | (1 << (jacParser.INT - 64))
                            | (1 << (jacParser.NULL - 64))
                            | (1 << (jacParser.NAME - 64))
                        )
                    )
                    != 0
                ):
                    self.state = 626
                    self.statement()
                    self.state = 631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 632
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.state = 633
                self.match(jacParser.COLON)
                self.state = 634
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_from_tryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_from_try

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_from_try"):
                listener.enterElse_from_try(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_from_try"):
                listener.exitElse_from_try(self)

    def else_from_try(self):

        localctx = jacParser.Else_from_tryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_else_from_try)
        self._la = 0  # Token type
        try:
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.match(jacParser.KW_ELSE)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 638
                    self.match(jacParser.LPAREN)
                    self.state = 639
                    self.match(jacParser.NAME)
                    self.state = 640
                    self.match(jacParser.RPAREN)

                self.state = 643
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 644
                self.match(jacParser.KW_ELSE)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 645
                    self.match(jacParser.KW_WITH)
                    self.state = 646
                    self.match(jacParser.NAME)

                self.state = 649
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elif_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELIF(self):
            return self.getToken(jacParser.KW_ELIF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_elif_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElif_stmt"):
                listener.enterElif_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElif_stmt"):
                listener.exitElif_stmt(self)

    def elif_stmt(self):

        localctx = jacParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(jacParser.KW_ELIF)
            self.state = 653
            self.expression()
            self.state = 654
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_stmt"):
                listener.enterElse_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_stmt"):
                listener.exitElse_stmt(self)

    def else_stmt(self):

        localctx = jacParser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(jacParser.KW_ELSE)
            self.state = 657
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(jacParser.KW_FOR, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def KW_TO(self):
            return self.getToken(jacParser.KW_TO, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_for_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_stmt"):
                listener.enterFor_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_stmt"):
                listener.exitFor_stmt(self)

    def for_stmt(self):

        localctx = jacParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_for_stmt)
        try:
            self.state = 673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.match(jacParser.KW_FOR)
                self.state = 660
                self.expression()
                self.state = 661
                self.match(jacParser.KW_TO)
                self.state = 662
                self.expression()
                self.state = 663
                self.match(jacParser.KW_BY)
                self.state = 664
                self.expression()
                self.state = 665
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.match(jacParser.KW_FOR)
                self.state = 668
                self.match(jacParser.NAME)
                self.state = 669
                self.match(jacParser.KW_IN)
                self.state = 670
                self.expression()
                self.state = 671
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(jacParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_while_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_stmt"):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_stmt"):
                listener.exitWhile_stmt(self)

    def while_stmt(self):

        localctx = jacParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(jacParser.KW_WHILE)
            self.state = 676
            self.expression()
            self.state = 677
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctrl_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTINUE(self):
            return self.getToken(jacParser.KW_CONTINUE, 0)

        def KW_BREAK(self):
            return self.getToken(jacParser.KW_BREAK, 0)

        def KW_SKIP(self):
            return self.getToken(jacParser.KW_SKIP, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ctrl_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtrl_stmt"):
                listener.enterCtrl_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtrl_stmt"):
                listener.exitCtrl_stmt(self)

    def ctrl_stmt(self):

        localctx = jacParser.Ctrl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ctrl_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 62)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 62))
                        & (
                            (1 << (jacParser.KW_CONTINUE - 62))
                            | (1 << (jacParser.KW_BREAK - 62))
                            | (1 << (jacParser.KW_SKIP - 62))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASSERT(self):
            return self.getToken(jacParser.KW_ASSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssert_stmt"):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssert_stmt"):
                listener.exitAssert_stmt(self)

    def assert_stmt(self):

        localctx = jacParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assert_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(jacParser.KW_ASSERT)
            self.state = 682
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destroy_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_destroy_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDestroy_action"):
                listener.enterDestroy_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDestroy_action"):
                listener.exitDestroy_action(self)

    def destroy_action(self):

        localctx = jacParser.Destroy_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_destroy_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(jacParser.KW_DESTROY)
            self.state = 685
            self.expression()
            self.state = 686
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Report_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPORT(self):
            return self.getToken(jacParser.KW_REPORT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_report_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReport_action"):
                listener.enterReport_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReport_action"):
                listener.exitReport_action(self)

    def report_action(self):

        localctx = jacParser.Report_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_report_action)
        try:
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 66, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.match(jacParser.KW_REPORT)
                self.state = 689
                self.expression()
                self.state = 690
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                self.match(jacParser.KW_REPORT)
                self.state = 693
                self.match(jacParser.COLON)
                self.state = 694
                self.match(jacParser.NAME)
                self.state = 695
                self.match(jacParser.EQ)
                self.state = 696
                self.expression()
                self.state = 697
                self.match(jacParser.SEMI)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ignore_action(self):
            return self.getTypedRuleContext(jacParser.Ignore_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def KW_DISENGAGE(self):
            return self.getToken(jacParser.KW_DISENGAGE, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_action"):
                listener.enterWalker_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_action"):
                listener.exitWalker_action(self)

    def walker_action(self):

        localctx = jacParser.Walker_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_walker_action)
        try:
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.ignore_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 702
                self.take_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 703
                self.match(jacParser.KW_DISENGAGE)
                self.state = 706
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.KW_REPORT]:
                    self.state = 704
                    self.report_action()
                    pass
                elif token in [jacParser.SEMI]:
                    self.state = 705
                    self.match(jacParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ignore_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IGNORE(self):
            return self.getToken(jacParser.KW_IGNORE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ignore_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIgnore_action"):
                listener.enterIgnore_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIgnore_action"):
                listener.exitIgnore_action(self)

    def ignore_action(self):

        localctx = jacParser.Ignore_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ignore_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(jacParser.KW_IGNORE)
            self.state = 711
            self.expression()
            self.state = 712
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Take_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TAKE(self):
            return self.getToken(jacParser.KW_TAKE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_take_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTake_action"):
                listener.enterTake_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTake_action"):
                listener.exitTake_action(self)

    def take_action(self):

        localctx = jacParser.Take_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_take_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(jacParser.KW_TAKE)
            self.state = 715
            self.expression()
            self.state = 718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.SEMI]:
                self.state = 716
                self.match(jacParser.SEMI)
                pass
            elif token in [jacParser.KW_ELSE]:
                self.state = 717
                self.else_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self):
            return self.getTypedRuleContext(jacParser.ConnectContext, 0)

        def assignment(self):
            return self.getTypedRuleContext(jacParser.AssignmentContext, 0)

        def copy_assign(self):
            return self.getTypedRuleContext(jacParser.Copy_assignContext, 0)

        def inc_assign(self):
            return self.getTypedRuleContext(jacParser.Inc_assignContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):

        localctx = jacParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.connect()
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
            if la_ == 1:
                self.state = 721
                self.assignment()

            elif la_ == 2:
                self.state = 722
                self.copy_assign()

            elif la_ == 3:
                self.state = 723
                self.inc_assign()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)

    def assignment(self):

        localctx = jacParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(jacParser.EQ)
            self.state = 727
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CPY_EQ(self):
            return self.getToken(jacParser.CPY_EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_copy_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCopy_assign"):
                listener.enterCopy_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCopy_assign"):
                listener.exitCopy_assign(self)

    def copy_assign(self):

        localctx = jacParser.Copy_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_copy_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(jacParser.CPY_EQ)
            self.state = 730
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inc_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def PEQ(self):
            return self.getToken(jacParser.PEQ, 0)

        def MEQ(self):
            return self.getToken(jacParser.MEQ, 0)

        def TEQ(self):
            return self.getToken(jacParser.TEQ, 0)

        def DEQ(self):
            return self.getToken(jacParser.DEQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_inc_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInc_assign"):
                listener.enterInc_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInc_assign"):
                listener.exitInc_assign(self)

    def inc_assign(self):

        localctx = jacParser.Inc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_inc_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.PEQ)
                            | (1 << jacParser.MEQ)
                            | (1 << jacParser.TEQ)
                            | (1 << jacParser.DEQ)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 733
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConnectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical(self):
            return self.getTypedRuleContext(jacParser.LogicalContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect"):
                listener.enterConnect(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect"):
                listener.exitConnect(self)

    def connect(self):

        localctx = jacParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_connect)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.logical()
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
            if la_ == 1:
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.NOT:
                    self.state = 736
                    self.match(jacParser.NOT)

                self.state = 739
                self.edge_ref()
                self.state = 740
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.CompareContext)
            else:
                return self.getTypedRuleContext(jacParser.CompareContext, i)

        def KW_AND(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_AND)
            else:
                return self.getToken(jacParser.KW_AND, i)

        def KW_OR(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_OR)
            else:
                return self.getToken(jacParser.KW_OR, i)

        def getRuleIndex(self):
            return jacParser.RULE_logical

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical"):
                listener.enterLogical(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical"):
                listener.exitLogical(self)

    def logical(self):

        localctx = jacParser.LogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_logical)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.compare()
            self.state = 749
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 745
                    _la = self._input.LA(1)
                    if not (_la == jacParser.KW_AND or _la == jacParser.KW_OR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 746
                    self.compare()
                self.state = 751
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def compare(self):
            return self.getTypedRuleContext(jacParser.CompareContext, 0)

        def arithmetic(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(jacParser.ArithmeticContext, i)

        def cmp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Cmp_opContext)
            else:
                return self.getTypedRuleContext(jacParser.Cmp_opContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompare"):
                listener.enterCompare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompare"):
                listener.exitCompare(self)

    def compare(self):

        localctx = jacParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_compare)
        try:
            self.state = 763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.match(jacParser.NOT)
                self.state = 753
                self.compare()
                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__2,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.T__6,
                jacParser.TYP_STRING,
                jacParser.TYP_INT,
                jacParser.TYP_FLOAT,
                jacParser.TYP_LIST,
                jacParser.TYP_DICT,
                jacParser.TYP_BOOL,
                jacParser.KW_TYPE,
                jacParser.KW_NODE,
                jacParser.KW_SPAWN,
                jacParser.DBL_COLON,
                jacParser.LBRACE,
                jacParser.KW_EDGE,
                jacParser.KW_ASYNC,
                jacParser.KW_GLOBAL,
                jacParser.PLUS,
                jacParser.MINUS,
                jacParser.STAR_MUL,
                jacParser.LPAREN,
                jacParser.LSQUARE,
                jacParser.FLOAT,
                jacParser.STRING,
                jacParser.BOOL,
                jacParser.INT,
                jacParser.NULL,
                jacParser.NAME,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.arithmetic()
                self.state = 760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 74, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 755
                        self.cmp_op()
                        self.state = 756
                        self.arithmetic()
                    self.state = 762
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 74, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmp_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(jacParser.EE, 0)

        def LT(self):
            return self.getToken(jacParser.LT, 0)

        def GT(self):
            return self.getToken(jacParser.GT, 0)

        def LTE(self):
            return self.getToken(jacParser.LTE, 0)

        def GTE(self):
            return self.getToken(jacParser.GTE, 0)

        def NE(self):
            return self.getToken(jacParser.NE, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def nin(self):
            return self.getTypedRuleContext(jacParser.NinContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cmp_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCmp_op"):
                listener.enterCmp_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCmp_op"):
                listener.exitCmp_op(self)

    def cmp_op(self):

        localctx = jacParser.Cmp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_cmp_op)
        try:
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.EE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.match(jacParser.EE)
                pass
            elif token in [jacParser.LT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.match(jacParser.LT)
                pass
            elif token in [jacParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 767
                self.match(jacParser.GT)
                pass
            elif token in [jacParser.LTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 768
                self.match(jacParser.LTE)
                pass
            elif token in [jacParser.GTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 769
                self.match(jacParser.GTE)
                pass
            elif token in [jacParser.NE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 770
                self.match(jacParser.NE)
                pass
            elif token in [jacParser.KW_IN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 771
                self.match(jacParser.KW_IN)
                pass
            elif token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 772
                self.nin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NinContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_nin

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNin"):
                listener.enterNin(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNin"):
                listener.exitNin(self)

    def nin(self):

        localctx = jacParser.NinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_nin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(jacParser.NOT)
            self.state = 776
            self.match(jacParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.TermContext)
            else:
                return self.getTypedRuleContext(jacParser.TermContext, i)

        def PLUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.PLUS)
            else:
                return self.getToken(jacParser.PLUS, i)

        def MINUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MINUS)
            else:
                return self.getToken(jacParser.MINUS, i)

        def getRuleIndex(self):
            return jacParser.RULE_arithmetic

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmetic"):
                listener.enterArithmetic(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmetic"):
                listener.exitArithmetic(self)

    def arithmetic(self):

        localctx = jacParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arithmetic)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.term()
            self.state = 783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 77, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 779
                    _la = self._input.LA(1)
                    if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 780
                    self.term()
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 77, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def STAR_MUL(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.STAR_MUL)
            else:
                return self.getToken(jacParser.STAR_MUL, i)

        def DIV(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DIV)
            else:
                return self.getToken(jacParser.DIV, i)

        def MOD(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MOD)
            else:
                return self.getToken(jacParser.MOD, i)

        def getRuleIndex(self):
            return jacParser.RULE_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTerm"):
                listener.enterTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTerm"):
                listener.exitTerm(self)

    def term(self):

        localctx = jacParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.factor()
            self.state = 791
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 787
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 88)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 88))
                                & (
                                    (1 << (jacParser.STAR_MUL - 88))
                                    | (1 << (jacParser.DIV - 88))
                                    | (1 << (jacParser.MOD - 88))
                                )
                            )
                            != 0
                        )
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 788
                    self.factor()
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(jacParser.FactorContext, 0)

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def power(self):
            return self.getTypedRuleContext(jacParser.PowerContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

    def factor(self):

        localctx = jacParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                _la = self._input.LA(1)
                if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 795
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.power()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def POW(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.POW)
            else:
                return self.getToken(jacParser.POW, i)

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_power

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPower"):
                listener.enterPower(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPower"):
                listener.exitPower(self)

    def power(self):

        localctx = jacParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.atom(0)
            self.state = 804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 800
                    self.match(jacParser.POW)
                    self.state = 801
                    self.factor()
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_global_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_ref"):
                listener.enterGlobal_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_ref"):
                listener.exitGlobal_ref(self)

    def global_ref(self):

        localctx = jacParser.Global_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_global_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(jacParser.KW_GLOBAL)
            self.state = 808
            self.match(jacParser.DOT)
            self.state = 811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_CONTEXT, jacParser.KW_INFO, jacParser.KW_DETAILS]:
                self.state = 809
                self.obj_built_in()
                pass
            elif token in [jacParser.NAME]:
                self.state = 810
                self.match(jacParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def BOOL(self):
            return self.getToken(jacParser.BOOL, 0)

        def NULL(self):
            return self.getToken(jacParser.NULL, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def async_stmt(self):
            return self.getTypedRuleContext(jacParser.Async_stmtContext, 0)

        def global_ref(self):
            return self.getTypedRuleContext(jacParser.Global_refContext, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext, 0)

        def list_val(self):
            return self.getTypedRuleContext(jacParser.List_valContext, 0)

        def dict_val(self):
            return self.getTypedRuleContext(jacParser.Dict_valContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def spawn(self):
            return self.getTypedRuleContext(jacParser.SpawnContext, 0)

        def ref(self):
            return self.getTypedRuleContext(jacParser.RefContext, 0)

        def deref(self):
            return self.getTypedRuleContext(jacParser.DerefContext, 0)

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def atom_trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Atom_trailerContext)
            else:
                return self.getTypedRuleContext(jacParser.Atom_trailerContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

    def atom(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = jacParser.AtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_atom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 83, self._ctx)
            if la_ == 1:
                self.state = 814
                self.match(jacParser.INT)
                pass

            elif la_ == 2:
                self.state = 815
                self.match(jacParser.FLOAT)
                pass

            elif la_ == 3:
                self.state = 816
                self.match(jacParser.STRING)
                pass

            elif la_ == 4:
                self.state = 817
                self.match(jacParser.BOOL)
                pass

            elif la_ == 5:
                self.state = 818
                self.match(jacParser.NULL)
                pass

            elif la_ == 6:
                self.state = 819
                self.match(jacParser.NAME)
                pass

            elif la_ == 7:
                self.state = 820
                self.async_stmt()
                pass

            elif la_ == 8:
                self.state = 821
                self.global_ref()
                pass

            elif la_ == 9:
                self.state = 822
                self.node_edge_ref()
                pass

            elif la_ == 10:
                self.state = 823
                self.list_val()
                pass

            elif la_ == 11:
                self.state = 824
                self.dict_val()
                pass

            elif la_ == 12:
                self.state = 825
                self.match(jacParser.LPAREN)
                self.state = 826
                self.expression()
                self.state = 827
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 13:
                self.state = 829
                self.ability_op()
                self.state = 830
                self.match(jacParser.NAME)
                self.state = 832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
                if la_ == 1:
                    self.state = 831
                    self.spawn_ctx()

                pass

            elif la_ == 14:
                self.state = 834
                self.spawn()
                pass

            elif la_ == 15:
                self.state = 835
                self.ref()
                pass

            elif la_ == 16:
                self.state = 836
                self.deref()
                pass

            elif la_ == 17:
                self.state = 837
                self.any_type()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                    self.state = 840
                    if not self.precpred(self._ctx, 5):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 5)"
                        )
                    self.state = 842
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 841
                            self.atom_trailer()

                        else:
                            raise NoViableAltException(self)
                        self.state = 844
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)

                self.state = 850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atom_trailerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def built_in(self):
            return self.getTypedRuleContext(jacParser.Built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def index_slice(self):
            return self.getTypedRuleContext(jacParser.Index_sliceContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_atom_trailer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom_trailer"):
                listener.enterAtom_trailer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom_trailer"):
                listener.exitAtom_trailer(self)

    def atom_trailer(self):

        localctx = jacParser.Atom_trailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_atom_trailer)
        self._la = 0  # Token type
        try:
            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.match(jacParser.DOT)
                self.state = 852
                self.built_in()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.match(jacParser.DOT)
                self.state = 854
                self.match(jacParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 855
                self.index_slice()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 856
                self.match(jacParser.LPAREN)
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__2)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.T__6)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 69)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 69))
                        & (
                            (1 << (jacParser.KW_ASYNC - 69))
                            | (1 << (jacParser.NOT - 69))
                            | (1 << (jacParser.KW_GLOBAL - 69))
                            | (1 << (jacParser.PLUS - 69))
                            | (1 << (jacParser.MINUS - 69))
                            | (1 << (jacParser.STAR_MUL - 69))
                            | (1 << (jacParser.LPAREN - 69))
                            | (1 << (jacParser.LSQUARE - 69))
                            | (1 << (jacParser.FLOAT - 69))
                            | (1 << (jacParser.STRING - 69))
                            | (1 << (jacParser.BOOL - 69))
                            | (1 << (jacParser.INT - 69))
                            | (1 << (jacParser.NULL - 69))
                            | (1 << (jacParser.NAME - 69))
                        )
                    )
                    != 0
                ):
                    self.state = 857
                    self.expr_list()

                self.state = 860
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 861
                self.ability_op()
                self.state = 862
                self.match(jacParser.NAME)
                self.state = 864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 87, self._ctx)
                if la_ == 1:
                    self.state = 863
                    self.spawn_ctx()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ability_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ability_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbility_op"):
                listener.enterAbility_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbility_op"):
                listener.exitAbility_op(self)

    def ability_op(self):

        localctx = jacParser.Ability_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_ability_op)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.match(jacParser.DBL_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.match(jacParser.DBL_COLON)
                self.state = 870
                self.match(jacParser.NAME)
                self.state = 871
                self.match(jacParser.COLON)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRef"):
                listener.enterRef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRef"):
                listener.exitRef(self)

    def ref(self):

        localctx = jacParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(jacParser.T__1)
            self.state = 875
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_deref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeref"):
                listener.enterDeref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeref"):
                listener.exitDeref(self)

    def deref(self):

        localctx = jacParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(jacParser.STAR_MUL)
            self.state = 878
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_built_in(self):
            return self.getTypedRuleContext(jacParser.String_built_inContext, 0)

        def dict_built_in(self):
            return self.getTypedRuleContext(jacParser.Dict_built_inContext, 0)

        def list_built_in(self):
            return self.getTypedRuleContext(jacParser.List_built_inContext, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def cast_built_in(self):
            return self.getTypedRuleContext(jacParser.Cast_built_inContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBuilt_in"):
                listener.enterBuilt_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBuilt_in"):
                listener.exitBuilt_in(self)

    def built_in(self):

        localctx = jacParser.Built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_built_in)
        try:
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 90, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 881
                self.string_built_in()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 882
                self.dict_built_in()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 883
                self.list_built_in()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 884
                self.obj_built_in()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 885
                self.cast_built_in()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cast_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCast_built_in"):
                listener.enterCast_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCast_built_in"):
                listener.exitCast_built_in(self)

    def cast_built_in(self):

        localctx = jacParser.Cast_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_cast_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Obj_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(jacParser.KW_CONTEXT, 0)

        def KW_INFO(self):
            return self.getToken(jacParser.KW_INFO, 0)

        def KW_DETAILS(self):
            return self.getToken(jacParser.KW_DETAILS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_obj_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObj_built_in"):
                listener.enterObj_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObj_built_in"):
                listener.exitObj_built_in(self)

    def obj_built_in(self):

        localctx = jacParser.Obj_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_obj_built_in)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_CONTEXT)
                            | (1 << jacParser.KW_INFO)
                            | (1 << jacParser.KW_DETAILS)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KEYS(self):
            return self.getToken(jacParser.KW_KEYS, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def DICT_DBL_COLON(self):
            return self.getToken(jacParser.DICT_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dict_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_built_in"):
                listener.enterDict_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_built_in"):
                listener.exitDict_built_in(self)

    def dict_built_in(self):

        localctx = jacParser.Dict_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dict_built_in)
        self._la = 0  # Token type
        try:
            self.state = 909
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_KEYS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 892
                self.match(jacParser.KW_KEYS)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(jacParser.LBRACE)
                self.state = 894
                self.name_list()
                self.state = 895
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.TYP_DICT, jacParser.DICT_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_DICT]:
                    self.state = 897
                    self.match(jacParser.TYP_DICT)
                    self.state = 898
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.DICT_DBL_COLON]:
                    self.state = 899
                    self.match(jacParser.DICT_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 902
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_KEYS or _la == jacParser.NAME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
                if la_ == 1:
                    self.state = 903
                    self.match(jacParser.LPAREN)
                    self.state = 904
                    self.expr_list()
                    self.state = 905
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LENGTH(self):
            return self.getToken(jacParser.KW_LENGTH, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def LIST_DBL_COLON(self):
            return self.getToken(jacParser.LIST_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_built_in"):
                listener.enterList_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_built_in"):
                listener.exitList_built_in(self)

    def list_built_in(self):

        localctx = jacParser.List_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_list_built_in)
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_LENGTH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.match(jacParser.KW_LENGTH)
                pass
            elif token in [jacParser.TYP_LIST, jacParser.LIST_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_LIST]:
                    self.state = 912
                    self.match(jacParser.TYP_LIST)
                    self.state = 913
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.LIST_DBL_COLON]:
                    self.state = 914
                    self.match(jacParser.LIST_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 917
                self.match(jacParser.NAME)
                self.state = 922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
                if la_ == 1:
                    self.state = 918
                    self.match(jacParser.LPAREN)
                    self.state = 919
                    self.expr_list()
                    self.state = 920
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def STR_DBL_COLON(self):
            return self.getToken(jacParser.STR_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_string_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_built_in"):
                listener.enterString_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_built_in"):
                listener.exitString_built_in(self)

    def string_built_in(self):

        localctx = jacParser.String_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_string_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.TYP_STRING]:
                self.state = 926
                self.match(jacParser.TYP_STRING)
                self.state = 927
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.STR_DBL_COLON]:
                self.state = 928
                self.match(jacParser.STR_DBL_COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 931
            self.match(jacParser.NAME)
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
            if la_ == 1:
                self.state = 932
                self.match(jacParser.LPAREN)
                self.state = 933
                self.expr_list()
                self.state = 934
                self.match(jacParser.RPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_edge_ref"):
                listener.enterNode_edge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_edge_ref"):
                listener.exitNode_edge_ref(self)

    def node_edge_ref(self):

        localctx = jacParser.Node_edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_node_edge_ref)
        try:
            self.state = 949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.node_ref()
                self.state = 940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
                if la_ == 1:
                    self.state = 939
                    self.filter_ctx()

                pass
            elif token in [
                jacParser.T__2,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.T__6,
                jacParser.MINUS,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 942
                self.edge_ref()
                self.state = 947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
                if la_ == 1:
                    self.state = 943
                    self.node_ref()
                    self.state = 945
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
                    if la_ == 1:
                        self.state = 944
                        self.filter_ctx()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ref"):
                listener.enterNode_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ref"):
                listener.exitNode_ref(self)

    def node_ref(self):

        localctx = jacParser.Node_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_node_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(jacParser.KW_NODE)
            self.state = 952
            self.match(jacParser.DBL_COLON)
            self.state = 953
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_ref"):
                listener.enterWalker_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_ref"):
                listener.exitWalker_ref(self)

    def walker_ref(self):

        localctx = jacParser.Walker_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_walker_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(jacParser.KW_WALKER)
            self.state = 956
            self.match(jacParser.DBL_COLON)
            self.state = 957
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_ref"):
                listener.enterGraph_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_ref"):
                listener.exitGraph_ref(self)

    def graph_ref(self):

        localctx = jacParser.Graph_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_graph_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(jacParser.KW_GRAPH)
            self.state = 960
            self.match(jacParser.DBL_COLON)
            self.state = 961
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_to(self):
            return self.getTypedRuleContext(jacParser.Edge_toContext, 0)

        def edge_from(self):
            return self.getTypedRuleContext(jacParser.Edge_fromContext, 0)

        def edge_any(self):
            return self.getTypedRuleContext(jacParser.Edge_anyContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_ref"):
                listener.enterEdge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_ref"):
                listener.exitEdge_ref(self)

    def edge_ref(self):

        localctx = jacParser.Edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_edge_ref)
        try:
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.edge_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.edge_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.edge_any()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_toContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_to

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_to"):
                listener.enterEdge_to(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_to"):
                listener.exitEdge_to(self)

    def edge_to(self):

        localctx = jacParser.Edge_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_edge_to)
        self._la = 0  # Token type
        try:
            self.state = 980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.match(jacParser.T__2)
                pass
            elif token in [jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.match(jacParser.MINUS)
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 970
                    self.match(jacParser.LSQUARE)
                    self.state = 971
                    self.match(jacParser.NAME)
                    self.state = 974
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                    if la_ == 1:
                        self.state = 972
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 973
                        self.filter_ctx()

                    self.state = 976
                    self.match(jacParser.RSQUARE)

                self.state = 979
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_from"):
                listener.enterEdge_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_from"):
                listener.exitEdge_from(self)

    def edge_from(self):

        localctx = jacParser.Edge_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_edge_from)
        self._la = 0  # Token type
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 982
                self.match(jacParser.T__4)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 983
                self.match(jacParser.T__5)
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 984
                    self.match(jacParser.LSQUARE)
                    self.state = 985
                    self.match(jacParser.NAME)
                    self.state = 988
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
                    if la_ == 1:
                        self.state = 986
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 987
                        self.filter_ctx()

                    self.state = 990
                    self.match(jacParser.RSQUARE)

                self.state = 993
                self.match(jacParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_anyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_any

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_any"):
                listener.enterEdge_any(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_any"):
                listener.exitEdge_any(self)

    def edge_any(self):

        localctx = jacParser.Edge_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_edge_any)
        self._la = 0  # Token type
        try:
            self.state = 1008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.match(jacParser.T__6)
                pass
            elif token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 997
                self.match(jacParser.T__5)
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 998
                    self.match(jacParser.LSQUARE)
                    self.state = 999
                    self.match(jacParser.NAME)
                    self.state = 1002
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
                    if la_ == 1:
                        self.state = 1000
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 1001
                        self.filter_ctx()

                    self.state = 1004
                    self.match(jacParser.RSQUARE)

                self.state = 1007
                self.match(jacParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_val"):
                listener.enterList_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_val"):
                listener.exitList_val(self)

    def list_val(self):

        localctx = jacParser.List_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_list_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(jacParser.LSQUARE)
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__2)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.T__6)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 69)) & ~0x3F) == 0
                and (
                    (1 << (_la - 69))
                    & (
                        (1 << (jacParser.KW_ASYNC - 69))
                        | (1 << (jacParser.NOT - 69))
                        | (1 << (jacParser.KW_GLOBAL - 69))
                        | (1 << (jacParser.PLUS - 69))
                        | (1 << (jacParser.MINUS - 69))
                        | (1 << (jacParser.STAR_MUL - 69))
                        | (1 << (jacParser.LPAREN - 69))
                        | (1 << (jacParser.LSQUARE - 69))
                        | (1 << (jacParser.FLOAT - 69))
                        | (1 << (jacParser.STRING - 69))
                        | (1 << (jacParser.BOOL - 69))
                        | (1 << (jacParser.INT - 69))
                        | (1 << (jacParser.NULL - 69))
                        | (1 << (jacParser.NAME - 69))
                    )
                )
                != 0
            ):
                self.state = 1011
                self.expr_list()

            self.state = 1014
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_sliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index_slice

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndex_slice"):
                listener.enterIndex_slice(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndex_slice"):
                listener.exitIndex_slice(self)

    def index_slice(self):

        localctx = jacParser.Index_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_index_slice)
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                self.match(jacParser.LSQUARE)
                self.state = 1017
                self.expression()
                self.state = 1018
                self.match(jacParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1020
                self.match(jacParser.LSQUARE)
                self.state = 1021
                self.expression()
                self.state = 1022
                self.match(jacParser.COLON)
                self.state = 1023
                self.expression()
                self.state = 1024
                self.match(jacParser.RSQUARE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def kv_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(jacParser.Kv_pairContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dict_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_val"):
                listener.enterDict_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_val"):
                listener.exitDict_val(self)

    def dict_val(self):

        localctx = jacParser.Dict_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_dict_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(jacParser.LBRACE)
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.STRING:
                self.state = 1029
                self.kv_pair()
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1030
                    self.match(jacParser.COMMA)
                    self.state = 1031
                    self.kv_pair()
                    self.state = 1036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1039
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kv_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_kv_pair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKv_pair"):
                listener.enterKv_pair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKv_pair"):
                listener.exitKv_pair(self)

    def kv_pair(self):

        localctx = jacParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(jacParser.STRING)
            self.state = 1042
            self.match(jacParser.COLON)
            self.state = 1043
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def spawn_object(self):
            return self.getTypedRuleContext(jacParser.Spawn_objectContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn"):
                listener.enterSpawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn"):
                listener.exitSpawn(self)

    def spawn(self):

        localctx = jacParser.SpawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(jacParser.KW_SPAWN)
            self.state = 1046
            self.spawn_object()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_objectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_spawn(self):
            return self.getTypedRuleContext(jacParser.Node_spawnContext, 0)

        def walker_spawn(self):
            return self.getTypedRuleContext(jacParser.Walker_spawnContext, 0)

        def graph_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_spawnContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_object

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_object"):
                listener.enterSpawn_object(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_object"):
                listener.exitSpawn_object(self)

    def spawn_object(self):

        localctx = jacParser.Spawn_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_spawn_object)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.node_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.walker_spawn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1050
                self.graph_spawn()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_edgeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_edge

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_edge"):
                listener.enterSpawn_edge(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_edge"):
                listener.exitSpawn_edge(self)

    def spawn_edge(self):

        localctx = jacParser.Spawn_edgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_spawn_edge)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.expression()
            self.state = 1054
            self.edge_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_spawn"):
                listener.enterNode_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_spawn"):
                listener.exitNode_spawn(self)

    def node_spawn(self):

        localctx = jacParser.Node_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_node_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.state = 1056
                self.spawn_edge()

            self.state = 1059
            self.node_ref()
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
            if la_ == 1:
                self.state = 1060
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_spawn"):
                listener.enterGraph_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_spawn"):
                listener.exitGraph_spawn(self)

    def graph_spawn(self):

        localctx = jacParser.Graph_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_graph_spawn)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__2)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.T__6)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 69)) & ~0x3F) == 0
                and (
                    (1 << (_la - 69))
                    & (
                        (1 << (jacParser.KW_ASYNC - 69))
                        | (1 << (jacParser.NOT - 69))
                        | (1 << (jacParser.KW_GLOBAL - 69))
                        | (1 << (jacParser.PLUS - 69))
                        | (1 << (jacParser.MINUS - 69))
                        | (1 << (jacParser.STAR_MUL - 69))
                        | (1 << (jacParser.LPAREN - 69))
                        | (1 << (jacParser.LSQUARE - 69))
                        | (1 << (jacParser.FLOAT - 69))
                        | (1 << (jacParser.STRING - 69))
                        | (1 << (jacParser.BOOL - 69))
                        | (1 << (jacParser.INT - 69))
                        | (1 << (jacParser.NULL - 69))
                        | (1 << (jacParser.NAME - 69))
                    )
                )
                != 0
            ):
                self.state = 1063
                self.spawn_edge()

            self.state = 1066
            self.graph_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_spawn"):
                listener.enterWalker_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_spawn"):
                listener.exitWalker_spawn(self)

    def walker_spawn(self):

        localctx = jacParser.Walker_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_walker_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.expression()
            self.state = 1069
            self.walker_ref()
            self.state = 1071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
            if la_ == 1:
                self.state = 1070
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Spawn_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Spawn_assignContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_ctx"):
                listener.enterSpawn_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_ctx"):
                listener.exitSpawn_ctx(self)

    def spawn_ctx(self):

        localctx = jacParser.Spawn_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_spawn_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(jacParser.LPAREN)
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1074
                self.spawn_assign()
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1075
                    self.match(jacParser.COMMA)
                    self.state = 1076
                    self.spawn_assign()
                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1084
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def filter_compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Filter_compareContext)
            else:
                return self.getTypedRuleContext(jacParser.Filter_compareContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_filter_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_ctx"):
                listener.enterFilter_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_ctx"):
                listener.exitFilter_ctx(self)

    def filter_ctx(self):

        localctx = jacParser.Filter_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_filter_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(jacParser.LPAREN)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1087
                self.filter_compare()
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1088
                    self.match(jacParser.COMMA)
                    self.state = 1089
                    self.filter_compare()
                    self.state = 1094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1097
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_assign"):
                listener.enterSpawn_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_assign"):
                listener.exitSpawn_assign(self)

    def spawn_assign(self):

        localctx = jacParser.Spawn_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_spawn_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(jacParser.NAME)
            self.state = 1100
            self.match(jacParser.EQ)
            self.state = 1101
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_compareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def cmp_op(self):
            return self.getTypedRuleContext(jacParser.Cmp_opContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_filter_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_compare"):
                listener.enterFilter_compare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_compare"):
                listener.exitFilter_compare(self)

    def filter_compare(self):

        localctx = jacParser.Filter_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_filter_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(jacParser.NAME)
            self.state = 1104
            self.cmp_op()
            self.state = 1105
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def TYP_INT(self):
            return self.getToken(jacParser.TYP_INT, 0)

        def TYP_FLOAT(self):
            return self.getToken(jacParser.TYP_FLOAT, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def TYP_BOOL(self):
            return self.getToken(jacParser.TYP_BOOL, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_any_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAny_type"):
                listener.enterAny_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAny_type"):
                listener.exitAny_type(self)

    def any_type(self):

        localctx = jacParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_any_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_graphContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_DIGRAPH(self):
            return self.getToken(jacParser.KW_DIGRAPH, 0)

        def KW_STRICT(self):
            return self.getToken(jacParser.KW_STRICT, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_graph

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_graph"):
                listener.enterDot_graph(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_graph"):
                listener.exitDot_graph(self)

    def dot_graph(self):

        localctx = jacParser.Dot_graphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_dot_graph)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_STRICT:
                self.state = 1109
                self.match(jacParser.KW_STRICT)

            self.state = 1112
            _la = self._input.LA(1)
            if not (_la == jacParser.KW_GRAPH or _la == jacParser.KW_DIGRAPH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 96)) & ~0x3F) == 0
                and (
                    (1 << (_la - 96))
                    & (
                        (1 << (jacParser.FLOAT - 96))
                        | (1 << (jacParser.STRING - 96))
                        | (1 << (jacParser.INT - 96))
                        | (1 << (jacParser.NAME - 96))
                    )
                )
                != 0
            ):
                self.state = 1113
                self.dot_id()

            self.state = 1116
            self.match(jacParser.LBRACE)
            self.state = 1117
            self.dot_stmt_list()
            self.state = 1118
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_stmt_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_stmtContext, i)

        def SEMI(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.SEMI)
            else:
                return self.getToken(jacParser.SEMI, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_stmt_list"):
                listener.enterDot_stmt_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_stmt_list"):
                listener.exitDot_stmt_list(self)

    def dot_stmt_list(self):

        localctx = jacParser.Dot_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dot_stmt_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_SUBGRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                    )
                )
                != 0
            ) or (
                (((_la - 96)) & ~0x3F) == 0
                and (
                    (1 << (_la - 96))
                    & (
                        (1 << (jacParser.FLOAT - 96))
                        | (1 << (jacParser.STRING - 96))
                        | (1 << (jacParser.INT - 96))
                        | (1 << (jacParser.NAME - 96))
                    )
                )
                != 0
            ):
                self.state = 1120
                self.dot_stmt()
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.SEMI:
                    self.state = 1121
                    self.match(jacParser.SEMI)

                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_node_stmtContext, 0)

        def dot_edge_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_edge_stmtContext, 0)

        def dot_attr_stmt(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_stmtContext, 0)

        def dot_id(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext, i)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_stmt"):
                listener.enterDot_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_stmt"):
                listener.exitDot_stmt(self)

    def dot_stmt(self):

        localctx = jacParser.Dot_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dot_stmt)
        try:
            self.state = 1137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 130, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1129
                self.dot_node_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                self.dot_edge_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1131
                self.dot_attr_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1132
                self.dot_id()
                self.state = 1133
                self.match(jacParser.EQ)
                self.state = 1134
                self.dot_id()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1136
                self.dot_subgraph()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_attr_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_attr_stmt"):
                listener.enterDot_attr_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_attr_stmt"):
                listener.exitDot_attr_stmt(self)

    def dot_attr_stmt(self):

        localctx = jacParser.Dot_attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_dot_attr_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_GRAPH)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1140
            self.dot_attr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_attr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.LSQUARE)
            else:
                return self.getToken(jacParser.LSQUARE, i)

        def RSQUARE(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.RSQUARE)
            else:
                return self.getToken(jacParser.RSQUARE, i)

        def dot_a_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_a_listContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_a_listContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_attr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_attr_list"):
                listener.enterDot_attr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_attr_list"):
                listener.exitDot_attr_list(self)

    def dot_attr_list(self):

        localctx = jacParser.Dot_attr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dot_attr_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1142
                self.match(jacParser.LSQUARE)
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_GRAPH)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 96)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 96))
                        & (
                            (1 << (jacParser.FLOAT - 96))
                            | (1 << (jacParser.STRING - 96))
                            | (1 << (jacParser.INT - 96))
                            | (1 << (jacParser.NAME - 96))
                        )
                    )
                    != 0
                ):
                    self.state = 1143
                    self.dot_a_list()

                self.state = 1146
                self.match(jacParser.RSQUARE)
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == jacParser.LSQUARE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_a_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_a_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_a_list"):
                listener.enterDot_a_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_a_list"):
                listener.exitDot_a_list(self)

    def dot_a_list(self):

        localctx = jacParser.Dot_a_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_dot_a_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1151
                self.dot_id()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.EQ:
                    self.state = 1152
                    self.match(jacParser.EQ)
                    self.state = 1153
                    self.dot_id()

                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 1156
                    self.match(jacParser.COMMA)

                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << jacParser.KW_GRAPH)
                                | (1 << jacParser.KW_NODE)
                                | (1 << jacParser.KW_EDGE)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 96)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 96))
                            & (
                                (1 << (jacParser.FLOAT - 96))
                                | (1 << (jacParser.STRING - 96))
                                | (1 << (jacParser.INT - 96))
                                | (1 << (jacParser.NAME - 96))
                            )
                        )
                        != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_edge_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeRHS(self):
            return self.getTypedRuleContext(jacParser.Dot_edgeRHSContext, 0)

        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext, 0)

        def dot_subgraph(self):
            return self.getTypedRuleContext(jacParser.Dot_subgraphContext, 0)

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_edge_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_edge_stmt"):
                listener.enterDot_edge_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_edge_stmt"):
                listener.exitDot_edge_stmt(self)

    def dot_edge_stmt(self):

        localctx = jacParser.Dot_edge_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_dot_edge_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                jacParser.KW_GRAPH,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
                jacParser.FLOAT,
                jacParser.STRING,
                jacParser.INT,
                jacParser.NAME,
            ]:
                self.state = 1163
                self.dot_node_id()
                pass
            elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                self.state = 1164
                self.dot_subgraph()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1167
            self.dot_edgeRHS()
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.LSQUARE:
                self.state = 1168
                self.dot_attr_list()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_edgeRHSContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_edgeop(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_edgeopContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_edgeopContext, i)

        def dot_node_id(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_node_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_node_idContext, i)

        def dot_subgraph(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_subgraphContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_subgraphContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeRHS

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_edgeRHS"):
                listener.enterDot_edgeRHS(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_edgeRHS"):
                listener.exitDot_edgeRHS(self)

    def dot_edgeRHS(self):

        localctx = jacParser.Dot_edgeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dot_edgeRHS)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1171
                self.dot_edgeop()
                self.state = 1174
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    jacParser.KW_GRAPH,
                    jacParser.KW_NODE,
                    jacParser.KW_EDGE,
                    jacParser.FLOAT,
                    jacParser.STRING,
                    jacParser.INT,
                    jacParser.NAME,
                ]:
                    self.state = 1172
                    self.dot_node_id()
                    pass
                elif token in [jacParser.KW_SUBGRAPH, jacParser.LBRACE]:
                    self.state = 1173
                    self.dot_subgraph()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == jacParser.T__3 or _la == jacParser.T__7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_edgeopContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return jacParser.RULE_dot_edgeop

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_edgeop"):
                listener.enterDot_edgeop(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_edgeop"):
                listener.exitDot_edgeop(self)

    def dot_edgeop(self):

        localctx = jacParser.Dot_edgeopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_dot_edgeop)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            _la = self._input.LA(1)
            if not (_la == jacParser.T__3 or _la == jacParser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_node_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_node_id(self):
            return self.getTypedRuleContext(jacParser.Dot_node_idContext, 0)

        def dot_attr_list(self):
            return self.getTypedRuleContext(jacParser.Dot_attr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_node_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_node_stmt"):
                listener.enterDot_node_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_node_stmt"):
                listener.exitDot_node_stmt(self)

    def dot_node_stmt(self):

        localctx = jacParser.Dot_node_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_dot_node_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.dot_node_id()
            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.LSQUARE:
                self.state = 1183
                self.dot_attr_list()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_node_idContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext, 0)

        def dot_port(self):
            return self.getTypedRuleContext(jacParser.Dot_portContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_node_id

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_node_id"):
                listener.enterDot_node_id(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_node_id"):
                listener.exitDot_node_id(self)

    def dot_node_id(self):

        localctx = jacParser.Dot_node_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_dot_node_id)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.dot_id()
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 1187
                self.dot_port()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_portContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def dot_id(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dot_idContext)
            else:
                return self.getTypedRuleContext(jacParser.Dot_idContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_dot_port

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_port"):
                listener.enterDot_port(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_port"):
                listener.exitDot_port(self)

    def dot_port(self):

        localctx = jacParser.Dot_portContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_dot_port)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(jacParser.COLON)
            self.state = 1191
            self.dot_id()
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 1192
                self.match(jacParser.COLON)
                self.state = 1193
                self.dot_id()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_subgraphContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def dot_stmt_list(self):
            return self.getTypedRuleContext(jacParser.Dot_stmt_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_SUBGRAPH(self):
            return self.getToken(jacParser.KW_SUBGRAPH, 0)

        def dot_id(self):
            return self.getTypedRuleContext(jacParser.Dot_idContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_subgraph

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_subgraph"):
                listener.enterDot_subgraph(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_subgraph"):
                listener.exitDot_subgraph(self)

    def dot_subgraph(self):

        localctx = jacParser.Dot_subgraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_dot_subgraph)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_SUBGRAPH:
                self.state = 1196
                self.match(jacParser.KW_SUBGRAPH)
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_GRAPH)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 96)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 96))
                        & (
                            (1 << (jacParser.FLOAT - 96))
                            | (1 << (jacParser.STRING - 96))
                            | (1 << (jacParser.INT - 96))
                            | (1 << (jacParser.NAME - 96))
                        )
                    )
                    != 0
                ):
                    self.state = 1197
                    self.dot_id()

            self.state = 1202
            self.match(jacParser.LBRACE)
            self.state = 1203
            self.dot_stmt_list()
            self.state = 1204
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_idContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dot_id

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDot_id"):
                listener.enterDot_id(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDot_id"):
                listener.exitDot_id(self)

    def dot_id(self):

        localctx = jacParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_dot_id)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_GRAPH)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 96)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 96))
                        & (
                            (1 << (jacParser.FLOAT - 96))
                            | (1 << (jacParser.STRING - 96))
                            | (1 << (jacParser.INT - 96))
                            | (1 << (jacParser.NAME - 96))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[62] = self.atom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def atom_sempred(self, localctx: AtomContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 5)
