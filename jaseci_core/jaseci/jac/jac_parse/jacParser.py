# Generated from jac.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3s")
        buf.write("\u04a4\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\3\2\5\2\u00d6\n\2\3\2\7\2\u00d9\n\2\f")
        buf.write("\2\16\2\u00dc\13\2\3\2\7\2\u00df\n\2\f\2\16\2\u00e2\13")
        buf.write("\2\3\2\3\2\3\3\3\3\3\3\3\3\5\3\u00ea\n\3\3\4\3\4\3\4\3")
        buf.write("\4\5\4\u00f0\n\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\5\5\u00fa")
        buf.write("\n\5\3\5\3\5\5\5\u00fe\n\5\3\5\3\5\3\5\5\5\u0103\n\5\3")
        buf.write("\5\3\5\5\5\u0107\n\5\3\5\3\5\3\5\5\5\u010c\n\5\3\5\3\5")
        buf.write("\5\5\u0110\n\5\3\5\3\5\3\5\5\5\u0115\n\5\3\5\3\5\5\5\u0119")
        buf.write("\n\5\3\5\3\5\3\5\3\5\5\5\u011f\n\5\3\5\3\5\5\5\u0123\n")
        buf.write("\5\3\5\3\5\3\5\5\5\u0128\n\5\3\5\3\5\5\5\u012c\n\5\5\5")
        buf.write("\u012e\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u0135\n\6\3\7\3\7\3")
        buf.write("\7\5\7\u013a\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0144")
        buf.write("\n\b\f\b\16\b\u0147\13\b\3\b\3\b\3\t\3\t\3\t\3\t\7\t\u014f")
        buf.write("\n\t\f\t\16\t\u0152\13\t\3\t\3\t\3\t\3\t\3\t\7\t\u0159")
        buf.write("\n\t\f\t\16\t\u015c\13\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\5\t\u0166\n\t\3\t\3\t\3\t\5\t\u016b\n\t\3\t\5\t\u016e")
        buf.write("\n\t\3\n\3\n\7\n\u0172\n\n\f\n\16\n\u0175\13\n\3\n\5\n")
        buf.write("\u0178\n\n\3\n\3\n\7\n\u017c\n\n\f\n\16\n\u017f\13\n\3")
        buf.write("\n\5\n\u0182\n\n\3\n\3\n\3\13\3\13\5\13\u0188\n\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u018f\n\13\3\13\3\13\3\13\5")
        buf.write("\13\u0194\n\13\3\13\3\13\5\13\u0198\n\13\3\13\3\13\5\13")
        buf.write("\u019c\n\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\17\3\20\3\20\7\20\u01af\n\20\f")
        buf.write("\20\16\20\u01b2\13\20\3\20\3\20\3\20\3\20\5\20\u01b8\n")
        buf.write("\20\3\21\3\21\5\21\u01bc\n\21\3\22\3\22\7\22\u01c0\n\22")
        buf.write("\f\22\16\22\u01c3\13\22\3\22\3\22\3\22\3\22\5\22\u01c9")
        buf.write("\n\22\3\23\7\23\u01cc\n\23\f\23\16\23\u01cf\13\23\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\5\25\u01e1\n\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\27\3\27\3\27\3\27\7\27\u01ec\n\27\f\27\16\27")
        buf.write("\u01ef\13\27\3\27\3\27\3\30\5\30\u01f4\n\30\3\30\5\30")
        buf.write("\u01f7\n\30\3\30\3\30\3\30\3\30\5\30\u01fd\n\30\3\31\3")
        buf.write("\31\3\31\3\31\3\31\5\31\u0204\n\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\5\31\u020b\n\31\7\31\u020d\n\31\f\31\16\31\u0210")
        buf.write("\13\31\3\31\3\31\3\31\3\31\3\31\5\31\u0217\n\31\3\31\5")
        buf.write("\31\u021a\n\31\3\32\3\32\5\32\u021e\n\32\3\32\3\32\3\33")
        buf.write("\3\33\5\33\u0224\n\33\3\33\3\33\3\33\5\33\u0229\n\33\3")
        buf.write("\34\3\34\3\34\3\34\3\35\3\35\3\35\7\35\u0232\n\35\f\35")
        buf.write("\16\35\u0235\13\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u023d\n\36\3\37\3\37\3\37\7\37\u0242\n\37\f\37\16\37")
        buf.write("\u0245\13\37\3 \3 \3 \3 \3 \3 \3 \7 \u024e\n \f \16 \u0251")
        buf.write("\13 \3!\3!\7!\u0255\n!\f!\16!\u0258\13!\3!\3!\3!\5!\u025d")
        buf.write('\n!\3"\3"\3"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3')
        buf.write("#\3#\3#\3#\3#\3#\5#\u0274\n#\3$\3$\3$\3$\7$\u027a\n$\f")
        buf.write("$\16$\u027d\13$\3$\5$\u0280\n$\3%\3%\3%\5%\u0285\n%\3")
        buf.write("&\3&\3&\3&\5&\u028b\n&\3&\3&\3&\3&\5&\u0291\n&\3&\5&\u0294")
        buf.write("\n&\3'\3'\3'\3'\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\5)\u02a9\n)\3)\3)\3)\3)\5)\u02af\n)\3*\3*\3")
        buf.write("*\3*\3+\3+\3,\3,\3,\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\5.\u02c9\n.\3/\3/\3/\3/\5/\u02cf\n/\3\60\3")
        buf.write("\60\3\60\3\60\3\61\3\61\3\61\5\61\u02d8\n\61\3\61\3\61")
        buf.write("\3\61\5\61\u02dd\n\61\3\62\3\62\3\62\5\62\u02e2\n\62\3")
        buf.write("\63\3\63\3\63\3\63\3\63\5\63\u02e9\n\63\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u02ef\n\64\3\65\3\65\3\65\3\66\3\66\3\66\3")
        buf.write("\67\3\67\3\67\38\38\38\38\58\u02fe\n8\38\38\58\u0302\n")
        buf.write("8\39\39\39\79\u0307\n9\f9\169\u030a\139\3:\3:\3:\3:\3")
        buf.write(":\3:\7:\u0312\n:\f:\16:\u0315\13:\5:\u0317\n:\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\5;\u0321\n;\3<\3<\3<\3=\3=\3=\7=\u0329")
        buf.write("\n=\f=\16=\u032c\13=\3>\3>\3>\7>\u0331\n>\f>\16>\u0334")
        buf.write("\13>\3?\3?\3?\5?\u0339\n?\3@\3@\3@\7@\u033e\n@\f@\16@")
        buf.write("\u0341\13@\3A\3A\3A\3A\5A\u0347\nA\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u035b\nB\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u0363\nB\3B\3B\7B\u0367\nB\fB\16B\u036a")
        buf.write("\13B\3C\3C\3C\3C\3C\3C\3C\5C\u0373\nC\3C\3C\3C\3C\5C\u0379")
        buf.write("\nC\5C\u037b\nC\3D\3D\3D\3D\5D\u0381\nD\3E\3E\3E\3F\3")
        buf.write("F\3F\3G\3G\3G\3G\3G\3G\5G\u038f\nG\3H\3H\3I\3I\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\5J\u039d\nJ\3J\3J\3J\3J\3J\5J\u03a4\n")
        buf.write("J\5J\u03a6\nJ\3K\3K\3K\3K\5K\u03ac\nK\3K\3K\3K\3K\3K\5")
        buf.write("K\u03b3\nK\5K\u03b5\nK\3L\3L\3L\5L\u03ba\nL\3L\3L\3L\3")
        buf.write("L\3L\5L\u03c1\nL\3M\3M\5M\u03c5\nM\3M\5M\u03c8\nM\3M\3")
        buf.write("M\5M\u03cc\nM\5M\u03ce\nM\3N\3N\3N\3O\3O\3O\3P\3P\3P\3")
        buf.write("Q\3Q\3Q\3R\3R\3R\5R\u03df\nR\3S\3S\3S\3S\3S\5S\u03e6\n")
        buf.write("S\3S\5S\u03e9\nS\3S\5S\u03ec\nS\3T\3T\3T\3T\3T\5T\u03f3")
        buf.write("\nT\3T\5T\u03f6\nT\3T\5T\u03f9\nT\3U\3U\3U\3U\3U\5U\u0400")
        buf.write("\nU\3U\5U\u0403\nU\3U\5U\u0406\nU\3V\3V\3V\5V\u040b\n")
        buf.write("V\3W\3W\3W\3W\3W\5W\u0412\nW\3W\5W\u0415\nW\3W\5W\u0418")
        buf.write("\nW\3X\3X\3X\3X\3X\5X\u041f\nX\3X\5X\u0422\nX\3X\5X\u0425")
        buf.write("\nX\3Y\3Y\3Y\3Y\3Y\5Y\u042c\nY\3Y\5Y\u042f\nY\3Y\5Y\u0432")
        buf.write("\nY\3Z\3Z\5Z\u0436\nZ\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\3[\5[\u0444\n[\3\\\3\\\3\\\3\\\7\\\u044a\n\\\f\\\16")
        buf.write("\\\u044d\13\\\5\\\u044f\n\\\3\\\3\\\3]\3]\3]\3]\3^\3^")
        buf.write("\3^\3_\3_\3_\3_\5_\u045e\n_\3`\3`\3`\3a\5a\u0464\na\3")
        buf.write("a\3a\5a\u0468\na\3b\5b\u046b\nb\3b\3b\3c\3c\5c\u0471\n")
        buf.write("c\3c\3c\5c\u0475\nc\3d\3d\5d\u0479\nd\3e\3e\3e\3e\7e\u047f")
        buf.write("\ne\fe\16e\u0482\13e\5e\u0484\ne\3e\3e\3f\3f\3f\3f\7f")
        buf.write("\u048c\nf\ff\16f\u048f\13f\5f\u0491\nf\3f\3f\3g\3g\3g")
        buf.write("\3g\3h\3h\3h\3h\3i\3i\3j\6j\u04a0\nj\rj\16j\u04a1\3j\2")
        buf.write('\3\u0082k\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 "$&')
        buf.write("(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~")
        buf.write("\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write('\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\2\13\4\2\33\34"')
        buf.write('"\4\2GHKK\3\29<\3\2>?\3\2_`\3\2ac\3\2\37!\4\2\36\36n')
        buf.write("n\5\2\16\24\26\26\61\61\2\u0506\2\u00d5\3\2\2\2\4\u00e5")
        buf.write("\3\2\2\2\6\u00eb\3\2\2\2\b\u012d\3\2\2\2\n\u0134\3\2\2")
        buf.write("\2\f\u0139\3\2\2\2\16\u013b\3\2\2\2\20\u016d\3\2\2\2\22")
        buf.write("\u016f\3\2\2\2\24\u0185\3\2\2\2\26\u019d\3\2\2\2\30\u01a0")
        buf.write("\3\2\2\2\32\u01a4\3\2\2\2\34\u01a8\3\2\2\2\36\u01b7\3")
        buf.write('\2\2\2 \u01bb\3\2\2\2"\u01c8\3\2\2\2$\u01cd\3\2\2\2&')
        buf.write("\u01d0\3\2\2\2(\u01e0\3\2\2\2*\u01e2\3\2\2\2,\u01e7\3")
        buf.write("\2\2\2.\u01f3\3\2\2\2\60\u0219\3\2\2\2\62\u021b\3\2\2")
        buf.write("\2\64\u0221\3\2\2\2\66\u022a\3\2\2\28\u022e\3\2\2\2:\u023c")
        buf.write("\3\2\2\2<\u023e\3\2\2\2>\u0246\3\2\2\2@\u025c\3\2\2\2")
        buf.write("B\u025e\3\2\2\2D\u0273\3\2\2\2F\u0275\3\2\2\2H\u0281\3")
        buf.write("\2\2\2J\u0293\3\2\2\2L\u0295\3\2\2\2N\u0299\3\2\2\2P\u02ae")
        buf.write("\3\2\2\2R\u02b0\3\2\2\2T\u02b4\3\2\2\2V\u02b6\3\2\2\2")
        buf.write("X\u02b9\3\2\2\2Z\u02c8\3\2\2\2\\\u02ce\3\2\2\2^\u02d0")
        buf.write("\3\2\2\2`\u02d4\3\2\2\2b\u02de\3\2\2\2d\u02e3\3\2\2\2")
        buf.write("f\u02ea\3\2\2\2h\u02f0\3\2\2\2j\u02f3\3\2\2\2l\u02f6\3")
        buf.write("\2\2\2n\u02f9\3\2\2\2p\u0303\3\2\2\2r\u0316\3\2\2\2t\u0320")
        buf.write("\3\2\2\2v\u0322\3\2\2\2x\u0325\3\2\2\2z\u032d\3\2\2\2")
        buf.write("|\u0338\3\2\2\2~\u033a\3\2\2\2\u0080\u0342\3\2\2\2\u0082")
        buf.write("\u0362\3\2\2\2\u0084\u037a\3\2\2\2\u0086\u0380\3\2\2\2")
        buf.write("\u0088\u0382\3\2\2\2\u008a\u0385\3\2\2\2\u008c\u038e\3")
        buf.write("\2\2\2\u008e\u0390\3\2\2\2\u0090\u0392\3\2\2\2\u0092\u03a5")
        buf.write("\3\2\2\2\u0094\u03b4\3\2\2\2\u0096\u03b9\3\2\2\2\u0098")
        buf.write("\u03cd\3\2\2\2\u009a\u03cf\3\2\2\2\u009c\u03d2\3\2\2\2")
        buf.write("\u009e\u03d5\3\2\2\2\u00a0\u03d8\3\2\2\2\u00a2\u03de\3")
        buf.write("\2\2\2\u00a4\u03eb\3\2\2\2\u00a6\u03f8\3\2\2\2\u00a8\u0405")
        buf.write("\3\2\2\2\u00aa\u040a\3\2\2\2\u00ac\u0417\3\2\2\2\u00ae")
        buf.write("\u0424\3\2\2\2\u00b0\u0431\3\2\2\2\u00b2\u0433\3\2\2\2")
        buf.write("\u00b4\u0443\3\2\2\2\u00b6\u0445\3\2\2\2\u00b8\u0452\3")
        buf.write("\2\2\2\u00ba\u0456\3\2\2\2\u00bc\u045d\3\2\2\2\u00be\u045f")
        buf.write("\3\2\2\2\u00c0\u0463\3\2\2\2\u00c2\u046a\3\2\2\2\u00c4")
        buf.write("\u046e\3\2\2\2\u00c6\u0476\3\2\2\2\u00c8\u047a\3\2\2\2")
        buf.write("\u00ca\u0487\3\2\2\2\u00cc\u0494\3\2\2\2\u00ce\u0498\3")
        buf.write("\2\2\2\u00d0\u049c\3\2\2\2\u00d2\u049f\3\2\2\2\u00d4\u00d6")
        buf.write("\5\4\3\2\u00d5\u00d4\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6")
        buf.write("\u00da\3\2\2\2\u00d7\u00d9\5\6\4\2\u00d8\u00d7\3\2\2\2")
        buf.write("\u00d9\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2\u00da\u00db\3")
        buf.write("\2\2\2\u00db\u00e0\3\2\2\2\u00dc\u00da\3\2\2\2\u00dd\u00df")
        buf.write("\5\f\7\2\u00de\u00dd\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0")
        buf.write("\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e3\3\2\2\2")
        buf.write("\u00e2\u00e0\3\2\2\2\u00e3\u00e4\7\2\2\3\u00e4\3\3\2\2")
        buf.write("\2\u00e5\u00e6\7\3\2\2\u00e6\u00e7\7$\2\2\u00e7\u00e9")
        buf.write("\7j\2\2\u00e8\u00ea\7\67\2\2\u00e9\u00e8\3\2\2\2\u00e9")
        buf.write("\u00ea\3\2\2\2\u00ea\5\3\2\2\2\u00eb\u00ec\7#\2\2\u00ec")
        buf.write("\u00ef\7/\2\2\u00ed\u00f0\5\b\5\2\u00ee\u00f0\7a\2\2\u00ef")
        buf.write("\u00ed\3\2\2\2\u00ef\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2")
        buf.write("\u00f1\u00f2\7\60\2\2\u00f2\u00f3\7\32\2\2\u00f3\u00f4")
        buf.write("\7j\2\2\u00f4\u00f5\7\67\2\2\u00f5\7\3\2\2\2\u00f6\u00f9")
        buf.write("\7+\2\2\u00f7\u00fa\7a\2\2\u00f8\u00fa\5\n\6\2\u00f9\u00f7")
        buf.write("\3\2\2\2\u00f9\u00f8\3\2\2\2\u00fa\u00fd\3\2\2\2\u00fb")
        buf.write("\u00fc\7]\2\2\u00fc\u00fe\5\b\5\2\u00fd\u00fb\3\2\2\2")
        buf.write("\u00fd\u00fe\3\2\2\2\u00fe\u012e\3\2\2\2\u00ff\u0102\7")
        buf.write(")\2\2\u0100\u0103\7a\2\2\u0101\u0103\5\n\6\2\u0102\u0100")
        buf.write("\3\2\2\2\u0102\u0101\3\2\2\2\u0103\u0106\3\2\2\2\u0104")
        buf.write("\u0105\7]\2\2\u0105\u0107\5\b\5\2\u0106\u0104\3\2\2\2")
        buf.write("\u0106\u0107\3\2\2\2\u0107\u012e\3\2\2\2\u0108\u010b\7")
        buf.write("*\2\2\u0109\u010c\7a\2\2\u010a\u010c\5\n\6\2\u010b\u0109")
        buf.write("\3\2\2\2\u010b\u010a\3\2\2\2\u010c\u010f\3\2\2\2\u010d")
        buf.write("\u010e\7]\2\2\u010e\u0110\5\b\5\2\u010f\u010d\3\2\2\2")
        buf.write("\u010f\u0110\3\2\2\2\u0110\u012e\3\2\2\2\u0111\u0114\7")
        buf.write(",\2\2\u0112\u0115\7a\2\2\u0113\u0115\5\n\6\2\u0114\u0112")
        buf.write("\3\2\2\2\u0114\u0113\3\2\2\2\u0115\u0118\3\2\2\2\u0116")
        buf.write("\u0117\7]\2\2\u0117\u0119\5\b\5\2\u0118\u0116\3\2\2\2")
        buf.write("\u0118\u0119\3\2\2\2\u0119\u012e\3\2\2\2\u011a\u011b\7")
        buf.write("[\2\2\u011b\u011e\7%\2\2\u011c\u011f\7a\2\2\u011d\u011f")
        buf.write("\5\n\6\2\u011e\u011c\3\2\2\2\u011e\u011d\3\2\2\2\u011f")
        buf.write("\u0122\3\2\2\2\u0120\u0121\7]\2\2\u0121\u0123\5\b\5\2")
        buf.write("\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u012e\3")
        buf.write("\2\2\2\u0124\u0127\7-\2\2\u0125\u0128\7a\2\2\u0126\u0128")
        buf.write("\5\n\6\2\u0127\u0125\3\2\2\2\u0127\u0126\3\2\2\2\u0128")
        buf.write("\u012b\3\2\2\2\u0129\u012a\7]\2\2\u012a\u012c\5\b\5\2")
        buf.write("\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012e\3")
        buf.write("\2\2\2\u012d\u00f6\3\2\2\2\u012d\u00ff\3\2\2\2\u012d\u0108")
        buf.write("\3\2\2\2\u012d\u0111\3\2\2\2\u012d\u011a\3\2\2\2\u012d")
        buf.write("\u0124\3\2\2\2\u012e\t\3\2\2\2\u012f\u0135\7n\2\2\u0130")
        buf.write("\u0131\7/\2\2\u0131\u0132\58\35\2\u0132\u0133\7\60\2\2")
        buf.write("\u0133\u0135\3\2\2\2\u0134\u012f\3\2\2\2\u0134\u0130\3")
        buf.write("\2\2\2\u0135\13\3\2\2\2\u0136\u013a\5\16\b\2\u0137\u013a")
        buf.write("\5\20\t\2\u0138\u013a\5\24\13\2\u0139\u0136\3\2\2\2\u0139")
        buf.write("\u0137\3\2\2\2\u0139\u0138\3\2\2\2\u013a\r\3\2\2\2\u013b")
        buf.write("\u013c\7[\2\2\u013c\u013d\7n\2\2\u013d\u013e\78\2\2\u013e")
        buf.write("\u0145\5f\64\2\u013f\u0140\7]\2\2\u0140\u0141\7n\2\2\u0141")
        buf.write("\u0142\78\2\2\u0142\u0144\5f\64\2\u0143\u013f\3\2\2\2")
        buf.write("\u0144\u0147\3\2\2\2\u0145\u0143\3\2\2\2\u0145\u0146\3")
        buf.write("\2\2\2\u0146\u0148\3\2\2\2\u0147\u0145\3\2\2\2\u0148\u0149")
        buf.write("\7\67\2\2\u0149\17\3\2\2\2\u014a\u014b\7\26\2\2\u014b")
        buf.write("\u0150\7n\2\2\u014c\u014d\7$\2\2\u014d\u014f\7n\2\2\u014e")
        buf.write("\u014c\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u014e\3\2\2\2")
        buf.write("\u0150\u0151\3\2\2\2\u0151\u0153\3\2\2\2\u0152\u0150\3")
        buf.write("\2\2\2\u0153\u016e\5\36\20\2\u0154\u0155\7\61\2\2\u0155")
        buf.write("\u015a\7n\2\2\u0156\u0157\7$\2\2\u0157\u0159\7n\2\2\u0158")
        buf.write("\u0156\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2")
        buf.write("\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u015a\3")
        buf.write("\2\2\2\u015d\u016e\5\36\20\2\u015e\u015f\7\24\2\2\u015f")
        buf.write('\u0160\7n\2\2\u0160\u016e\5"\22\2\u0161\u0162\7\25\2')
        buf.write("\2\u0162\u0163\7n\2\2\u0163\u016e\5&\24\2\u0164\u0166")
        buf.write("\7\63\2\2\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2\2\u0166")
        buf.write("\u0167\3\2\2\2\u0167\u0168\7\62\2\2\u0168\u016a\7n\2\2")
        buf.write("\u0169\u016b\5\26\f\2\u016a\u0169\3\2\2\2\u016a\u016b")
        buf.write("\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016e\5\22\n\2\u016d")
        buf.write("\u014a\3\2\2\2\u016d\u0154\3\2\2\2\u016d\u015e\3\2\2\2")
        buf.write("\u016d\u0161\3\2\2\2\u016d\u0165\3\2\2\2\u016e\21\3\2")
        buf.write("\2\2\u016f\u0173\7/\2\2\u0170\u0172\5 \21\2\u0171\u0170")
        buf.write("\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171\3\2\2\2\u0173")
        buf.write("\u0174\3\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2")
        buf.write("\u0176\u0178\5\30\r\2\u0177\u0176\3\2\2\2\u0177\u0178")
        buf.write("\3\2\2\2\u0178\u017d\3\2\2\2\u0179\u017c\5D#\2\u017a\u017c")
        buf.write("\5\34\17\2\u017b\u0179\3\2\2\2\u017b\u017a\3\2\2\2\u017c")
        buf.write("\u017f\3\2\2\2\u017d\u017b\3\2\2\2\u017d\u017e\3\2\2\2")
        buf.write("\u017e\u0181\3\2\2\2\u017f\u017d\3\2\2\2\u0180\u0182\5")
        buf.write("\32\16\2\u0181\u0180\3\2\2\2\u0181\u0182\3\2\2\2\u0182")
        buf.write("\u0183\3\2\2\2\u0183\u0184\7\60\2\2\u0184\23\3\2\2\2\u0185")
        buf.write("\u0187\7\65\2\2\u0186\u0188\7n\2\2\u0187\u0186\3\2\2\2")
        buf.write("\u0187\u0188\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\5")
        buf.write("\u00d2j\2\u018a\u018e\7\32\2\2\u018b\u018f\5\u009eP\2")
        buf.write("\u018c\u018d\7\25\2\2\u018d\u018f\5&\24\2\u018e\u018b")
        buf.write("\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u0190\3\2\2\2\u0190")
        buf.write("\u019b\7E\2\2\u0191\u0193\5\u009cO\2\u0192\u0194\5\u00c8")
        buf.write("e\2\u0193\u0192\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0197")
        buf.write("\3\2\2\2\u0195\u0198\5@!\2\u0196\u0198\7\67\2\2\u0197")
        buf.write("\u0195\3\2\2\2\u0197\u0196\3\2\2\2\u0198\u019c\3\2\2\2")
        buf.write("\u0199\u019a\7\62\2\2\u019a\u019c\5\22\n\2\u019b\u0191")
        buf.write("\3\2\2\2\u019b\u0199\3\2\2\2\u019c\25\3\2\2\2\u019d\u019e")
        buf.write("\7$\2\2\u019e\u019f\58\35\2\u019f\27\3\2\2\2\u01a0\u01a1")
        buf.write("\7\32\2\2\u01a1\u01a2\7\33\2\2\u01a2\u01a3\5@!\2\u01a3")
        buf.write("\31\3\2\2\2\u01a4\u01a5\7\32\2\2\u01a5\u01a6\7\34\2\2")
        buf.write("\u01a6\u01a7\5@!\2\u01a7\33\3\2\2\2\u01a8\u01a9\7\32\2")
        buf.write('\2\u01a9\u01aa\7"\2\2\u01aa\u01ab\5@!\2\u01ab\35\3\2')
        buf.write("\2\2\u01ac\u01b0\7/\2\2\u01ad\u01af\5 \21\2\u01ae\u01ad")
        buf.write("\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b0")
        buf.write("\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2\u01b0\3\2\2\2")
        buf.write("\u01b3\u01b8\7\60\2\2\u01b4\u01b5\7$\2\2\u01b5\u01b8\5")
        buf.write(" \21\2\u01b6\u01b8\7\67\2\2\u01b7\u01ac\3\2\2\2\u01b7")
        buf.write("\u01b4\3\2\2\2\u01b7\u01b6\3\2\2\2\u01b8\37\3\2\2\2\u01b9")
        buf.write("\u01bc\5,\27\2\u01ba\u01bc\5\60\31\2\u01bb\u01b9\3\2\2")
        buf.write("\2\u01bb\u01ba\3\2\2\2\u01bc!\3\2\2\2\u01bd\u01c1\7/\2")
        buf.write("\2\u01be\u01c0\5,\27\2\u01bf\u01be\3\2\2\2\u01c0\u01c3")
        buf.write("\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2")
        buf.write("\u01c4\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c9\7\60\2")
        buf.write("\2\u01c5\u01c6\7$\2\2\u01c6\u01c9\5,\27\2\u01c7\u01c9")
        buf.write("\7\67\2\2\u01c8\u01bd\3\2\2\2\u01c8\u01c5\3\2\2\2\u01c8")
        buf.write("\u01c7\3\2\2\2\u01c9#\3\2\2\2\u01ca\u01cc\5\60\31\2\u01cb")
        buf.write("\u01ca\3\2\2\2\u01cc\u01cf\3\2\2\2\u01cd\u01cb\3\2\2\2")
        buf.write("\u01cd\u01ce\3\2\2\2\u01ce%\3\2\2\2\u01cf\u01cd\3\2\2")
        buf.write("\2\u01d0\u01d1\5(\25\2\u01d1'\3\2\2\2\u01d2\u01d3\7/")
        buf.write("\2\2\u01d3\u01d4\5*\26\2\u01d4\u01d5\5$\23\2\u01d5\u01d6")
        buf.write("\7\31\2\2\u01d6\u01d7\5@!\2\u01d7\u01d8\7\60\2\2\u01d8")
        buf.write("\u01e1\3\2\2\2\u01d9\u01da\7$\2\2\u01da\u01db\5*\26\2")
        buf.write("\u01db\u01dc\5$\23\2\u01dc\u01dd\7\31\2\2\u01dd\u01de")
        buf.write("\5@!\2\u01de\u01df\7\67\2\2\u01df\u01e1\3\2\2\2\u01e0")
        buf.write("\u01d2\3\2\2\2\u01e0\u01d9\3\2\2\2\u01e1)\3\2\2\2\u01e2")
        buf.write("\u01e3\7Z\2\2\u01e3\u01e4\7Y\2\2\u01e4\u01e5\7n\2\2\u01e5")
        buf.write("\u01e6\7\67\2\2\u01e6+\3\2\2\2\u01e7\u01e8\7Z\2\2\u01e8")
        buf.write("\u01ed\5.\30\2\u01e9\u01ea\7]\2\2\u01ea\u01ec\5.\30\2")
        buf.write("\u01eb\u01e9\3\2\2\2\u01ec\u01ef\3\2\2\2\u01ed\u01eb\3")
        buf.write("\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3\2\2\2\u01ef\u01ed")
        buf.write("\3\2\2\2\u01f0\u01f1\7\67\2\2\u01f1-\3\2\2\2\u01f2\u01f4")
        buf.write("\7\\\2\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4")
        buf.write("\u01f6\3\2\2\2\u01f5\u01f7\7Y\2\2\u01f6\u01f5\3\2\2\2")
        buf.write("\u01f6\u01f7\3\2\2\2\u01f7\u01fc\3\2\2\2\u01f8\u01fd\7")
        buf.write("n\2\2\u01f9\u01fa\7n\2\2\u01fa\u01fb\78\2\2\u01fb\u01fd")
        buf.write("\5f\64\2\u01fc\u01f8\3\2\2\2\u01fc\u01f9\3\2\2\2\u01fd")
        buf.write("/\3\2\2\2\u01fe\u01ff\7^\2\2\u01ff\u0203\5\66\34\2\u0200")
        buf.write("\u0201\5\64\33\2\u0201\u0202\5\62\32\2\u0202\u0204\3\2")
        buf.write("\2\2\u0203\u0200\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u020e")
        buf.write("\3\2\2\2\u0205\u0206\7]\2\2\u0206\u020a\5\66\34\2\u0207")
        buf.write("\u0208\5\64\33\2\u0208\u0209\5\62\32\2\u0209\u020b\3\2")
        buf.write("\2\2\u020a\u0207\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020d")
        buf.write("\3\2\2\2\u020c\u0205\3\2\2\2\u020d\u0210\3\2\2\2\u020e")
        buf.write("\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0211\3\2\2\2")
        buf.write("\u0210\u020e\3\2\2\2\u0211\u0212\7\67\2\2\u0212\u021a")
        buf.write("\3\2\2\2\u0213\u0214\7^\2\2\u0214\u0216\7n\2\2\u0215\u0217")
        buf.write("\5\62\32\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217")
        buf.write("\u0218\3\2\2\2\u0218\u021a\5@!\2\u0219\u01fe\3\2\2\2\u0219")
        buf.write("\u0213\3\2\2\2\u021a\61\3\2\2\2\u021b\u021d\7\32\2\2\u021c")
        buf.write("\u021e\58\35\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2")
        buf.write("\u021e\u021f\3\2\2\2\u021f\u0220\t\2\2\2\u0220\63\3\2")
        buf.write("\2\2\u0221\u0223\7%\2\2\u0222\u0224\5:\36\2\u0223\u0222")
        buf.write("\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0228\3\2\2\2\u0225")
        buf.write("\u0229\7%\2\2\u0226\u0227\7.\2\2\u0227\u0229\5f\64\2\u0228")
        buf.write("\u0225\3\2\2\2\u0228\u0226\3\2\2\2\u0229\65\3\2\2\2\u022a")
        buf.write("\u022b\7n\2\2\u022b\u022c\7P\2\2\u022c\u022d\7n\2\2\u022d")
        buf.write("\67\3\2\2\2\u022e\u0233\7n\2\2\u022f\u0230\7]\2\2\u0230")
        buf.write("\u0232\7n\2\2\u0231\u022f\3\2\2\2\u0232\u0235\3\2\2\2")
        buf.write("\u0233\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u02349\3\2\2")
        buf.write("\2\u0235\u0233\3\2\2\2\u0236\u023d\5<\37\2\u0237\u023d")
        buf.write("\5> \2\u0238\u0239\5<\37\2\u0239\u023a\7]\2\2\u023a\u023b")
        buf.write("\5> \2\u023b\u023d\3\2\2\2\u023c\u0236\3\2\2\2\u023c\u0237")
        buf.write("\3\2\2\2\u023c\u0238\3\2\2\2\u023d;\3\2\2\2\u023e\u0243")
        buf.write("\5n8\2\u023f\u0240\7]\2\2\u0240\u0242\5n8\2\u0241\u023f")
        buf.write("\3\2\2\2\u0242\u0245\3\2\2\2\u0243\u0241\3\2\2\2\u0243")
        buf.write("\u0244\3\2\2\2\u0244=\3\2\2\2\u0245\u0243\3\2\2\2\u0246")
        buf.write("\u0247\7n\2\2\u0247\u0248\78\2\2\u0248\u024f\5n8\2\u0249")
        buf.write("\u024a\7]\2\2\u024a\u024b\7n\2\2\u024b\u024c\78\2\2\u024c")
        buf.write("\u024e\5n8\2\u024d\u0249\3\2\2\2\u024e\u0251\3\2\2\2\u024f")
        buf.write("\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250?\3\2\2\2\u0251")
        buf.write("\u024f\3\2\2\2\u0252\u0256\7/\2\2\u0253\u0255\5D#\2\u0254")
        buf.write("\u0253\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0254\3\2\2\2")
        buf.write("\u0256\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u0256\3")
        buf.write("\2\2\2\u0259\u025d\7\60\2\2\u025a\u025b\7$\2\2\u025b\u025d")
        buf.write("\5D#\2\u025c\u0252\3\2\2\2\u025c\u025a\3\2\2\2\u025dA")
        buf.write("\3\2\2\2\u025e\u025f\58\35\2\u025f\u0260\5@!\2\u0260C")
        buf.write('\3\2\2\2\u0261\u0274\5@!\2\u0262\u0274\5B"\2\u0263\u0264')
        buf.write("\5f\64\2\u0264\u0265\7\67\2\2\u0265\u0274\3\2\2\2\u0266")
        buf.write("\u0274\5F$\2\u0267\u0274\5H%\2\u0268\u0274\5P)\2\u0269")
        buf.write("\u0274\5R*\2\u026a\u026b\5V,\2\u026b\u026c\7\67\2\2\u026c")
        buf.write("\u0274\3\2\2\2\u026d\u026e\5T+\2\u026e\u026f\7\67\2\2")
        buf.write("\u026f\u0274\3\2\2\2\u0270\u0274\5X-\2\u0271\u0274\5Z")
        buf.write(".\2\u0272\u0274\5\\/\2\u0273\u0261\3\2\2\2\u0273\u0262")
        buf.write("\3\2\2\2\u0273\u0263\3\2\2\2\u0273\u0266\3\2\2\2\u0273")
        buf.write("\u0267\3\2\2\2\u0273\u0268\3\2\2\2\u0273\u0269\3\2\2\2")
        buf.write("\u0273\u026a\3\2\2\2\u0273\u026d\3\2\2\2\u0273\u0270\3")
        buf.write("\2\2\2\u0273\u0271\3\2\2\2\u0273\u0272\3\2\2\2\u0274E")
        buf.write("\3\2\2\2\u0275\u0276\7@\2\2\u0276\u0277\5f\64\2\u0277")
        buf.write("\u027b\5@!\2\u0278\u027a\5L'\2\u0279\u0278\3\2\2\2\u027a")
        buf.write("\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c\3\2\2\2")
        buf.write("\u027c\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027e\u0280\5")
        buf.write("N(\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2\u0280G\3")
        buf.write("\2\2\2\u0281\u0282\7N\2\2\u0282\u0284\5@!\2\u0283\u0285")
        buf.write("\5J&\2\u0284\u0283\3\2\2\2\u0284\u0285\3\2\2\2\u0285I")
        buf.write("\3\2\2\2\u0286\u028a\7B\2\2\u0287\u0288\7e\2\2\u0288\u0289")
        buf.write("\7n\2\2\u0289\u028b\7f\2\2\u028a\u0287\3\2\2\2\u028a\u028b")
        buf.write("\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u0294\5@!\2\u028d\u0290")
        buf.write("\7B\2\2\u028e\u028f\7\32\2\2\u028f\u0291\7n\2\2\u0290")
        buf.write("\u028e\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\3\2\2\2")
        buf.write("\u0292\u0294\5@!\2\u0293\u0286\3\2\2\2\u0293\u028d\3\2")
        buf.write("\2\2\u0294K\3\2\2\2\u0295\u0296\7A\2\2\u0296\u0297\5f")
        buf.write("\64\2\u0297\u0298\5@!\2\u0298M\3\2\2\2\u0299\u029a\7B")
        buf.write("\2\2\u029a\u029b\5@!\2\u029bO\3\2\2\2\u029c\u029d\7C\2")
        buf.write("\2\u029d\u029e\5f\64\2\u029e\u029f\7D\2\2\u029f\u02a0")
        buf.write("\5f\64\2\u02a0\u02a1\7E\2\2\u02a1\u02a2\5f\64\2\u02a2")
        buf.write("\u02a3\5@!\2\u02a3\u02af\3\2\2\2\u02a4\u02a5\7C\2\2\u02a5")
        buf.write("\u02a8\7n\2\2\u02a6\u02a7\7]\2\2\u02a7\u02a9\7n\2\2\u02a8")
        buf.write("\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02aa\3\2\2\2")
        buf.write("\u02aa\u02ab\7X\2\2\u02ab\u02ac\5f\64\2\u02ac\u02ad\5")
        buf.write("@!\2\u02ad\u02af\3\2\2\2\u02ae\u029c\3\2\2\2\u02ae\u02a4")
        buf.write("\3\2\2\2\u02afQ\3\2\2\2\u02b0\u02b1\7F\2\2\u02b1\u02b2")
        buf.write("\5f\64\2\u02b2\u02b3\5@!\2\u02b3S\3\2\2\2\u02b4\u02b5")
        buf.write("\t\3\2\2\u02b5U\3\2\2\2\u02b6\u02b7\7\66\2\2\u02b7\u02b8")
        buf.write("\5f\64\2\u02b8W\3\2\2\2\u02b9\u02ba\7M\2\2\u02ba\u02bb")
        buf.write("\5f\64\2\u02bb\u02bc\7\67\2\2\u02bcY\3\2\2\2\u02bd\u02be")
        buf.write("\7L\2\2\u02be\u02bf\5f\64\2\u02bf\u02c0\7\67\2\2\u02c0")
        buf.write("\u02c9\3\2\2\2\u02c1\u02c2\7L\2\2\u02c2\u02c3\7$\2\2\u02c3")
        buf.write("\u02c4\7n\2\2\u02c4\u02c5\78\2\2\u02c5\u02c6\5f\64\2\u02c6")
        buf.write("\u02c7\7\67\2\2\u02c7\u02c9\3\2\2\2\u02c8\u02bd\3\2\2")
        buf.write("\2\u02c8\u02c1\3\2\2\2\u02c9[\3\2\2\2\u02ca\u02cf\5^\60")
        buf.write("\2\u02cb\u02cf\5`\61\2\u02cc\u02cf\5b\62\2\u02cd\u02cf")
        buf.write("\5d\63\2\u02ce\u02ca\3\2\2\2\u02ce\u02cb\3\2\2\2\u02ce")
        buf.write("\u02cc\3\2\2\2\u02ce\u02cd\3\2\2\2\u02cf]\3\2\2\2\u02d0")
        buf.write("\u02d1\7\27\2\2\u02d1\u02d2\5f\64\2\u02d2\u02d3\7\67\2")
        buf.write("\2\u02d3_\3\2\2\2\u02d4\u02d7\7\30\2\2\u02d5\u02d6\7$")
        buf.write("\2\2\u02d6\u02d8\7n\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8")
        buf.write("\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02dc\5f\64\2\u02da")
        buf.write("\u02dd\7\67\2\2\u02db\u02dd\5N(\2\u02dc\u02da\3\2\2\2")
        buf.write("\u02dc\u02db\3\2\2\2\u02dda\3\2\2\2\u02de\u02e1\7I\2\2")
        buf.write("\u02df\u02e2\5Z.\2\u02e0\u02e2\7\67\2\2\u02e1\u02df\3")
        buf.write("\2\2\2\u02e1\u02e0\3\2\2\2\u02e2c\3\2\2\2\u02e3\u02e8")
        buf.write("\7J\2\2\u02e4\u02e9\5Z.\2\u02e5\u02e9\5b\62\2\u02e6\u02e9")
        buf.write("\5`\61\2\u02e7\u02e9\7\67\2\2\u02e8\u02e4\3\2\2\2\u02e8")
        buf.write("\u02e5\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e7\3\2\2\2")
        buf.write("\u02e9e\3\2\2\2\u02ea\u02ee\5n8\2\u02eb\u02ef\5h\65\2")
        buf.write("\u02ec\u02ef\5j\66\2\u02ed\u02ef\5l\67\2\u02ee\u02eb\3")
        buf.write("\2\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ed\3\2\2\2\u02ee\u02ef")
        buf.write("\3\2\2\2\u02efg\3\2\2\2\u02f0\u02f1\78\2\2\u02f1\u02f2")
        buf.write("\5f\64\2\u02f2i\3\2\2\2\u02f3\u02f4\7=\2\2\u02f4\u02f5")
        buf.write("\5f\64\2\u02f5k\3\2\2\2\u02f6\u02f7\t\4\2\2\u02f7\u02f8")
        buf.write("\5f\64\2\u02f8m\3\2\2\2\u02f9\u0301\5p9\2\u02fa\u02fb")
        buf.write("\7Q\2\2\u02fb\u02fe\5\u00a2R\2\u02fc\u02fe\5\u00aaV\2")
        buf.write("\u02fd\u02fa\3\2\2\2\u02fd\u02fc\3\2\2\2\u02fe\u02ff\3")
        buf.write("\2\2\2\u02ff\u0300\5f\64\2\u0300\u0302\3\2\2\2\u0301\u02fd")
        buf.write("\3\2\2\2\u0301\u0302\3\2\2\2\u0302o\3\2\2\2\u0303\u0308")
        buf.write("\5r:\2\u0304\u0305\t\5\2\2\u0305\u0307\5r:\2\u0306\u0304")
        buf.write("\3\2\2\2\u0307\u030a\3\2\2\2\u0308\u0306\3\2\2\2\u0308")
        buf.write("\u0309\3\2\2\2\u0309q\3\2\2\2\u030a\u0308\3\2\2\2\u030b")
        buf.write("\u030c\7Q\2\2\u030c\u0317\5r:\2\u030d\u0313\5x=\2\u030e")
        buf.write("\u030f\5t;\2\u030f\u0310\5x=\2\u0310\u0312\3\2\2\2\u0311")
        buf.write("\u030e\3\2\2\2\u0312\u0315\3\2\2\2\u0313\u0311\3\2\2\2")
        buf.write("\u0313\u0314\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313\3")
        buf.write("\2\2\2\u0316\u030b\3\2\2\2\u0316\u030d\3\2\2\2\u0317s")
        buf.write("\3\2\2\2\u0318\u0321\7R\2\2\u0319\u0321\7S\2\2\u031a\u0321")
        buf.write("\7T\2\2\u031b\u0321\7U\2\2\u031c\u0321\7V\2\2\u031d\u0321")
        buf.write("\7W\2\2\u031e\u0321\7X\2\2\u031f\u0321\5v<\2\u0320\u0318")
        buf.write("\3\2\2\2\u0320\u0319\3\2\2\2\u0320\u031a\3\2\2\2\u0320")
        buf.write("\u031b\3\2\2\2\u0320\u031c\3\2\2\2\u0320\u031d\3\2\2\2")
        buf.write("\u0320\u031e\3\2\2\2\u0320\u031f\3\2\2\2\u0321u\3\2\2")
        buf.write("\2\u0322\u0323\7Q\2\2\u0323\u0324\7X\2\2\u0324w\3\2\2")
        buf.write("\2\u0325\u032a\5z>\2\u0326\u0327\t\6\2\2\u0327\u0329\5")
        buf.write("z>\2\u0328\u0326\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328")
        buf.write("\3\2\2\2\u032a\u032b\3\2\2\2\u032by\3\2\2\2\u032c\u032a")
        buf.write("\3\2\2\2\u032d\u0332\5|?\2\u032e\u032f\t\7\2\2\u032f\u0331")
        buf.write("\5|?\2\u0330\u032e\3\2\2\2\u0331\u0334\3\2\2\2\u0332\u0330")
        buf.write("\3\2\2\2\u0332\u0333\3\2\2\2\u0333{\3\2\2\2\u0334\u0332")
        buf.write("\3\2\2\2\u0335\u0336\t\6\2\2\u0336\u0339\5|?\2\u0337\u0339")
        buf.write("\5~@\2\u0338\u0335\3\2\2\2\u0338\u0337\3\2\2\2\u0339}")
        buf.write("\3\2\2\2\u033a\u033f\5\u0082B\2\u033b\u033c\7d\2\2\u033c")
        buf.write("\u033e\5|?\2\u033d\u033b\3\2\2\2\u033e\u0341\3\2\2\2\u033f")
        buf.write("\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\177\3\2\2\2\u0341")
        buf.write("\u033f\3\2\2\2\u0342\u0343\7[\2\2\u0343\u0346\7P\2\2\u0344")
        buf.write("\u0347\5\u0090I\2\u0345\u0347\7n\2\2\u0346\u0344\3\2\2")
        buf.write("\2\u0346\u0345\3\2\2\2\u0347\u0081\3\2\2\2\u0348\u0349")
        buf.write("\bB\1\2\u0349\u0363\7l\2\2\u034a\u0363\7i\2\2\u034b\u0363")
        buf.write("\5\u00d2j\2\u034c\u0363\7k\2\2\u034d\u0363\7m\2\2\u034e")
        buf.write("\u0363\7n\2\2\u034f\u0363\5\u0080A\2\u0350\u0363\5\u0098")
        buf.write("M\2\u0351\u0363\5\u00b2Z\2\u0352\u0363\5\u00b6\\\2\u0353")
        buf.write("\u0354\7e\2\2\u0354\u0355\5f\64\2\u0355\u0356\7f\2\2\u0356")
        buf.write("\u0363\3\2\2\2\u0357\u0358\5\u0086D\2\u0358\u035a\7n\2")
        buf.write("\2\u0359\u035b\5\u00c8e\2\u035a\u0359\3\2\2\2\u035a\u035b")
        buf.write("\3\2\2\2\u035b\u0363\3\2\2\2\u035c\u035d\7\64\2\2\u035d")
        buf.write("\u0363\5\u0082B\7\u035e\u0363\5\u00ba^\2\u035f\u0363\5")
        buf.write("\u0088E\2\u0360\u0363\5\u008aF\2\u0361\u0363\5\u00d0i")
        buf.write("\2\u0362\u0348\3\2\2\2\u0362\u034a\3\2\2\2\u0362\u034b")
        buf.write("\3\2\2\2\u0362\u034c\3\2\2\2\u0362\u034d\3\2\2\2\u0362")
        buf.write("\u034e\3\2\2\2\u0362\u034f\3\2\2\2\u0362\u0350\3\2\2\2")
        buf.write("\u0362\u0351\3\2\2\2\u0362\u0352\3\2\2\2\u0362\u0353\3")
        buf.write("\2\2\2\u0362\u0357\3\2\2\2\u0362\u035c\3\2\2\2\u0362\u035e")
        buf.write("\3\2\2\2\u0362\u035f\3\2\2\2\u0362\u0360\3\2\2\2\u0362")
        buf.write("\u0361\3\2\2\2\u0363\u0368\3\2\2\2\u0364\u0365\f\b\2\2")
        buf.write("\u0365\u0367\5\u0084C\2\u0366\u0364\3\2\2\2\u0367\u036a")
        buf.write("\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369")
        buf.write("\u0083\3\2\2\2\u036a\u0368\3\2\2\2\u036b\u036c\7P\2\2")
        buf.write("\u036c\u037b\5\u008cG\2\u036d\u036e\7P\2\2\u036e\u037b")
        buf.write("\7n\2\2\u036f\u037b\5\u00b4[\2\u0370\u0372\7e\2\2\u0371")
        buf.write("\u0373\5:\36\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2\2\2")
        buf.write("\u0373\u0374\3\2\2\2\u0374\u037b\7f\2\2\u0375\u0376\5")
        buf.write("\u0086D\2\u0376\u0378\7n\2\2\u0377\u0379\5\u00c8e\2\u0378")
        buf.write("\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037b\3\2\2\2")
        buf.write("\u037a\u036b\3\2\2\2\u037a\u036d\3\2\2\2\u037a\u036f\3")
        buf.write("\2\2\2\u037a\u0370\3\2\2\2\u037a\u0375\3\2\2\2\u037b\u0085")
        buf.write("\3\2\2\2\u037c\u0381\7%\2\2\u037d\u037e\7%\2\2\u037e\u037f")
        buf.write("\7n\2\2\u037f\u0381\7$\2\2\u0380\u037c\3\2\2\2\u0380\u037d")
        buf.write("\3\2\2\2\u0381\u0087\3\2\2\2\u0382\u0383\7O\2\2\u0383")
        buf.write("\u0384\5\u0082B\2\u0384\u0089\3\2\2\2\u0385\u0386\7a\2")
        buf.write("\2\u0386\u0387\5\u0082B\2\u0387\u008b\3\2\2\2\u0388\u038f")
        buf.write("\3\2\2\2\u0389\u038f\5\u0096L\2\u038a\u038f\5\u0092J\2")
        buf.write("\u038b\u038f\5\u0094K\2\u038c\u038f\5\u0090I\2\u038d\u038f")
        buf.write("\5\u008eH\2\u038e\u0388\3\2\2\2\u038e\u0389\3\2\2\2\u038e")
        buf.write("\u038a\3\2\2\2\u038e\u038b\3\2\2\2\u038e\u038c\3\2\2\2")
        buf.write("\u038e\u038d\3\2\2\2\u038f\u008d\3\2\2\2\u0390\u0391\5")
        buf.write("\u00d0i\2\u0391\u008f\3\2\2\2\u0392\u0393\t\b\2\2\u0393")
        buf.write("\u0091\3\2\2\2\u0394\u03a6\7\36\2\2\u0395\u0396\7/\2\2")
        buf.write("\u0396\u0397\58\35\2\u0397\u0398\7\60\2\2\u0398\u03a6")
        buf.write("\3\2\2\2\u0399\u039a\7\22\2\2\u039a\u039d\7%\2\2\u039b")
        buf.write("\u039d\7(\2\2\u039c\u0399\3\2\2\2\u039c\u039b\3\2\2\2")
        buf.write("\u039d\u039e\3\2\2\2\u039e\u03a3\t\t\2\2\u039f\u03a0\7")
        buf.write("e\2\2\u03a0\u03a1\5<\37\2\u03a1\u03a2\7f\2\2\u03a2\u03a4")
        buf.write("\3\2\2\2\u03a3\u039f\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4")
        buf.write("\u03a6\3\2\2\2\u03a5\u0394\3\2\2\2\u03a5\u0395\3\2\2\2")
        buf.write("\u03a5\u039c\3\2\2\2\u03a6\u0093\3\2\2\2\u03a7\u03b5\7")
        buf.write("\35\2\2\u03a8\u03a9\7\21\2\2\u03a9\u03ac\7%\2\2\u03aa")
        buf.write("\u03ac\7'\2\2\u03ab\u03a8\3\2\2\2\u03ab\u03aa\3\2\2\2")
        buf.write("\u03ac\u03ad\3\2\2\2\u03ad\u03b2\7n\2\2\u03ae\u03af\7")
        buf.write("e\2\2\u03af\u03b0\5<\37\2\u03b0\u03b1\7f\2\2\u03b1\u03b3")
        buf.write("\3\2\2\2\u03b2\u03ae\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3")
        buf.write("\u03b5\3\2\2\2\u03b4\u03a7\3\2\2\2\u03b4\u03ab\3\2\2\2")
        buf.write("\u03b5\u0095\3\2\2\2\u03b6\u03b7\7\16\2\2\u03b7\u03ba")
        buf.write("\7%\2\2\u03b8\u03ba\7&\2\2\u03b9\u03b6\3\2\2\2\u03b9\u03b8")
        buf.write("\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03c0\7n\2\2\u03bc")
        buf.write("\u03bd\7e\2\2\u03bd\u03be\5<\37\2\u03be\u03bf\7f\2\2\u03bf")
        buf.write("\u03c1\3\2\2\2\u03c0\u03bc\3\2\2\2\u03c0\u03c1\3\2\2\2")
        buf.write("\u03c1\u0097\3\2\2\2\u03c2\u03c4\5\u009aN\2\u03c3\u03c5")
        buf.write("\5\u00caf\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5")
        buf.write("\u03c7\3\2\2\2\u03c6\u03c8\5\u0098M\2\u03c7\u03c6\3\2")
        buf.write("\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03ce\3\2\2\2\u03c9\u03cb")
        buf.write("\5\u00a2R\2\u03ca\u03cc\5\u0098M\2\u03cb\u03ca\3\2\2\2")
        buf.write("\u03cb\u03cc\3\2\2\2\u03cc\u03ce\3\2\2\2\u03cd\u03c2\3")
        buf.write("\2\2\2\u03cd\u03c9\3\2\2\2\u03ce\u0099\3\2\2\2\u03cf\u03d0")
        buf.write("\7)\2\2\u03d0\u03d1\7n\2\2\u03d1\u009b\3\2\2\2\u03d2\u03d3")
        buf.write("\7+\2\2\u03d3\u03d4\7n\2\2\u03d4\u009d\3\2\2\2\u03d5\u03d6")
        buf.write("\7,\2\2\u03d6\u03d7\7n\2\2\u03d7\u009f\3\2\2\2\u03d8\u03d9")
        buf.write("\7-\2\2\u03d9\u03da\7n\2\2\u03da\u00a1\3\2\2\2\u03db\u03df")
        buf.write("\5\u00a4S\2\u03dc\u03df\5\u00a6T\2\u03dd\u03df\5\u00a8")
        buf.write("U\2\u03de\u03db\3\2\2\2\u03de\u03dc\3\2\2\2\u03de\u03dd")
        buf.write("\3\2\2\2\u03df\u00a3\3\2\2\2\u03e0\u03ec\7\4\2\2\u03e1")
        buf.write("\u03e8\7`\2\2\u03e2\u03e3\7g\2\2\u03e3\u03e5\7n\2\2\u03e4")
        buf.write("\u03e6\5\u00caf\2\u03e5\u03e4\3\2\2\2\u03e5\u03e6\3\2")
        buf.write("\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e9\7h\2\2\u03e8\u03e2")
        buf.write("\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea")
        buf.write("\u03ec\7\5\2\2\u03eb\u03e0\3\2\2\2\u03eb\u03e1\3\2\2\2")
        buf.write("\u03ec\u00a5\3\2\2\2\u03ed\u03f9\7\6\2\2\u03ee\u03f5\7")
        buf.write("\7\2\2\u03ef\u03f0\7g\2\2\u03f0\u03f2\7n\2\2\u03f1\u03f3")
        buf.write("\5\u00caf\2\u03f2\u03f1\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3")
        buf.write("\u03f4\3\2\2\2\u03f4\u03f6\7h\2\2\u03f5\u03ef\3\2\2\2")
        buf.write("\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f9\7")
        buf.write("`\2\2\u03f8\u03ed\3\2\2\2\u03f8\u03ee\3\2\2\2\u03f9\u00a7")
        buf.write("\3\2\2\2\u03fa\u0406\7\b\2\2\u03fb\u0402\7\7\2\2\u03fc")
        buf.write("\u03fd\7g\2\2\u03fd\u03ff\7n\2\2\u03fe\u0400\5\u00caf")
        buf.write("\2\u03ff\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0401")
        buf.write("\3\2\2\2\u0401\u0403\7h\2\2\u0402\u03fc\3\2\2\2\u0402")
        buf.write("\u0403\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0406\7\5\2\2")
        buf.write("\u0405\u03fa\3\2\2\2\u0405\u03fb\3\2\2\2\u0406\u00a9\3")
        buf.write("\2\2\2\u0407\u040b\5\u00acW\2\u0408\u040b\5\u00aeX\2\u0409")
        buf.write("\u040b\5\u00b0Y\2\u040a\u0407\3\2\2\2\u040a\u0408\3\2")
        buf.write("\2\2\u040a\u0409\3\2\2\2\u040b\u00ab\3\2\2\2\u040c\u0418")
        buf.write("\7\t\2\2\u040d\u0414\7_\2\2\u040e\u040f\7g\2\2\u040f\u0411")
        buf.write("\7n\2\2\u0410\u0412\5\u00c8e\2\u0411\u0410\3\2\2\2\u0411")
        buf.write("\u0412\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415\7h\2\2")
        buf.write("\u0414\u040e\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416\3")
        buf.write("\2\2\2\u0416\u0418\7\n\2\2\u0417\u040c\3\2\2\2\u0417\u040d")
        buf.write("\3\2\2\2\u0418\u00ad\3\2\2\2\u0419\u0425\7\13\2\2\u041a")
        buf.write("\u0421\7\f\2\2\u041b\u041c\7g\2\2\u041c\u041e\7n\2\2\u041d")
        buf.write("\u041f\5\u00c8e\2\u041e\u041d\3\2\2\2\u041e\u041f\3\2")
        buf.write("\2\2\u041f\u0420\3\2\2\2\u0420\u0422\7h\2\2\u0421\u041b")
        buf.write("\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0423\3\2\2\2\u0423")
        buf.write("\u0425\7_\2\2\u0424\u0419\3\2\2\2\u0424\u041a\3\2\2\2")
        buf.write("\u0425\u00af\3\2\2\2\u0426\u0432\7\r\2\2\u0427\u042e\7")
        buf.write("\f\2\2\u0428\u0429\7g\2\2\u0429\u042b\7n\2\2\u042a\u042c")
        buf.write("\5\u00c8e\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c")
        buf.write("\u042d\3\2\2\2\u042d\u042f\7h\2\2\u042e\u0428\3\2\2\2")
        buf.write("\u042e\u042f\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0432\7")
        buf.write("\n\2\2\u0431\u0426\3\2\2\2\u0431\u0427\3\2\2\2\u0432\u00b1")
        buf.write("\3\2\2\2\u0433\u0435\7g\2\2\u0434\u0436\5<\37\2\u0435")
        buf.write("\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437\3\2\2\2")
        buf.write("\u0437\u0438\7h\2\2\u0438\u00b3\3\2\2\2\u0439\u043a\7")
        buf.write("g\2\2\u043a\u043b\5f\64\2\u043b\u043c\7h\2\2\u043c\u0444")
        buf.write("\3\2\2\2\u043d\u043e\7g\2\2\u043e\u043f\5f\64\2\u043f")
        buf.write("\u0440\7$\2\2\u0440\u0441\5f\64\2\u0441\u0442\7h\2\2\u0442")
        buf.write("\u0444\3\2\2\2\u0443\u0439\3\2\2\2\u0443\u043d\3\2\2\2")
        buf.write("\u0444\u00b5\3\2\2\2\u0445\u044e\7/\2\2\u0446\u044b\5")
        buf.write("\u00b8]\2\u0447\u0448\7]\2\2\u0448\u044a\5\u00b8]\2\u0449")
        buf.write("\u0447\3\2\2\2\u044a\u044d\3\2\2\2\u044b\u0449\3\2\2\2")
        buf.write("\u044b\u044c\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044b\3")
        buf.write("\2\2\2\u044e\u0446\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450")
        buf.write("\3\2\2\2\u0450\u0451\7\60\2\2\u0451\u00b7\3\2\2\2\u0452")
        buf.write("\u0453\5f\64\2\u0453\u0454\7$\2\2\u0454\u0455\5f\64\2")
        buf.write("\u0455\u00b9\3\2\2\2\u0456\u0457\7\31\2\2\u0457\u0458")
        buf.write("\5\u00bc_\2\u0458\u00bb\3\2\2\2\u0459\u045e\5\u00c0a\2")
        buf.write("\u045a\u045e\5\u00c4c\2\u045b\u045e\5\u00c2b\2\u045c\u045e")
        buf.write("\5\u00c6d\2\u045d\u0459\3\2\2\2\u045d\u045a\3\2\2\2\u045d")
        buf.write("\u045b\3\2\2\2\u045d\u045c\3\2\2\2\u045e\u00bd\3\2\2\2")
        buf.write("\u045f\u0460\5f\64\2\u0460\u0461\5\u00aaV\2\u0461\u00bf")
        buf.write("\3\2\2\2\u0462\u0464\5\u00be`\2\u0463\u0462\3\2\2\2\u0463")
        buf.write("\u0464\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0467\5\u009a")
        buf.write("N\2\u0466\u0468\5\u00c8e\2\u0467\u0466\3\2\2\2\u0467\u0468")
        buf.write("\3\2\2\2\u0468\u00c1\3\2\2\2\u0469\u046b\5\u00be`\2\u046a")
        buf.write("\u0469\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046c\3\2\2\2")
        buf.write("\u046c\u046d\5\u009eP\2\u046d\u00c3\3\2\2\2\u046e\u0470")
        buf.write("\5f\64\2\u046f\u0471\7\64\2\2\u0470\u046f\3\2\2\2\u0470")
        buf.write("\u0471\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0474\5\u009c")
        buf.write("O\2\u0473\u0475\5\u00c8e\2\u0474\u0473\3\2\2\2\u0474\u0475")
        buf.write("\3\2\2\2\u0475\u00c5\3\2\2\2\u0476\u0478\5\u00a0Q\2\u0477")
        buf.write("\u0479\5\u00c8e\2\u0478\u0477\3\2\2\2\u0478\u0479\3\2")
        buf.write("\2\2\u0479\u00c7\3\2\2\2\u047a\u0483\7e\2\2\u047b\u0480")
        buf.write("\5\u00ccg\2\u047c\u047d\7]\2\2\u047d\u047f\5\u00ccg\2")
        buf.write("\u047e\u047c\3\2\2\2\u047f\u0482\3\2\2\2\u0480\u047e\3")
        buf.write("\2\2\2\u0480\u0481\3\2\2\2\u0481\u0484\3\2\2\2\u0482\u0480")
        buf.write("\3\2\2\2\u0483\u047b\3\2\2\2\u0483\u0484\3\2\2\2\u0484")
        buf.write("\u0485\3\2\2\2\u0485\u0486\7f\2\2\u0486\u00c9\3\2\2\2")
        buf.write("\u0487\u0490\7e\2\2\u0488\u048d\5\u00ceh\2\u0489\u048a")
        buf.write("\7]\2\2\u048a\u048c\5\u00ceh\2\u048b\u0489\3\2\2\2\u048c")
        buf.write("\u048f\3\2\2\2\u048d\u048b\3\2\2\2\u048d\u048e\3\2\2\2")
        buf.write("\u048e\u0491\3\2\2\2\u048f\u048d\3\2\2\2\u0490\u0488\3")
        buf.write("\2\2\2\u0490\u0491\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493")
        buf.write("\7f\2\2\u0493\u00cb\3\2\2\2\u0494\u0495\7n\2\2\u0495\u0496")
        buf.write("\78\2\2\u0496\u0497\5f\64\2\u0497\u00cd\3\2\2\2\u0498")
        buf.write("\u0499\7n\2\2\u0499\u049a\5t;\2\u049a\u049b\5f\64\2\u049b")
        buf.write("\u00cf\3\2\2\2\u049c\u049d\t\n\2\2\u049d\u00d1\3\2\2\2")
        buf.write("\u049e\u04a0\7j\2\2\u049f\u049e\3\2\2\2\u04a0\u04a1\3")
        buf.write("\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u00d3")
        buf.write("\3\2\2\2\u0092\u00d5\u00da\u00e0\u00e9\u00ef\u00f9\u00fd")
        buf.write("\u0102\u0106\u010b\u010f\u0114\u0118\u011e\u0122\u0127")
        buf.write("\u012b\u012d\u0134\u0139\u0145\u0150\u015a\u0165\u016a")
        buf.write("\u016d\u0173\u0177\u017b\u017d\u0181\u0187\u018e\u0193")
        buf.write("\u0197\u019b\u01b0\u01b7\u01bb\u01c1\u01c8\u01cd\u01e0")
        buf.write("\u01ed\u01f3\u01f6\u01fc\u0203\u020a\u020e\u0216\u0219")
        buf.write("\u021d\u0223\u0228\u0233\u023c\u0243\u024f\u0256\u025c")
        buf.write("\u0273\u027b\u027f\u0284\u028a\u0290\u0293\u02a8\u02ae")
        buf.write("\u02c8\u02ce\u02d7\u02dc\u02e1\u02e8\u02ee\u02fd\u0301")
        buf.write("\u0308\u0313\u0316\u0320\u032a\u0332\u0338\u033f\u0346")
        buf.write("\u035a\u0362\u0368\u0372\u0378\u037a\u0380\u038e\u039c")
        buf.write("\u03a3\u03a5\u03ab\u03b2\u03b4\u03b9\u03c0\u03c4\u03c7")
        buf.write("\u03cb\u03cd\u03de\u03e5\u03e8\u03eb\u03f2\u03f5\u03f8")
        buf.write("\u03ff\u0402\u0405\u040a\u0411\u0414\u0417\u041e\u0421")
        buf.write("\u0424\u042b\u042e\u0431\u0435\u0443\u044b\u044e\u045d")
        buf.write("\u0463\u0467\u046a\u0470\u0474\u0478\u0480\u0483\u048d")
        buf.write("\u0490\u04a1")
        return buf.getvalue()


class jacParser(Parser):
    grammarFileName = "jac.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'version'",
        "'-->'",
        "'->'",
        "'<--'",
        "'<-'",
        "'<-->'",
        "'++>'",
        "'+>'",
        "'<++'",
        "'<+'",
        "'<++>'",
        "'str'",
        "'int'",
        "'float'",
        "'list'",
        "'dict'",
        "'bool'",
        "'type'",
        "'graph'",
        "'node'",
        "'ignore'",
        "'take'",
        "'spawn'",
        "'with'",
        "'entry'",
        "'exit'",
        "'length'",
        "'keys'",
        "'context'",
        "'info'",
        "'details'",
        "'activity'",
        "'import'",
        "':'",
        "'::'",
        "'s::'",
        "'l::'",
        "'d::'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'::>'",
        "'{'",
        "'}'",
        "'edge'",
        "'walker'",
        "'async'",
        "'sync'",
        "'test'",
        "'assert'",
        "';'",
        "'='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "':='",
        "<INVALID>",
        "<INVALID>",
        "'if'",
        "'elif'",
        "'else'",
        "'for'",
        "'to'",
        "'by'",
        "'while'",
        "'continue'",
        "'break'",
        "'disengage'",
        "'yield'",
        "'skip'",
        "'report'",
        "'destroy'",
        "'try'",
        "'&'",
        "'.'",
        "<INVALID>",
        "'=='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'!='",
        "'in'",
        "'anchor'",
        "'has'",
        "'global'",
        "'private'",
        "','",
        "'can'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'^'",
        "'('",
        "')'",
        "'['",
        "']'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'null'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "TYP_STRING",
        "TYP_INT",
        "TYP_FLOAT",
        "TYP_LIST",
        "TYP_DICT",
        "TYP_BOOL",
        "KW_TYPE",
        "KW_GRAPH",
        "KW_NODE",
        "KW_IGNORE",
        "KW_TAKE",
        "KW_SPAWN",
        "KW_WITH",
        "KW_ENTRY",
        "KW_EXIT",
        "KW_LENGTH",
        "KW_KEYS",
        "KW_CONTEXT",
        "KW_INFO",
        "KW_DETAILS",
        "KW_ACTIVITY",
        "KW_IMPORT",
        "COLON",
        "DBL_COLON",
        "STR_DBL_COLON",
        "LIST_DBL_COLON",
        "DICT_DBL_COLON",
        "NODE_DBL_COLON",
        "EDGE_DBL_COLON",
        "WALKER_DBL_COLON",
        "GRAPH_DBL_COLON",
        "TYPE_DBL_COLON",
        "COLON_OUT",
        "LBRACE",
        "RBRACE",
        "KW_EDGE",
        "KW_WALKER",
        "KW_ASYNC",
        "KW_SYNC",
        "KW_TEST",
        "KW_ASSERT",
        "SEMI",
        "EQ",
        "PEQ",
        "MEQ",
        "TEQ",
        "DEQ",
        "CPY_EQ",
        "KW_AND",
        "KW_OR",
        "KW_IF",
        "KW_ELIF",
        "KW_ELSE",
        "KW_FOR",
        "KW_TO",
        "KW_BY",
        "KW_WHILE",
        "KW_CONTINUE",
        "KW_BREAK",
        "KW_DISENGAGE",
        "KW_YIELD",
        "KW_SKIP",
        "KW_REPORT",
        "KW_DESTROY",
        "KW_TRY",
        "KW_REF",
        "DOT",
        "NOT",
        "EE",
        "LT",
        "GT",
        "LTE",
        "GTE",
        "NE",
        "KW_IN",
        "KW_ANCHOR",
        "KW_HAS",
        "KW_GLOBAL",
        "KW_PRIVATE",
        "COMMA",
        "KW_CAN",
        "PLUS",
        "MINUS",
        "STAR_MUL",
        "DIV",
        "MOD",
        "POW",
        "LPAREN",
        "RPAREN",
        "LSQUARE",
        "RSQUARE",
        "FLOAT",
        "STRING",
        "BOOL",
        "INT",
        "NULL",
        "NAME",
        "COMMENT",
        "LINE_COMMENT",
        "PY_COMMENT",
        "WS",
        "ErrorChar",
    ]

    RULE_start = 0
    RULE_ver_label = 1
    RULE_import_module = 2
    RULE_import_items = 3
    RULE_import_names = 4
    RULE_element = 5
    RULE_global_var = 6
    RULE_architype = 7
    RULE_walker_block = 8
    RULE_test = 9
    RULE_namespaces = 10
    RULE_walk_entry_block = 11
    RULE_walk_exit_block = 12
    RULE_walk_activity_block = 13
    RULE_attr_block = 14
    RULE_attr_stmt = 15
    RULE_struct_block = 16
    RULE_can_block = 17
    RULE_graph_block = 18
    RULE_graph_block_spawn = 19
    RULE_has_root = 20
    RULE_has_stmt = 21
    RULE_has_assign = 22
    RULE_can_stmt = 23
    RULE_event_clause = 24
    RULE_preset_in_out = 25
    RULE_dotted_name = 26
    RULE_name_list = 27
    RULE_param_list = 28
    RULE_expr_list = 29
    RULE_kw_expr_list = 30
    RULE_code_block = 31
    RULE_node_ctx_block = 32
    RULE_statement = 33
    RULE_if_stmt = 34
    RULE_try_stmt = 35
    RULE_else_from_try = 36
    RULE_elif_stmt = 37
    RULE_else_stmt = 38
    RULE_for_stmt = 39
    RULE_while_stmt = 40
    RULE_ctrl_stmt = 41
    RULE_assert_stmt = 42
    RULE_destroy_action = 43
    RULE_report_action = 44
    RULE_walker_action = 45
    RULE_ignore_action = 46
    RULE_take_action = 47
    RULE_disengage_action = 48
    RULE_yield_action = 49
    RULE_expression = 50
    RULE_assignment = 51
    RULE_copy_assign = 52
    RULE_inc_assign = 53
    RULE_connect = 54
    RULE_logical = 55
    RULE_compare = 56
    RULE_cmp_op = 57
    RULE_nin = 58
    RULE_arithmetic = 59
    RULE_term = 60
    RULE_factor = 61
    RULE_power = 62
    RULE_global_ref = 63
    RULE_atom = 64
    RULE_atom_trailer = 65
    RULE_ability_op = 66
    RULE_ref = 67
    RULE_deref = 68
    RULE_built_in = 69
    RULE_cast_built_in = 70
    RULE_obj_built_in = 71
    RULE_dict_built_in = 72
    RULE_list_built_in = 73
    RULE_string_built_in = 74
    RULE_node_edge_ref = 75
    RULE_node_ref = 76
    RULE_walker_ref = 77
    RULE_graph_ref = 78
    RULE_type_ref = 79
    RULE_edge_ref = 80
    RULE_edge_to = 81
    RULE_edge_from = 82
    RULE_edge_any = 83
    RULE_connect_op = 84
    RULE_connect_to = 85
    RULE_connect_from = 86
    RULE_connect_any = 87
    RULE_list_val = 88
    RULE_index_slice = 89
    RULE_dict_val = 90
    RULE_kv_pair = 91
    RULE_spawn = 92
    RULE_spawn_object = 93
    RULE_spawn_edge = 94
    RULE_node_spawn = 95
    RULE_graph_spawn = 96
    RULE_walker_spawn = 97
    RULE_type_spawn = 98
    RULE_spawn_ctx = 99
    RULE_filter_ctx = 100
    RULE_spawn_assign = 101
    RULE_filter_compare = 102
    RULE_any_type = 103
    RULE_multistring = 104

    ruleNames = [
        "start",
        "ver_label",
        "import_module",
        "import_items",
        "import_names",
        "element",
        "global_var",
        "architype",
        "walker_block",
        "test",
        "namespaces",
        "walk_entry_block",
        "walk_exit_block",
        "walk_activity_block",
        "attr_block",
        "attr_stmt",
        "struct_block",
        "can_block",
        "graph_block",
        "graph_block_spawn",
        "has_root",
        "has_stmt",
        "has_assign",
        "can_stmt",
        "event_clause",
        "preset_in_out",
        "dotted_name",
        "name_list",
        "param_list",
        "expr_list",
        "kw_expr_list",
        "code_block",
        "node_ctx_block",
        "statement",
        "if_stmt",
        "try_stmt",
        "else_from_try",
        "elif_stmt",
        "else_stmt",
        "for_stmt",
        "while_stmt",
        "ctrl_stmt",
        "assert_stmt",
        "destroy_action",
        "report_action",
        "walker_action",
        "ignore_action",
        "take_action",
        "disengage_action",
        "yield_action",
        "expression",
        "assignment",
        "copy_assign",
        "inc_assign",
        "connect",
        "logical",
        "compare",
        "cmp_op",
        "nin",
        "arithmetic",
        "term",
        "factor",
        "power",
        "global_ref",
        "atom",
        "atom_trailer",
        "ability_op",
        "ref",
        "deref",
        "built_in",
        "cast_built_in",
        "obj_built_in",
        "dict_built_in",
        "list_built_in",
        "string_built_in",
        "node_edge_ref",
        "node_ref",
        "walker_ref",
        "graph_ref",
        "type_ref",
        "edge_ref",
        "edge_to",
        "edge_from",
        "edge_any",
        "connect_op",
        "connect_to",
        "connect_from",
        "connect_any",
        "list_val",
        "index_slice",
        "dict_val",
        "kv_pair",
        "spawn",
        "spawn_object",
        "spawn_edge",
        "node_spawn",
        "graph_spawn",
        "walker_spawn",
        "type_spawn",
        "spawn_ctx",
        "filter_ctx",
        "spawn_assign",
        "filter_compare",
        "any_type",
        "multistring",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    TYP_STRING = 12
    TYP_INT = 13
    TYP_FLOAT = 14
    TYP_LIST = 15
    TYP_DICT = 16
    TYP_BOOL = 17
    KW_TYPE = 18
    KW_GRAPH = 19
    KW_NODE = 20
    KW_IGNORE = 21
    KW_TAKE = 22
    KW_SPAWN = 23
    KW_WITH = 24
    KW_ENTRY = 25
    KW_EXIT = 26
    KW_LENGTH = 27
    KW_KEYS = 28
    KW_CONTEXT = 29
    KW_INFO = 30
    KW_DETAILS = 31
    KW_ACTIVITY = 32
    KW_IMPORT = 33
    COLON = 34
    DBL_COLON = 35
    STR_DBL_COLON = 36
    LIST_DBL_COLON = 37
    DICT_DBL_COLON = 38
    NODE_DBL_COLON = 39
    EDGE_DBL_COLON = 40
    WALKER_DBL_COLON = 41
    GRAPH_DBL_COLON = 42
    TYPE_DBL_COLON = 43
    COLON_OUT = 44
    LBRACE = 45
    RBRACE = 46
    KW_EDGE = 47
    KW_WALKER = 48
    KW_ASYNC = 49
    KW_SYNC = 50
    KW_TEST = 51
    KW_ASSERT = 52
    SEMI = 53
    EQ = 54
    PEQ = 55
    MEQ = 56
    TEQ = 57
    DEQ = 58
    CPY_EQ = 59
    KW_AND = 60
    KW_OR = 61
    KW_IF = 62
    KW_ELIF = 63
    KW_ELSE = 64
    KW_FOR = 65
    KW_TO = 66
    KW_BY = 67
    KW_WHILE = 68
    KW_CONTINUE = 69
    KW_BREAK = 70
    KW_DISENGAGE = 71
    KW_YIELD = 72
    KW_SKIP = 73
    KW_REPORT = 74
    KW_DESTROY = 75
    KW_TRY = 76
    KW_REF = 77
    DOT = 78
    NOT = 79
    EE = 80
    LT = 81
    GT = 82
    LTE = 83
    GTE = 84
    NE = 85
    KW_IN = 86
    KW_ANCHOR = 87
    KW_HAS = 88
    KW_GLOBAL = 89
    KW_PRIVATE = 90
    COMMA = 91
    KW_CAN = 92
    PLUS = 93
    MINUS = 94
    STAR_MUL = 95
    DIV = 96
    MOD = 97
    POW = 98
    LPAREN = 99
    RPAREN = 100
    LSQUARE = 101
    RSQUARE = 102
    FLOAT = 103
    STRING = 104
    BOOL = 105
    INT = 106
    NULL = 107
    NAME = 108
    COMMENT = 109
    LINE_COMMENT = 110
    PY_COMMENT = 111
    WS = 112
    ErrorChar = 113

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class StartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(jacParser.EOF, 0)

        def ver_label(self):
            return self.getTypedRuleContext(jacParser.Ver_labelContext, 0)

        def import_module(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Import_moduleContext)
            else:
                return self.getTypedRuleContext(jacParser.Import_moduleContext, i)

        def element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ElementContext)
            else:
                return self.getTypedRuleContext(jacParser.ElementContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_start

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStart"):
                listener.enterStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStart"):
                listener.exitStart(self)

    def start(self):
        localctx = jacParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.T__0:
                self.state = 210
                self.ver_label()

            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_IMPORT:
                self.state = 213
                self.import_module()
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_WALKER)
                        | (1 << jacParser.KW_ASYNC)
                        | (1 << jacParser.KW_TEST)
                    )
                )
                != 0
            ) or _la == jacParser.KW_GLOBAL:
                self.state = 219
                self.element()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(jacParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ver_labelContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ver_label

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVer_label"):
                listener.enterVer_label(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVer_label"):
                listener.exitVer_label(self)

    def ver_label(self):
        localctx = jacParser.Ver_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_ver_label)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(jacParser.T__0)
            self.state = 228
            self.match(jacParser.COLON)
            self.state = 229
            self.match(jacParser.STRING)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.SEMI:
                self.state = 230
                self.match(jacParser.SEMI)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_moduleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(jacParser.KW_IMPORT, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_module

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_module"):
                listener.enterImport_module(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_module"):
                listener.exitImport_module(self)

    def import_module(self):
        localctx = jacParser.Import_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_import_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(jacParser.KW_IMPORT)
            self.state = 234
            self.match(jacParser.LBRACE)
            self.state = 237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                jacParser.NODE_DBL_COLON,
                jacParser.EDGE_DBL_COLON,
                jacParser.WALKER_DBL_COLON,
                jacParser.GRAPH_DBL_COLON,
                jacParser.TYPE_DBL_COLON,
                jacParser.KW_GLOBAL,
            ]:
                self.state = 235
                self.import_items()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 236
                self.match(jacParser.STAR_MUL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 239
            self.match(jacParser.RBRACE)
            self.state = 240
            self.match(jacParser.KW_WITH)
            self.state = 241
            self.match(jacParser.STRING)
            self.state = 242
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_itemsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WALKER_DBL_COLON(self):
            return self.getToken(jacParser.WALKER_DBL_COLON, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def import_names(self):
            return self.getTypedRuleContext(jacParser.Import_namesContext, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def NODE_DBL_COLON(self):
            return self.getToken(jacParser.NODE_DBL_COLON, 0)

        def EDGE_DBL_COLON(self):
            return self.getToken(jacParser.EDGE_DBL_COLON, 0)

        def GRAPH_DBL_COLON(self):
            return self.getToken(jacParser.GRAPH_DBL_COLON, 0)

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def TYPE_DBL_COLON(self):
            return self.getToken(jacParser.TYPE_DBL_COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_items

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_items"):
                listener.enterImport_items(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_items"):
                listener.exitImport_items(self)

    def import_items(self):
        localctx = jacParser.Import_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_items)
        self._la = 0  # Token type
        try:
            self.state = 299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.WALKER_DBL_COLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.match(jacParser.WALKER_DBL_COLON)
                self.state = 247
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 245
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 246
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 249
                    self.match(jacParser.COMMA)
                    self.state = 250
                    self.import_items()

                pass
            elif token in [jacParser.NODE_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.match(jacParser.NODE_DBL_COLON)
                self.state = 256
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 254
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 255
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 258
                    self.match(jacParser.COMMA)
                    self.state = 259
                    self.import_items()

                pass
            elif token in [jacParser.EDGE_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 262
                self.match(jacParser.EDGE_DBL_COLON)
                self.state = 265
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 263
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 264
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 267
                    self.match(jacParser.COMMA)
                    self.state = 268
                    self.import_items()

                pass
            elif token in [jacParser.GRAPH_DBL_COLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 271
                self.match(jacParser.GRAPH_DBL_COLON)
                self.state = 274
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 272
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 273
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 276
                    self.match(jacParser.COMMA)
                    self.state = 277
                    self.import_items()

                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 280
                self.match(jacParser.KW_GLOBAL)
                self.state = 281
                self.match(jacParser.DBL_COLON)
                self.state = 284
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 282
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 283
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 286
                    self.match(jacParser.COMMA)
                    self.state = 287
                    self.import_items()

                pass
            elif token in [jacParser.TYPE_DBL_COLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 290
                self.match(jacParser.TYPE_DBL_COLON)
                self.state = 293
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 291
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 292
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 295
                    self.match(jacParser.COMMA)
                    self.state = 296
                    self.import_items()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_names"):
                listener.enterImport_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_names"):
                listener.exitImport_names(self)

    def import_names(self):
        localctx = jacParser.Import_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_import_names)
        try:
            self.state = 306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.match(jacParser.NAME)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.match(jacParser.LBRACE)
                self.state = 303
                self.name_list()
                self.state = 304
                self.match(jacParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_var(self):
            return self.getTypedRuleContext(jacParser.Global_varContext, 0)

        def architype(self):
            return self.getTypedRuleContext(jacParser.ArchitypeContext, 0)

        def test(self):
            return self.getTypedRuleContext(jacParser.TestContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)

    def element(self):
        localctx = jacParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_element)
        try:
            self.state = 311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                self.global_var()
                pass
            elif token in [
                jacParser.KW_TYPE,
                jacParser.KW_GRAPH,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
                jacParser.KW_WALKER,
                jacParser.KW_ASYNC,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self.architype()
                pass
            elif token in [jacParser.KW_TEST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 310
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_varContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_global_var

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_var"):
                listener.enterGlobal_var(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_var"):
                listener.exitGlobal_var(self)

    def global_var(self):
        localctx = jacParser.Global_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_global_var)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(jacParser.KW_GLOBAL)
            self.state = 314
            self.match(jacParser.NAME)
            self.state = 315
            self.match(jacParser.EQ)
            self.state = 316
            self.expression()
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 317
                self.match(jacParser.COMMA)
                self.state = 318
                self.match(jacParser.NAME)
                self.state = 319
                self.match(jacParser.EQ)
                self.state = 320
                self.expression()
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 326
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArchitypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def attr_block(self):
            return self.getTypedRuleContext(jacParser.Attr_blockContext, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def struct_block(self):
            return self.getTypedRuleContext(jacParser.Struct_blockContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def KW_ASYNC(self):
            return self.getToken(jacParser.KW_ASYNC, 0)

        def namespaces(self):
            return self.getTypedRuleContext(jacParser.NamespacesContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_architype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArchitype"):
                listener.enterArchitype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArchitype"):
                listener.exitArchitype(self)

    def architype(self):
        localctx = jacParser.ArchitypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_architype)
        self._la = 0  # Token type
        try:
            self.state = 363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.match(jacParser.KW_NODE)
                self.state = 329
                self.match(jacParser.NAME)
                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 330
                        self.match(jacParser.COLON)
                        self.state = 331
                        self.match(jacParser.NAME)
                    self.state = 336
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 337
                self.attr_block()
                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 338
                self.match(jacParser.KW_EDGE)
                self.state = 339
                self.match(jacParser.NAME)
                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 340
                        self.match(jacParser.COLON)
                        self.state = 341
                        self.match(jacParser.NAME)
                    self.state = 346
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)

                self.state = 347
                self.attr_block()
                pass
            elif token in [jacParser.KW_TYPE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 348
                self.match(jacParser.KW_TYPE)
                self.state = 349
                self.match(jacParser.NAME)
                self.state = 350
                self.struct_block()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 351
                self.match(jacParser.KW_GRAPH)
                self.state = 352
                self.match(jacParser.NAME)
                self.state = 353
                self.graph_block()
                pass
            elif token in [jacParser.KW_WALKER, jacParser.KW_ASYNC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_ASYNC:
                    self.state = 354
                    self.match(jacParser.KW_ASYNC)

                self.state = 357
                self.match(jacParser.KW_WALKER)
                self.state = 358
                self.match(jacParser.NAME)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COLON:
                    self.state = 359
                    self.namespaces()

                self.state = 362
                self.walker_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def walk_entry_block(self):
            return self.getTypedRuleContext(jacParser.Walk_entry_blockContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def walk_activity_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Walk_activity_blockContext)
            else:
                return self.getTypedRuleContext(jacParser.Walk_activity_blockContext, i)

        def walk_exit_block(self):
            return self.getTypedRuleContext(jacParser.Walk_exit_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_block"):
                listener.enterWalker_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_block"):
                listener.exitWalker_block(self)

    def walker_block(self):
        localctx = jacParser.Walker_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_walker_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(jacParser.LBRACE)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                self.state = 366
                self.attr_stmt()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.state = 372
                self.walk_entry_block()

            self.state = 379
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 377
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        jacParser.T__1,
                        jacParser.T__3,
                        jacParser.T__4,
                        jacParser.T__5,
                        jacParser.TYP_STRING,
                        jacParser.TYP_INT,
                        jacParser.TYP_FLOAT,
                        jacParser.TYP_LIST,
                        jacParser.TYP_DICT,
                        jacParser.TYP_BOOL,
                        jacParser.KW_TYPE,
                        jacParser.KW_NODE,
                        jacParser.KW_IGNORE,
                        jacParser.KW_TAKE,
                        jacParser.KW_SPAWN,
                        jacParser.COLON,
                        jacParser.DBL_COLON,
                        jacParser.NODE_DBL_COLON,
                        jacParser.LBRACE,
                        jacParser.KW_EDGE,
                        jacParser.KW_SYNC,
                        jacParser.KW_ASSERT,
                        jacParser.KW_IF,
                        jacParser.KW_FOR,
                        jacParser.KW_WHILE,
                        jacParser.KW_CONTINUE,
                        jacParser.KW_BREAK,
                        jacParser.KW_DISENGAGE,
                        jacParser.KW_YIELD,
                        jacParser.KW_SKIP,
                        jacParser.KW_REPORT,
                        jacParser.KW_DESTROY,
                        jacParser.KW_TRY,
                        jacParser.KW_REF,
                        jacParser.NOT,
                        jacParser.KW_GLOBAL,
                        jacParser.PLUS,
                        jacParser.MINUS,
                        jacParser.STAR_MUL,
                        jacParser.LPAREN,
                        jacParser.LSQUARE,
                        jacParser.FLOAT,
                        jacParser.STRING,
                        jacParser.BOOL,
                        jacParser.INT,
                        jacParser.NULL,
                        jacParser.NAME,
                    ]:
                        self.state = 375
                        self.statement()
                        pass
                    elif token in [jacParser.KW_WITH]:
                        self.state = 376
                        self.walk_activity_block()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_WITH:
                self.state = 382
                self.walk_exit_block()

            self.state = 385
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TEST(self):
            return self.getToken(jacParser.KW_TEST, 0)

        def multistring(self):
            return self.getTypedRuleContext(jacParser.MultistringContext, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTest"):
                listener.enterTest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTest"):
                listener.exitTest(self)

    def test(self):
        localctx = jacParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(jacParser.KW_TEST)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 388
                self.match(jacParser.NAME)

            self.state = 391
            self.multistring()
            self.state = 392
            self.match(jacParser.KW_WITH)
            self.state = 396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.GRAPH_DBL_COLON]:
                self.state = 393
                self.graph_ref()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.state = 394
                self.match(jacParser.KW_GRAPH)
                self.state = 395
                self.graph_block()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 398
            self.match(jacParser.KW_BY)
            self.state = 409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.WALKER_DBL_COLON]:
                self.state = 399
                self.walker_ref()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 400
                    self.spawn_ctx()

                self.state = 405
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.COLON, jacParser.LBRACE]:
                    self.state = 403
                    self.code_block()
                    pass
                elif token in [jacParser.SEMI]:
                    self.state = 404
                    self.match(jacParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [jacParser.KW_WALKER]:
                self.state = 407
                self.match(jacParser.KW_WALKER)
                self.state = 408
                self.walker_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_namespaces

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespaces"):
                listener.enterNamespaces(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespaces"):
                listener.exitNamespaces(self)

    def namespaces(self):
        localctx = jacParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_namespaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(jacParser.COLON)
            self.state = 412
            self.name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_entry_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_entry_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_entry_block"):
                listener.enterWalk_entry_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_entry_block"):
                listener.exitWalk_entry_block(self)

    def walk_entry_block(self):
        localctx = jacParser.Walk_entry_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_walk_entry_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(jacParser.KW_WITH)
            self.state = 415
            self.match(jacParser.KW_ENTRY)
            self.state = 416
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_exit_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_exit_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_exit_block"):
                listener.enterWalk_exit_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_exit_block"):
                listener.exitWalk_exit_block(self)

    def walk_exit_block(self):
        localctx = jacParser.Walk_exit_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_walk_exit_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(jacParser.KW_WITH)
            self.state = 419
            self.match(jacParser.KW_EXIT)
            self.state = 420
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_activity_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_activity_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_activity_block"):
                listener.enterWalk_activity_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_activity_block"):
                listener.exitWalk_activity_block(self)

    def walk_activity_block(self):
        localctx = jacParser.Walk_activity_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_walk_activity_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(jacParser.KW_WITH)
            self.state = 423
            self.match(jacParser.KW_ACTIVITY)
            self.state = 424
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_block"):
                listener.enterAttr_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_block"):
                listener.exitAttr_block(self)

    def attr_block(self):
        localctx = jacParser.Attr_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_attr_block)
        self._la = 0  # Token type
        try:
            self.state = 437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 426
                self.match(jacParser.LBRACE)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                    self.state = 427
                    self.attr_stmt()
                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 433
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 434
                self.match(jacParser.COLON)
                self.state = 435
                self.attr_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 436
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def has_stmt(self):
            return self.getTypedRuleContext(jacParser.Has_stmtContext, 0)

        def can_stmt(self):
            return self.getTypedRuleContext(jacParser.Can_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_stmt"):
                listener.enterAttr_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_stmt"):
                listener.exitAttr_stmt(self)

    def attr_stmt(self):
        localctx = jacParser.Attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attr_stmt)
        try:
            self.state = 441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_HAS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 439
                self.has_stmt()
                pass
            elif token in [jacParser.KW_CAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 440
                self.can_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def has_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_stmtContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_struct_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStruct_block"):
                listener.enterStruct_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStruct_block"):
                listener.exitStruct_block(self)

    def struct_block(self):
        localctx = jacParser.Struct_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_struct_block)
        self._la = 0  # Token type
        try:
            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.match(jacParser.LBRACE)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.KW_HAS:
                    self.state = 444
                    self.has_stmt()
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 450
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.match(jacParser.COLON)
                self.state = 452
                self.has_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 453
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def can_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Can_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Can_stmtContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_can_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_block"):
                listener.enterCan_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_block"):
                listener.exitCan_block(self)

    def can_block(self):
        localctx = jacParser.Can_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_can_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_CAN:
                self.state = 456
                self.can_stmt()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_block_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_block_spawnContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block"):
                listener.enterGraph_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block"):
                listener.exitGraph_block(self)

    def graph_block(self):
        localctx = jacParser.Graph_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_graph_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.graph_block_spawn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_block_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext, 0)

        def can_block(self):
            return self.getTypedRuleContext(jacParser.Can_blockContext, 0)

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block_spawn"):
                listener.enterGraph_block_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block_spawn"):
                listener.exitGraph_block_spawn(self)

    def graph_block_spawn(self):
        localctx = jacParser.Graph_block_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_graph_block_spawn)
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.match(jacParser.LBRACE)
                self.state = 465
                self.has_root()
                self.state = 466
                self.can_block()
                self.state = 467
                self.match(jacParser.KW_SPAWN)
                self.state = 468
                self.code_block()
                self.state = 469
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.match(jacParser.COLON)
                self.state = 472
                self.has_root()
                self.state = 473
                self.can_block()
                self.state = 474
                self.match(jacParser.KW_SPAWN)
                self.state = 475
                self.code_block()
                self.state = 476
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_rootContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_root

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_root"):
                listener.enterHas_root(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_root"):
                listener.exitHas_root(self)

    def has_root(self):
        localctx = jacParser.Has_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_has_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(jacParser.KW_HAS)
            self.state = 481
            self.match(jacParser.KW_ANCHOR)
            self.state = 482
            self.match(jacParser.NAME)
            self.state = 483
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def has_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_assignContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_has_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_stmt"):
                listener.enterHas_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_stmt"):
                listener.exitHas_stmt(self)

    def has_stmt(self):
        localctx = jacParser.Has_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_has_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(jacParser.KW_HAS)
            self.state = 486
            self.has_assign()
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 487
                self.match(jacParser.COMMA)
                self.state = 488
                self.has_assign()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 494
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def KW_PRIVATE(self):
            return self.getToken(jacParser.KW_PRIVATE, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_assign"):
                listener.enterHas_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_assign"):
                listener.exitHas_assign(self)

    def has_assign(self):
        localctx = jacParser.Has_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_has_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_PRIVATE:
                self.state = 496
                self.match(jacParser.KW_PRIVATE)

            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_ANCHOR:
                self.state = 499
                self.match(jacParser.KW_ANCHOR)

            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
            if la_ == 1:
                self.state = 502
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.state = 503
                self.match(jacParser.NAME)
                self.state = 504
                self.match(jacParser.EQ)
                self.state = 505
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAN(self):
            return self.getToken(jacParser.KW_CAN, 0)

        def dotted_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(jacParser.Dotted_nameContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def preset_in_out(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Preset_in_outContext)
            else:
                return self.getTypedRuleContext(jacParser.Preset_in_outContext, i)

        def event_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Event_clauseContext)
            else:
                return self.getTypedRuleContext(jacParser.Event_clauseContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_can_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_stmt"):
                listener.enterCan_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_stmt"):
                listener.exitCan_stmt(self)

    def can_stmt(self):
        localctx = jacParser.Can_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_can_stmt)
        self._la = 0  # Token type
        try:
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.match(jacParser.KW_CAN)
                self.state = 509
                self.dotted_name()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.DBL_COLON:
                    self.state = 510
                    self.preset_in_out()
                    self.state = 511
                    self.event_clause()

                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 515
                    self.match(jacParser.COMMA)
                    self.state = 516
                    self.dotted_name()
                    self.state = 520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.DBL_COLON:
                        self.state = 517
                        self.preset_in_out()
                        self.state = 518
                        self.event_clause()

                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 527
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self.match(jacParser.KW_CAN)
                self.state = 530
                self.match(jacParser.NAME)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 531
                    self.event_clause()

                self.state = 534
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_event_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEvent_clause"):
                listener.enterEvent_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEvent_clause"):
                listener.exitEvent_clause(self)

    def event_clause(self):
        localctx = jacParser.Event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_event_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(jacParser.KW_WITH)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 538
                self.name_list()

            self.state = 541
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_ENTRY)
                            | (1 << jacParser.KW_EXIT)
                            | (1 << jacParser.KW_ACTIVITY)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Preset_in_outContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DBL_COLON)
            else:
                return self.getToken(jacParser.DBL_COLON, i)

        def COLON_OUT(self):
            return self.getToken(jacParser.COLON_OUT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def param_list(self):
            return self.getTypedRuleContext(jacParser.Param_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_preset_in_out

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPreset_in_out"):
                listener.enterPreset_in_out(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPreset_in_out"):
                listener.exitPreset_in_out(self)

    def preset_in_out(self):
        localctx = jacParser.Preset_in_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_preset_in_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(jacParser.DBL_COLON)
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.state = 544
                self.param_list()

            self.state = 550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.DBL_COLON]:
                self.state = 547
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.COLON_OUT]:
                self.state = 548
                self.match(jacParser.COLON_OUT)
                self.state = 549
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dotted_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_name"):
                listener.enterDotted_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_name"):
                listener.exitDotted_name(self)

    def dotted_name(self):
        localctx = jacParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dotted_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(jacParser.NAME)
            self.state = 553
            self.match(jacParser.DOT)
            self.state = 554
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_name_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName_list"):
                listener.enterName_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName_list"):
                listener.exitName_list(self)

    def name_list(self):
        localctx = jacParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_name_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(jacParser.NAME)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 557
                self.match(jacParser.COMMA)
                self.state = 558
                self.match(jacParser.NAME)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Param_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def kw_expr_list(self):
            return self.getTypedRuleContext(jacParser.Kw_expr_listContext, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def getRuleIndex(self):
            return jacParser.RULE_param_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParam_list"):
                listener.enterParam_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParam_list"):
                listener.exitParam_list(self)

    def param_list(self):
        localctx = jacParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_param_list)
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.expr_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.kw_expr_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 566
                self.expr_list()
                self.state = 567
                self.match(jacParser.COMMA)
                self.state = 568
                self.kw_expr_list()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ConnectContext)
            else:
                return self.getTypedRuleContext(jacParser.ConnectContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_expr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr_list"):
                listener.enterExpr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr_list"):
                listener.exitExpr_list(self)

    def expr_list(self):
        localctx = jacParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expr_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.connect()
            self.state = 577
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 573
                    self.match(jacParser.COMMA)
                    self.state = 574
                    self.connect()
                self.state = 579
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kw_expr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def connect(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ConnectContext)
            else:
                return self.getTypedRuleContext(jacParser.ConnectContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_kw_expr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKw_expr_list"):
                listener.enterKw_expr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKw_expr_list"):
                listener.exitKw_expr_list(self)

    def kw_expr_list(self):
        localctx = jacParser.Kw_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_kw_expr_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(jacParser.NAME)
            self.state = 581
            self.match(jacParser.EQ)
            self.state = 582
            self.connect()
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 583
                self.match(jacParser.COMMA)
                self.state = 584
                self.match(jacParser.NAME)
                self.state = 585
                self.match(jacParser.EQ)
                self.state = 586
                self.connect()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_code_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCode_block"):
                listener.enterCode_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCode_block"):
                listener.exitCode_block(self)

    def code_block(self):
        localctx = jacParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_code_block)
        self._la = 0  # Token type
        try:
            self.state = 602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.match(jacParser.LBRACE)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__3)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_IGNORE)
                            | (1 << jacParser.KW_TAKE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.COLON)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.NODE_DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_SYNC)
                            | (1 << jacParser.KW_ASSERT)
                            | (1 << jacParser.KW_IF)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 65)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 65))
                        & (
                            (1 << (jacParser.KW_FOR - 65))
                            | (1 << (jacParser.KW_WHILE - 65))
                            | (1 << (jacParser.KW_CONTINUE - 65))
                            | (1 << (jacParser.KW_BREAK - 65))
                            | (1 << (jacParser.KW_DISENGAGE - 65))
                            | (1 << (jacParser.KW_YIELD - 65))
                            | (1 << (jacParser.KW_SKIP - 65))
                            | (1 << (jacParser.KW_REPORT - 65))
                            | (1 << (jacParser.KW_DESTROY - 65))
                            | (1 << (jacParser.KW_TRY - 65))
                            | (1 << (jacParser.KW_REF - 65))
                            | (1 << (jacParser.NOT - 65))
                            | (1 << (jacParser.KW_GLOBAL - 65))
                            | (1 << (jacParser.PLUS - 65))
                            | (1 << (jacParser.MINUS - 65))
                            | (1 << (jacParser.STAR_MUL - 65))
                            | (1 << (jacParser.LPAREN - 65))
                            | (1 << (jacParser.LSQUARE - 65))
                            | (1 << (jacParser.FLOAT - 65))
                            | (1 << (jacParser.STRING - 65))
                            | (1 << (jacParser.BOOL - 65))
                            | (1 << (jacParser.INT - 65))
                            | (1 << (jacParser.NULL - 65))
                            | (1 << (jacParser.NAME - 65))
                        )
                    )
                    != 0
                ):
                    self.state = 593
                    self.statement()
                    self.state = 598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 599
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.match(jacParser.COLON)
                self.state = 601
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_ctx_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ctx_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ctx_block"):
                listener.enterNode_ctx_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ctx_block"):
                listener.exitNode_ctx_block(self)

    def node_ctx_block(self):
        localctx = jacParser.Node_ctx_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_node_ctx_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.name_list()
            self.state = 605
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def node_ctx_block(self):
            return self.getTypedRuleContext(jacParser.Node_ctx_blockContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(jacParser.If_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(jacParser.Try_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(jacParser.For_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(jacParser.While_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(jacParser.Assert_stmtContext, 0)

        def ctrl_stmt(self):
            return self.getTypedRuleContext(jacParser.Ctrl_stmtContext, 0)

        def destroy_action(self):
            return self.getTypedRuleContext(jacParser.Destroy_actionContext, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def walker_action(self):
            return self.getTypedRuleContext(jacParser.Walker_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):
        localctx = jacParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_statement)
        try:
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 61, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.node_ctx_block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 609
                self.expression()
                self.state = 610
                self.match(jacParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 612
                self.if_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 613
                self.try_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 614
                self.for_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 615
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 616
                self.assert_stmt()
                self.state = 617
                self.match(jacParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 619
                self.ctrl_stmt()
                self.state = 620
                self.match(jacParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 622
                self.destroy_action()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 623
                self.report_action()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 624
                self.walker_action()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(jacParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def elif_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Elif_stmtContext, i)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_if_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_stmt"):
                listener.enterIf_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_stmt"):
                listener.exitIf_stmt(self)

    def if_stmt(self):
        localctx = jacParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(jacParser.KW_IF)
            self.state = 628
            self.expression()
            self.state = 629
            self.code_block()
            self.state = 633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 630
                    self.elif_stmt()
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 63, self._ctx)
            if la_ == 1:
                self.state = 636
                self.else_stmt()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRY(self):
            return self.getToken(jacParser.KW_TRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def else_from_try(self):
            return self.getTypedRuleContext(jacParser.Else_from_tryContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_try_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTry_stmt"):
                listener.enterTry_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTry_stmt"):
                listener.exitTry_stmt(self)

    def try_stmt(self):
        localctx = jacParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(jacParser.KW_TRY)
            self.state = 640
            self.code_block()
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
            if la_ == 1:
                self.state = 641
                self.else_from_try()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_from_tryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_from_try

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_from_try"):
                listener.enterElse_from_try(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_from_try"):
                listener.exitElse_from_try(self)

    def else_from_try(self):
        localctx = jacParser.Else_from_tryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_else_from_try)
        self._la = 0  # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.match(jacParser.KW_ELSE)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 645
                    self.match(jacParser.LPAREN)
                    self.state = 646
                    self.match(jacParser.NAME)
                    self.state = 647
                    self.match(jacParser.RPAREN)

                self.state = 650
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.match(jacParser.KW_ELSE)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 652
                    self.match(jacParser.KW_WITH)
                    self.state = 653
                    self.match(jacParser.NAME)

                self.state = 656
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elif_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELIF(self):
            return self.getToken(jacParser.KW_ELIF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_elif_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElif_stmt"):
                listener.enterElif_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElif_stmt"):
                listener.exitElif_stmt(self)

    def elif_stmt(self):
        localctx = jacParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(jacParser.KW_ELIF)
            self.state = 660
            self.expression()
            self.state = 661
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_stmt"):
                listener.enterElse_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_stmt"):
                listener.exitElse_stmt(self)

    def else_stmt(self):
        localctx = jacParser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(jacParser.KW_ELSE)
            self.state = 664
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(jacParser.KW_FOR, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def KW_TO(self):
            return self.getToken(jacParser.KW_TO, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def getRuleIndex(self):
            return jacParser.RULE_for_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_stmt"):
                listener.enterFor_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_stmt"):
                listener.exitFor_stmt(self)

    def for_stmt(self):
        localctx = jacParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.state = 684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.match(jacParser.KW_FOR)
                self.state = 667
                self.expression()
                self.state = 668
                self.match(jacParser.KW_TO)
                self.state = 669
                self.expression()
                self.state = 670
                self.match(jacParser.KW_BY)
                self.state = 671
                self.expression()
                self.state = 672
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(jacParser.KW_FOR)
                self.state = 675
                self.match(jacParser.NAME)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 676
                    self.match(jacParser.COMMA)
                    self.state = 677
                    self.match(jacParser.NAME)

                self.state = 680
                self.match(jacParser.KW_IN)
                self.state = 681
                self.expression()
                self.state = 682
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(jacParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_while_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_stmt"):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_stmt"):
                listener.exitWhile_stmt(self)

    def while_stmt(self):
        localctx = jacParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(jacParser.KW_WHILE)
            self.state = 687
            self.expression()
            self.state = 688
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctrl_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTINUE(self):
            return self.getToken(jacParser.KW_CONTINUE, 0)

        def KW_BREAK(self):
            return self.getToken(jacParser.KW_BREAK, 0)

        def KW_SKIP(self):
            return self.getToken(jacParser.KW_SKIP, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ctrl_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtrl_stmt"):
                listener.enterCtrl_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtrl_stmt"):
                listener.exitCtrl_stmt(self)

    def ctrl_stmt(self):
        localctx = jacParser.Ctrl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ctrl_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 69)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 69))
                        & (
                            (1 << (jacParser.KW_CONTINUE - 69))
                            | (1 << (jacParser.KW_BREAK - 69))
                            | (1 << (jacParser.KW_SKIP - 69))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASSERT(self):
            return self.getToken(jacParser.KW_ASSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssert_stmt"):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssert_stmt"):
                listener.exitAssert_stmt(self)

    def assert_stmt(self):
        localctx = jacParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assert_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(jacParser.KW_ASSERT)
            self.state = 693
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destroy_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_destroy_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDestroy_action"):
                listener.enterDestroy_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDestroy_action"):
                listener.exitDestroy_action(self)

    def destroy_action(self):
        localctx = jacParser.Destroy_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_destroy_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(jacParser.KW_DESTROY)
            self.state = 696
            self.expression()
            self.state = 697
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Report_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPORT(self):
            return self.getToken(jacParser.KW_REPORT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_report_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReport_action"):
                listener.enterReport_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReport_action"):
                listener.exitReport_action(self)

    def report_action(self):
        localctx = jacParser.Report_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_report_action)
        try:
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.match(jacParser.KW_REPORT)
                self.state = 700
                self.expression()
                self.state = 701
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 703
                self.match(jacParser.KW_REPORT)
                self.state = 704
                self.match(jacParser.COLON)
                self.state = 705
                self.match(jacParser.NAME)
                self.state = 706
                self.match(jacParser.EQ)
                self.state = 707
                self.expression()
                self.state = 708
                self.match(jacParser.SEMI)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ignore_action(self):
            return self.getTypedRuleContext(jacParser.Ignore_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def disengage_action(self):
            return self.getTypedRuleContext(jacParser.Disengage_actionContext, 0)

        def yield_action(self):
            return self.getTypedRuleContext(jacParser.Yield_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_action"):
                listener.enterWalker_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_action"):
                listener.exitWalker_action(self)

    def walker_action(self):
        localctx = jacParser.Walker_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_walker_action)
        try:
            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 712
                self.ignore_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 713
                self.take_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 714
                self.disengage_action()
                pass
            elif token in [jacParser.KW_YIELD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 715
                self.yield_action()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ignore_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IGNORE(self):
            return self.getToken(jacParser.KW_IGNORE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ignore_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIgnore_action"):
                listener.enterIgnore_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIgnore_action"):
                listener.exitIgnore_action(self)

    def ignore_action(self):
        localctx = jacParser.Ignore_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ignore_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(jacParser.KW_IGNORE)
            self.state = 719
            self.expression()
            self.state = 720
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Take_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TAKE(self):
            return self.getToken(jacParser.KW_TAKE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_take_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTake_action"):
                listener.enterTake_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTake_action"):
                listener.exitTake_action(self)

    def take_action(self):
        localctx = jacParser.Take_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_take_action)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(jacParser.KW_TAKE)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 723
                self.match(jacParser.COLON)
                self.state = 724
                self.match(jacParser.NAME)

            self.state = 727
            self.expression()
            self.state = 730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.SEMI]:
                self.state = 728
                self.match(jacParser.SEMI)
                pass
            elif token in [jacParser.KW_ELSE]:
                self.state = 729
                self.else_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Disengage_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISENGAGE(self):
            return self.getToken(jacParser.KW_DISENGAGE, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_disengage_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDisengage_action"):
                listener.enterDisengage_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDisengage_action"):
                listener.exitDisengage_action(self)

    def disengage_action(self):
        localctx = jacParser.Disengage_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_disengage_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(jacParser.KW_DISENGAGE)
            self.state = 735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_REPORT]:
                self.state = 733
                self.report_action()
                pass
            elif token in [jacParser.SEMI]:
                self.state = 734
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YIELD(self):
            return self.getToken(jacParser.KW_YIELD, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def disengage_action(self):
            return self.getTypedRuleContext(jacParser.Disengage_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_yield_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_action"):
                listener.enterYield_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_action"):
                listener.exitYield_action(self)

    def yield_action(self):
        localctx = jacParser.Yield_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_yield_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(jacParser.KW_YIELD)
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_REPORT]:
                self.state = 738
                self.report_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.state = 739
                self.disengage_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.state = 740
                self.take_action()
                pass
            elif token in [jacParser.SEMI]:
                self.state = 741
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self):
            return self.getTypedRuleContext(jacParser.ConnectContext, 0)

        def assignment(self):
            return self.getTypedRuleContext(jacParser.AssignmentContext, 0)

        def copy_assign(self):
            return self.getTypedRuleContext(jacParser.Copy_assignContext, 0)

        def inc_assign(self):
            return self.getTypedRuleContext(jacParser.Inc_assignContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):
        localctx = jacParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.connect()
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
            if la_ == 1:
                self.state = 745
                self.assignment()

            elif la_ == 2:
                self.state = 746
                self.copy_assign()

            elif la_ == 3:
                self.state = 747
                self.inc_assign()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)

    def assignment(self):
        localctx = jacParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(jacParser.EQ)
            self.state = 751
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CPY_EQ(self):
            return self.getToken(jacParser.CPY_EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_copy_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCopy_assign"):
                listener.enterCopy_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCopy_assign"):
                listener.exitCopy_assign(self)

    def copy_assign(self):
        localctx = jacParser.Copy_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_copy_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(jacParser.CPY_EQ)
            self.state = 754
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inc_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def PEQ(self):
            return self.getToken(jacParser.PEQ, 0)

        def MEQ(self):
            return self.getToken(jacParser.MEQ, 0)

        def TEQ(self):
            return self.getToken(jacParser.TEQ, 0)

        def DEQ(self):
            return self.getToken(jacParser.DEQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_inc_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInc_assign"):
                listener.enterInc_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInc_assign"):
                listener.exitInc_assign(self)

    def inc_assign(self):
        localctx = jacParser.Inc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_inc_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.PEQ)
                            | (1 << jacParser.MEQ)
                            | (1 << jacParser.TEQ)
                            | (1 << jacParser.DEQ)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 757
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConnectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical(self):
            return self.getTypedRuleContext(jacParser.LogicalContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def connect_op(self):
            return self.getTypedRuleContext(jacParser.Connect_opContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect"):
                listener.enterConnect(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect"):
                listener.exitConnect(self)

    def connect(self):
        localctx = jacParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_connect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.logical()
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
            if la_ == 1:
                self.state = 763
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.NOT]:
                    self.state = 760
                    self.match(jacParser.NOT)
                    self.state = 761
                    self.edge_ref()
                    pass
                elif token in [
                    jacParser.T__6,
                    jacParser.T__8,
                    jacParser.T__9,
                    jacParser.T__10,
                    jacParser.PLUS,
                ]:
                    self.state = 762
                    self.connect_op()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 765
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.CompareContext)
            else:
                return self.getTypedRuleContext(jacParser.CompareContext, i)

        def KW_AND(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_AND)
            else:
                return self.getToken(jacParser.KW_AND, i)

        def KW_OR(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_OR)
            else:
                return self.getToken(jacParser.KW_OR, i)

        def getRuleIndex(self):
            return jacParser.RULE_logical

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical"):
                listener.enterLogical(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical"):
                listener.exitLogical(self)

    def logical(self):
        localctx = jacParser.LogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_logical)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.compare()
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_AND or _la == jacParser.KW_OR:
                self.state = 770
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_AND or _la == jacParser.KW_OR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 771
                self.compare()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def compare(self):
            return self.getTypedRuleContext(jacParser.CompareContext, 0)

        def arithmetic(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(jacParser.ArithmeticContext, i)

        def cmp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Cmp_opContext)
            else:
                return self.getTypedRuleContext(jacParser.Cmp_opContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompare"):
                listener.enterCompare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompare"):
                listener.exitCompare(self)

    def compare(self):
        localctx = jacParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_compare)
        try:
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.match(jacParser.NOT)
                self.state = 778
                self.compare()
                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.TYP_STRING,
                jacParser.TYP_INT,
                jacParser.TYP_FLOAT,
                jacParser.TYP_LIST,
                jacParser.TYP_DICT,
                jacParser.TYP_BOOL,
                jacParser.KW_TYPE,
                jacParser.KW_NODE,
                jacParser.KW_SPAWN,
                jacParser.DBL_COLON,
                jacParser.NODE_DBL_COLON,
                jacParser.LBRACE,
                jacParser.KW_EDGE,
                jacParser.KW_SYNC,
                jacParser.KW_REF,
                jacParser.KW_GLOBAL,
                jacParser.PLUS,
                jacParser.MINUS,
                jacParser.STAR_MUL,
                jacParser.LPAREN,
                jacParser.LSQUARE,
                jacParser.FLOAT,
                jacParser.STRING,
                jacParser.BOOL,
                jacParser.INT,
                jacParser.NULL,
                jacParser.NAME,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.arithmetic()
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 780
                        self.cmp_op()
                        self.state = 781
                        self.arithmetic()
                    self.state = 787
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmp_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(jacParser.EE, 0)

        def LT(self):
            return self.getToken(jacParser.LT, 0)

        def GT(self):
            return self.getToken(jacParser.GT, 0)

        def LTE(self):
            return self.getToken(jacParser.LTE, 0)

        def GTE(self):
            return self.getToken(jacParser.GTE, 0)

        def NE(self):
            return self.getToken(jacParser.NE, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def nin(self):
            return self.getTypedRuleContext(jacParser.NinContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cmp_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCmp_op"):
                listener.enterCmp_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCmp_op"):
                listener.exitCmp_op(self)

    def cmp_op(self):
        localctx = jacParser.Cmp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cmp_op)
        try:
            self.state = 798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.EE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(jacParser.EE)
                pass
            elif token in [jacParser.LT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.match(jacParser.LT)
                pass
            elif token in [jacParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 792
                self.match(jacParser.GT)
                pass
            elif token in [jacParser.LTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 793
                self.match(jacParser.LTE)
                pass
            elif token in [jacParser.GTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 794
                self.match(jacParser.GTE)
                pass
            elif token in [jacParser.NE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 795
                self.match(jacParser.NE)
                pass
            elif token in [jacParser.KW_IN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 796
                self.match(jacParser.KW_IN)
                pass
            elif token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 797
                self.nin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NinContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_nin

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNin"):
                listener.enterNin(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNin"):
                listener.exitNin(self)

    def nin(self):
        localctx = jacParser.NinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_nin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(jacParser.NOT)
            self.state = 801
            self.match(jacParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.TermContext)
            else:
                return self.getTypedRuleContext(jacParser.TermContext, i)

        def PLUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.PLUS)
            else:
                return self.getToken(jacParser.PLUS, i)

        def MINUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MINUS)
            else:
                return self.getToken(jacParser.MINUS, i)

        def getRuleIndex(self):
            return jacParser.RULE_arithmetic

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmetic"):
                listener.enterArithmetic(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmetic"):
                listener.exitArithmetic(self)

    def arithmetic(self):
        localctx = jacParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arithmetic)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.term()
            self.state = 808
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 83, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 804
                    _la = self._input.LA(1)
                    if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 805
                    self.term()
                self.state = 810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 83, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def STAR_MUL(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.STAR_MUL)
            else:
                return self.getToken(jacParser.STAR_MUL, i)

        def DIV(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DIV)
            else:
                return self.getToken(jacParser.DIV, i)

        def MOD(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MOD)
            else:
                return self.getToken(jacParser.MOD, i)

        def getRuleIndex(self):
            return jacParser.RULE_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTerm"):
                listener.enterTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTerm"):
                listener.exitTerm(self)

    def term(self):
        localctx = jacParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.factor()
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 95)) & ~0x3F) == 0 and (
                (1 << (_la - 95))
                & (
                    (1 << (jacParser.STAR_MUL - 95))
                    | (1 << (jacParser.DIV - 95))
                    | (1 << (jacParser.MOD - 95))
                )
            ) != 0:
                self.state = 812
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 95)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 95))
                            & (
                                (1 << (jacParser.STAR_MUL - 95))
                                | (1 << (jacParser.DIV - 95))
                                | (1 << (jacParser.MOD - 95))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 813
                self.factor()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(jacParser.FactorContext, 0)

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def power(self):
            return self.getTypedRuleContext(jacParser.PowerContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

    def factor(self):
        localctx = jacParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                _la = self._input.LA(1)
                if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 820
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.power()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def POW(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.POW)
            else:
                return self.getToken(jacParser.POW, i)

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_power

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPower"):
                listener.enterPower(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPower"):
                listener.exitPower(self)

    def power(self):
        localctx = jacParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.atom(0)
            self.state = 829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 825
                    self.match(jacParser.POW)
                    self.state = 826
                    self.factor()
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_global_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_ref"):
                listener.enterGlobal_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_ref"):
                listener.exitGlobal_ref(self)

    def global_ref(self):
        localctx = jacParser.Global_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_global_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(jacParser.KW_GLOBAL)
            self.state = 833
            self.match(jacParser.DOT)
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_CONTEXT, jacParser.KW_INFO, jacParser.KW_DETAILS]:
                self.state = 834
                self.obj_built_in()
                pass
            elif token in [jacParser.NAME]:
                self.state = 835
                self.match(jacParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def multistring(self):
            return self.getTypedRuleContext(jacParser.MultistringContext, 0)

        def BOOL(self):
            return self.getToken(jacParser.BOOL, 0)

        def NULL(self):
            return self.getToken(jacParser.NULL, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def global_ref(self):
            return self.getTypedRuleContext(jacParser.Global_refContext, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext, 0)

        def list_val(self):
            return self.getTypedRuleContext(jacParser.List_valContext, 0)

        def dict_val(self):
            return self.getTypedRuleContext(jacParser.Dict_valContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def KW_SYNC(self):
            return self.getToken(jacParser.KW_SYNC, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def spawn(self):
            return self.getTypedRuleContext(jacParser.SpawnContext, 0)

        def ref(self):
            return self.getTypedRuleContext(jacParser.RefContext, 0)

        def deref(self):
            return self.getTypedRuleContext(jacParser.DerefContext, 0)

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def atom_trailer(self):
            return self.getTypedRuleContext(jacParser.Atom_trailerContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

    def atom(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = jacParser.AtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_atom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.INT]:
                self.state = 839
                self.match(jacParser.INT)
                pass
            elif token in [jacParser.FLOAT]:
                self.state = 840
                self.match(jacParser.FLOAT)
                pass
            elif token in [jacParser.STRING]:
                self.state = 841
                self.multistring()
                pass
            elif token in [jacParser.BOOL]:
                self.state = 842
                self.match(jacParser.BOOL)
                pass
            elif token in [jacParser.NULL]:
                self.state = 843
                self.match(jacParser.NULL)
                pass
            elif token in [jacParser.NAME]:
                self.state = 844
                self.match(jacParser.NAME)
                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.state = 845
                self.global_ref()
                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.NODE_DBL_COLON,
                jacParser.MINUS,
            ]:
                self.state = 846
                self.node_edge_ref()
                pass
            elif token in [jacParser.LSQUARE]:
                self.state = 847
                self.list_val()
                pass
            elif token in [jacParser.LBRACE]:
                self.state = 848
                self.dict_val()
                pass
            elif token in [jacParser.LPAREN]:
                self.state = 849
                self.match(jacParser.LPAREN)
                self.state = 850
                self.expression()
                self.state = 851
                self.match(jacParser.RPAREN)
                pass
            elif token in [jacParser.DBL_COLON]:
                self.state = 853
                self.ability_op()
                self.state = 854
                self.match(jacParser.NAME)
                self.state = 856
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
                if la_ == 1:
                    self.state = 855
                    self.spawn_ctx()

                pass
            elif token in [jacParser.KW_SYNC]:
                self.state = 858
                self.match(jacParser.KW_SYNC)
                self.state = 859
                self.atom(5)
                pass
            elif token in [jacParser.KW_SPAWN]:
                self.state = 860
                self.spawn()
                pass
            elif token in [jacParser.KW_REF]:
                self.state = 861
                self.ref()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 862
                self.deref()
                pass
            elif token in [
                jacParser.TYP_STRING,
                jacParser.TYP_INT,
                jacParser.TYP_FLOAT,
                jacParser.TYP_LIST,
                jacParser.TYP_DICT,
                jacParser.TYP_BOOL,
                jacParser.KW_TYPE,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
            ]:
                self.state = 863
                self.any_type()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                    self.state = 866
                    if not self.precpred(self._ctx, 6):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 6)"
                        )
                    self.state = 867
                    self.atom_trailer()
                self.state = 872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atom_trailerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def built_in(self):
            return self.getTypedRuleContext(jacParser.Built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def index_slice(self):
            return self.getTypedRuleContext(jacParser.Index_sliceContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def param_list(self):
            return self.getTypedRuleContext(jacParser.Param_listContext, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_atom_trailer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom_trailer"):
                listener.enterAtom_trailer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom_trailer"):
                listener.exitAtom_trailer(self)

    def atom_trailer(self):
        localctx = jacParser.Atom_trailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_atom_trailer)
        self._la = 0  # Token type
        try:
            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(jacParser.DOT)
                self.state = 874
                self.built_in()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.match(jacParser.DOT)
                self.state = 876
                self.match(jacParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 877
                self.index_slice()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 878
                self.match(jacParser.LPAREN)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__3)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.NODE_DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_SYNC)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 77)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 77))
                        & (
                            (1 << (jacParser.KW_REF - 77))
                            | (1 << (jacParser.NOT - 77))
                            | (1 << (jacParser.KW_GLOBAL - 77))
                            | (1 << (jacParser.PLUS - 77))
                            | (1 << (jacParser.MINUS - 77))
                            | (1 << (jacParser.STAR_MUL - 77))
                            | (1 << (jacParser.LPAREN - 77))
                            | (1 << (jacParser.LSQUARE - 77))
                            | (1 << (jacParser.FLOAT - 77))
                            | (1 << (jacParser.STRING - 77))
                            | (1 << (jacParser.BOOL - 77))
                            | (1 << (jacParser.INT - 77))
                            | (1 << (jacParser.NULL - 77))
                            | (1 << (jacParser.NAME - 77))
                        )
                    )
                    != 0
                ):
                    self.state = 879
                    self.param_list()

                self.state = 882
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 883
                self.ability_op()
                self.state = 884
                self.match(jacParser.NAME)
                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.spawn_ctx()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ability_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ability_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbility_op"):
                listener.enterAbility_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbility_op"):
                listener.exitAbility_op(self)

    def ability_op(self):
        localctx = jacParser.Ability_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_ability_op)
        try:
            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self.match(jacParser.DBL_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.match(jacParser.DBL_COLON)
                self.state = 892
                self.match(jacParser.NAME)
                self.state = 893
                self.match(jacParser.COLON)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REF(self):
            return self.getToken(jacParser.KW_REF, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRef"):
                listener.enterRef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRef"):
                listener.exitRef(self)

    def ref(self):
        localctx = jacParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.match(jacParser.KW_REF)
            self.state = 897
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_deref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeref"):
                listener.enterDeref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeref"):
                listener.exitDeref(self)

    def deref(self):
        localctx = jacParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(jacParser.STAR_MUL)
            self.state = 900
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_built_in(self):
            return self.getTypedRuleContext(jacParser.String_built_inContext, 0)

        def dict_built_in(self):
            return self.getTypedRuleContext(jacParser.Dict_built_inContext, 0)

        def list_built_in(self):
            return self.getTypedRuleContext(jacParser.List_built_inContext, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def cast_built_in(self):
            return self.getTypedRuleContext(jacParser.Cast_built_inContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBuilt_in"):
                listener.enterBuilt_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBuilt_in"):
                listener.exitBuilt_in(self)

    def built_in(self):
        localctx = jacParser.Built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_built_in)
        try:
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.string_built_in()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 904
                self.dict_built_in()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 905
                self.list_built_in()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 906
                self.obj_built_in()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 907
                self.cast_built_in()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cast_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCast_built_in"):
                listener.enterCast_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCast_built_in"):
                listener.exitCast_built_in(self)

    def cast_built_in(self):
        localctx = jacParser.Cast_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_cast_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Obj_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(jacParser.KW_CONTEXT, 0)

        def KW_INFO(self):
            return self.getToken(jacParser.KW_INFO, 0)

        def KW_DETAILS(self):
            return self.getToken(jacParser.KW_DETAILS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_obj_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObj_built_in"):
                listener.enterObj_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObj_built_in"):
                listener.exitObj_built_in(self)

    def obj_built_in(self):
        localctx = jacParser.Obj_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_obj_built_in)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_CONTEXT)
                            | (1 << jacParser.KW_INFO)
                            | (1 << jacParser.KW_DETAILS)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KEYS(self):
            return self.getToken(jacParser.KW_KEYS, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def DICT_DBL_COLON(self):
            return self.getToken(jacParser.DICT_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dict_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_built_in"):
                listener.enterDict_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_built_in"):
                listener.exitDict_built_in(self)

    def dict_built_in(self):
        localctx = jacParser.Dict_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dict_built_in)
        self._la = 0  # Token type
        try:
            self.state = 931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_KEYS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.match(jacParser.KW_KEYS)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(jacParser.LBRACE)
                self.state = 916
                self.name_list()
                self.state = 917
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.TYP_DICT, jacParser.DICT_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 922
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_DICT]:
                    self.state = 919
                    self.match(jacParser.TYP_DICT)
                    self.state = 920
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.DICT_DBL_COLON]:
                    self.state = 921
                    self.match(jacParser.DICT_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 924
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_KEYS or _la == jacParser.NAME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 929
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
                if la_ == 1:
                    self.state = 925
                    self.match(jacParser.LPAREN)
                    self.state = 926
                    self.expr_list()
                    self.state = 927
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LENGTH(self):
            return self.getToken(jacParser.KW_LENGTH, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def LIST_DBL_COLON(self):
            return self.getToken(jacParser.LIST_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_built_in"):
                listener.enterList_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_built_in"):
                listener.exitList_built_in(self)

    def list_built_in(self):
        localctx = jacParser.List_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_list_built_in)
        try:
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_LENGTH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.match(jacParser.KW_LENGTH)
                pass
            elif token in [jacParser.TYP_LIST, jacParser.LIST_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_LIST]:
                    self.state = 934
                    self.match(jacParser.TYP_LIST)
                    self.state = 935
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.LIST_DBL_COLON]:
                    self.state = 936
                    self.match(jacParser.LIST_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 939
                self.match(jacParser.NAME)
                self.state = 944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
                if la_ == 1:
                    self.state = 940
                    self.match(jacParser.LPAREN)
                    self.state = 941
                    self.expr_list()
                    self.state = 942
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def STR_DBL_COLON(self):
            return self.getToken(jacParser.STR_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_string_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_built_in"):
                listener.enterString_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_built_in"):
                listener.exitString_built_in(self)

    def string_built_in(self):
        localctx = jacParser.String_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_string_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.TYP_STRING]:
                self.state = 948
                self.match(jacParser.TYP_STRING)
                self.state = 949
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.STR_DBL_COLON]:
                self.state = 950
                self.match(jacParser.STR_DBL_COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 953
            self.match(jacParser.NAME)
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
            if la_ == 1:
                self.state = 954
                self.match(jacParser.LPAREN)
                self.state = 955
                self.expr_list()
                self.state = 956
                self.match(jacParser.RPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_edge_ref"):
                listener.enterNode_edge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_edge_ref"):
                listener.exitNode_edge_ref(self)

    def node_edge_ref(self):
        localctx = jacParser.Node_edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_node_edge_ref)
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NODE_DBL_COLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.node_ref()
                self.state = 962
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                if la_ == 1:
                    self.state = 961
                    self.filter_ctx()

                self.state = 965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
                if la_ == 1:
                    self.state = 964
                    self.node_edge_ref()

                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.MINUS,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 967
                self.edge_ref()
                self.state = 969
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
                if la_ == 1:
                    self.state = 968
                    self.node_edge_ref()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE_DBL_COLON(self):
            return self.getToken(jacParser.NODE_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ref"):
                listener.enterNode_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ref"):
                listener.exitNode_ref(self)

    def node_ref(self):
        localctx = jacParser.Node_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_node_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(jacParser.NODE_DBL_COLON)
            self.state = 974
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WALKER_DBL_COLON(self):
            return self.getToken(jacParser.WALKER_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_ref"):
                listener.enterWalker_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_ref"):
                listener.exitWalker_ref(self)

    def walker_ref(self):
        localctx = jacParser.Walker_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_walker_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(jacParser.WALKER_DBL_COLON)
            self.state = 977
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH_DBL_COLON(self):
            return self.getToken(jacParser.GRAPH_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_ref"):
                listener.enterGraph_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_ref"):
                listener.exitGraph_ref(self)

    def graph_ref(self):
        localctx = jacParser.Graph_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_graph_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(jacParser.GRAPH_DBL_COLON)
            self.state = 980
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_DBL_COLON(self):
            return self.getToken(jacParser.TYPE_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_type_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_ref"):
                listener.enterType_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_ref"):
                listener.exitType_ref(self)

    def type_ref(self):
        localctx = jacParser.Type_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_type_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(jacParser.TYPE_DBL_COLON)
            self.state = 983
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_to(self):
            return self.getTypedRuleContext(jacParser.Edge_toContext, 0)

        def edge_from(self):
            return self.getTypedRuleContext(jacParser.Edge_fromContext, 0)

        def edge_any(self):
            return self.getTypedRuleContext(jacParser.Edge_anyContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_ref"):
                listener.enterEdge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_ref"):
                listener.exitEdge_ref(self)

    def edge_ref(self):
        localctx = jacParser.Edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_edge_ref)
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.edge_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.edge_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 987
                self.edge_any()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_toContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_to

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_to"):
                listener.enterEdge_to(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_to"):
                listener.exitEdge_to(self)

    def edge_to(self):
        localctx = jacParser.Edge_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_edge_to)
        self._la = 0  # Token type
        try:
            self.state = 1001
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.match(jacParser.T__1)
                pass
            elif token in [jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(jacParser.MINUS)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 992
                    self.match(jacParser.LSQUARE)
                    self.state = 993
                    self.match(jacParser.NAME)
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 994
                        self.filter_ctx()

                    self.state = 997
                    self.match(jacParser.RSQUARE)

                self.state = 1000
                self.match(jacParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_from"):
                listener.enterEdge_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_from"):
                listener.exitEdge_from(self)

    def edge_from(self):
        localctx = jacParser.Edge_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_edge_from)
        self._la = 0  # Token type
        try:
            self.state = 1014
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.match(jacParser.T__3)
                pass
            elif token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.match(jacParser.T__4)
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1005
                    self.match(jacParser.LSQUARE)
                    self.state = 1006
                    self.match(jacParser.NAME)
                    self.state = 1008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1007
                        self.filter_ctx()

                    self.state = 1010
                    self.match(jacParser.RSQUARE)

                self.state = 1013
                self.match(jacParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_anyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_any

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_any"):
                listener.enterEdge_any(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_any"):
                listener.exitEdge_any(self)

    def edge_any(self):
        localctx = jacParser.Edge_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_edge_any)
        self._la = 0  # Token type
        try:
            self.state = 1027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                self.match(jacParser.T__5)
                pass
            elif token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1017
                self.match(jacParser.T__4)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1018
                    self.match(jacParser.LSQUARE)
                    self.state = 1019
                    self.match(jacParser.NAME)
                    self.state = 1021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1020
                        self.filter_ctx()

                    self.state = 1023
                    self.match(jacParser.RSQUARE)

                self.state = 1026
                self.match(jacParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect_to(self):
            return self.getTypedRuleContext(jacParser.Connect_toContext, 0)

        def connect_from(self):
            return self.getTypedRuleContext(jacParser.Connect_fromContext, 0)

        def connect_any(self):
            return self.getTypedRuleContext(jacParser.Connect_anyContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_op"):
                listener.enterConnect_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_op"):
                listener.exitConnect_op(self)

    def connect_op(self):
        localctx = jacParser.Connect_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_connect_op)
        try:
            self.state = 1032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1029
                self.connect_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self.connect_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1031
                self.connect_any()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_toContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect_to

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_to"):
                listener.enterConnect_to(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_to"):
                listener.exitConnect_to(self)

    def connect_to(self):
        localctx = jacParser.Connect_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_connect_to)
        self._la = 0  # Token type
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.match(jacParser.T__6)
                pass
            elif token in [jacParser.PLUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(jacParser.PLUS)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1036
                    self.match(jacParser.LSQUARE)
                    self.state = 1037
                    self.match(jacParser.NAME)
                    self.state = 1039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1038
                        self.spawn_ctx()

                    self.state = 1041
                    self.match(jacParser.RSQUARE)

                self.state = 1044
                self.match(jacParser.T__7)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_from"):
                listener.enterConnect_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_from"):
                listener.exitConnect_from(self)

    def connect_from(self):
        localctx = jacParser.Connect_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_connect_from)
        self._la = 0  # Token type
        try:
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1047
                self.match(jacParser.T__8)
                pass
            elif token in [jacParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1048
                self.match(jacParser.T__9)
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1049
                    self.match(jacParser.LSQUARE)
                    self.state = 1050
                    self.match(jacParser.NAME)
                    self.state = 1052
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1051
                        self.spawn_ctx()

                    self.state = 1054
                    self.match(jacParser.RSQUARE)

                self.state = 1057
                self.match(jacParser.PLUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Connect_anyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect_any

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect_any"):
                listener.enterConnect_any(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect_any"):
                listener.exitConnect_any(self)

    def connect_any(self):
        localctx = jacParser.Connect_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_connect_any)
        self._la = 0  # Token type
        try:
            self.state = 1071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1060
                self.match(jacParser.T__10)
                pass
            elif token in [jacParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.match(jacParser.T__9)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 1062
                    self.match(jacParser.LSQUARE)
                    self.state = 1063
                    self.match(jacParser.NAME)
                    self.state = 1065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.LPAREN:
                        self.state = 1064
                        self.spawn_ctx()

                    self.state = 1067
                    self.match(jacParser.RSQUARE)

                self.state = 1070
                self.match(jacParser.T__7)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_val"):
                listener.enterList_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_val"):
                listener.exitList_val(self)

    def list_val(self):
        localctx = jacParser.List_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_list_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(jacParser.LSQUARE)
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 77)) & ~0x3F) == 0
                and (
                    (1 << (_la - 77))
                    & (
                        (1 << (jacParser.KW_REF - 77))
                        | (1 << (jacParser.NOT - 77))
                        | (1 << (jacParser.KW_GLOBAL - 77))
                        | (1 << (jacParser.PLUS - 77))
                        | (1 << (jacParser.MINUS - 77))
                        | (1 << (jacParser.STAR_MUL - 77))
                        | (1 << (jacParser.LPAREN - 77))
                        | (1 << (jacParser.LSQUARE - 77))
                        | (1 << (jacParser.FLOAT - 77))
                        | (1 << (jacParser.STRING - 77))
                        | (1 << (jacParser.BOOL - 77))
                        | (1 << (jacParser.INT - 77))
                        | (1 << (jacParser.NULL - 77))
                        | (1 << (jacParser.NAME - 77))
                    )
                )
                != 0
            ):
                self.state = 1074
                self.expr_list()

            self.state = 1077
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_sliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index_slice

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndex_slice"):
                listener.enterIndex_slice(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndex_slice"):
                listener.exitIndex_slice(self)

    def index_slice(self):
        localctx = jacParser.Index_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_index_slice)
        try:
            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1079
                self.match(jacParser.LSQUARE)
                self.state = 1080
                self.expression()
                self.state = 1081
                self.match(jacParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.match(jacParser.LSQUARE)
                self.state = 1084
                self.expression()
                self.state = 1085
                self.match(jacParser.COLON)
                self.state = 1086
                self.expression()
                self.state = 1087
                self.match(jacParser.RSQUARE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def kv_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(jacParser.Kv_pairContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dict_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_val"):
                listener.enterDict_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_val"):
                listener.exitDict_val(self)

    def dict_val(self):
        localctx = jacParser.Dict_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_dict_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(jacParser.LBRACE)
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 77)) & ~0x3F) == 0
                and (
                    (1 << (_la - 77))
                    & (
                        (1 << (jacParser.KW_REF - 77))
                        | (1 << (jacParser.NOT - 77))
                        | (1 << (jacParser.KW_GLOBAL - 77))
                        | (1 << (jacParser.PLUS - 77))
                        | (1 << (jacParser.MINUS - 77))
                        | (1 << (jacParser.STAR_MUL - 77))
                        | (1 << (jacParser.LPAREN - 77))
                        | (1 << (jacParser.LSQUARE - 77))
                        | (1 << (jacParser.FLOAT - 77))
                        | (1 << (jacParser.STRING - 77))
                        | (1 << (jacParser.BOOL - 77))
                        | (1 << (jacParser.INT - 77))
                        | (1 << (jacParser.NULL - 77))
                        | (1 << (jacParser.NAME - 77))
                    )
                )
                != 0
            ):
                self.state = 1092
                self.kv_pair()
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1093
                    self.match(jacParser.COMMA)
                    self.state = 1094
                    self.kv_pair()
                    self.state = 1099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1102
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kv_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_kv_pair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKv_pair"):
                listener.enterKv_pair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKv_pair"):
                listener.exitKv_pair(self)

    def kv_pair(self):
        localctx = jacParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.expression()
            self.state = 1105
            self.match(jacParser.COLON)
            self.state = 1106
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def spawn_object(self):
            return self.getTypedRuleContext(jacParser.Spawn_objectContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn"):
                listener.enterSpawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn"):
                listener.exitSpawn(self)

    def spawn(self):
        localctx = jacParser.SpawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(jacParser.KW_SPAWN)
            self.state = 1109
            self.spawn_object()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_objectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_spawn(self):
            return self.getTypedRuleContext(jacParser.Node_spawnContext, 0)

        def walker_spawn(self):
            return self.getTypedRuleContext(jacParser.Walker_spawnContext, 0)

        def graph_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_spawnContext, 0)

        def type_spawn(self):
            return self.getTypedRuleContext(jacParser.Type_spawnContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_object

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_object"):
                listener.enterSpawn_object(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_object"):
                listener.exitSpawn_object(self)

    def spawn_object(self):
        localctx = jacParser.Spawn_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_spawn_object)
        try:
            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.node_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.walker_spawn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1113
                self.graph_spawn()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1114
                self.type_spawn()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_edgeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def connect_op(self):
            return self.getTypedRuleContext(jacParser.Connect_opContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_edge

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_edge"):
                listener.enterSpawn_edge(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_edge"):
                listener.exitSpawn_edge(self)

    def spawn_edge(self):
        localctx = jacParser.Spawn_edgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_spawn_edge)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.expression()
            self.state = 1118
            self.connect_op()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_spawn"):
                listener.enterNode_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_spawn"):
                listener.exitNode_spawn(self)

    def node_spawn(self):
        localctx = jacParser.Node_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_node_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
            if la_ == 1:
                self.state = 1120
                self.spawn_edge()

            self.state = 1123
            self.node_ref()
            self.state = 1125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
            if la_ == 1:
                self.state = 1124
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_spawn"):
                listener.enterGraph_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_spawn"):
                listener.exitGraph_spawn(self)

    def graph_spawn(self):
        localctx = jacParser.Graph_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_graph_spawn)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 77)) & ~0x3F) == 0
                and (
                    (1 << (_la - 77))
                    & (
                        (1 << (jacParser.KW_REF - 77))
                        | (1 << (jacParser.NOT - 77))
                        | (1 << (jacParser.KW_GLOBAL - 77))
                        | (1 << (jacParser.PLUS - 77))
                        | (1 << (jacParser.MINUS - 77))
                        | (1 << (jacParser.STAR_MUL - 77))
                        | (1 << (jacParser.LPAREN - 77))
                        | (1 << (jacParser.LSQUARE - 77))
                        | (1 << (jacParser.FLOAT - 77))
                        | (1 << (jacParser.STRING - 77))
                        | (1 << (jacParser.BOOL - 77))
                        | (1 << (jacParser.INT - 77))
                        | (1 << (jacParser.NULL - 77))
                        | (1 << (jacParser.NAME - 77))
                    )
                )
                != 0
            ):
                self.state = 1127
                self.spawn_edge()

            self.state = 1130
            self.graph_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def KW_SYNC(self):
            return self.getToken(jacParser.KW_SYNC, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_spawn"):
                listener.enterWalker_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_spawn"):
                listener.exitWalker_spawn(self)

    def walker_spawn(self):
        localctx = jacParser.Walker_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_walker_spawn)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.expression()
            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_SYNC:
                self.state = 1133
                self.match(jacParser.KW_SYNC)

            self.state = 1136
            self.walker_ref()
            self.state = 1138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
            if la_ == 1:
                self.state = 1137
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_ref(self):
            return self.getTypedRuleContext(jacParser.Type_refContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_type_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_spawn"):
                listener.enterType_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_spawn"):
                listener.exitType_spawn(self)

    def type_spawn(self):
        localctx = jacParser.Type_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_type_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.type_ref()
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
            if la_ == 1:
                self.state = 1141
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Spawn_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Spawn_assignContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_ctx"):
                listener.enterSpawn_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_ctx"):
                listener.exitSpawn_ctx(self)

    def spawn_ctx(self):
        localctx = jacParser.Spawn_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_spawn_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(jacParser.LPAREN)
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1145
                self.spawn_assign()
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1146
                    self.match(jacParser.COMMA)
                    self.state = 1147
                    self.spawn_assign()
                    self.state = 1152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1155
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def filter_compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Filter_compareContext)
            else:
                return self.getTypedRuleContext(jacParser.Filter_compareContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_filter_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_ctx"):
                listener.enterFilter_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_ctx"):
                listener.exitFilter_ctx(self)

    def filter_ctx(self):
        localctx = jacParser.Filter_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_filter_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(jacParser.LPAREN)
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1158
                self.filter_compare()
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1159
                    self.match(jacParser.COMMA)
                    self.state = 1160
                    self.filter_compare()
                    self.state = 1165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1168
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_assign"):
                listener.enterSpawn_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_assign"):
                listener.exitSpawn_assign(self)

    def spawn_assign(self):
        localctx = jacParser.Spawn_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_spawn_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(jacParser.NAME)
            self.state = 1171
            self.match(jacParser.EQ)
            self.state = 1172
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_compareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def cmp_op(self):
            return self.getTypedRuleContext(jacParser.Cmp_opContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_filter_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_compare"):
                listener.enterFilter_compare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_compare"):
                listener.exitFilter_compare(self)

    def filter_compare(self):
        localctx = jacParser.Filter_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_filter_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(jacParser.NAME)
            self.state = 1175
            self.cmp_op()
            self.state = 1176
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def TYP_INT(self):
            return self.getToken(jacParser.TYP_INT, 0)

        def TYP_FLOAT(self):
            return self.getToken(jacParser.TYP_FLOAT, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def TYP_BOOL(self):
            return self.getToken(jacParser.TYP_BOOL, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_any_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAny_type"):
                listener.enterAny_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAny_type"):
                listener.exitAny_type(self)

    def any_type(self):
        localctx = jacParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_any_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultistringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.STRING)
            else:
                return self.getToken(jacParser.STRING, i)

        def getRuleIndex(self):
            return jacParser.RULE_multistring

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultistring"):
                listener.enterMultistring(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultistring"):
                listener.exitMultistring(self)

    def multistring(self):
        localctx = jacParser.MultistringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_multistring)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1180
                    self.match(jacParser.STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 1183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[64] = self.atom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def atom_sempred(self, localctx: AtomContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 6)
