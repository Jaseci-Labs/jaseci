# Generated from jac.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3n")
        buf.write("\u0457\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\3\2\5\2\u00c8\n\2\3\2\7\2")
        buf.write("\u00cb\n\2\f\2\16\2\u00ce\13\2\3\2\7\2\u00d1\n\2\f\2\16")
        buf.write("\2\u00d4\13\2\3\2\3\2\3\3\3\3\3\3\3\3\5\3\u00dc\n\3\3")
        buf.write("\4\3\4\3\4\3\4\5\4\u00e2\n\4\3\4\3\4\3\4\3\4\3\4\3\5\3")
        buf.write("\5\3\5\5\5\u00ec\n\5\3\5\3\5\5\5\u00f0\n\5\3\5\3\5\3\5")
        buf.write("\5\5\u00f5\n\5\3\5\3\5\5\5\u00f9\n\5\3\5\3\5\3\5\5\5\u00fe")
        buf.write("\n\5\3\5\3\5\5\5\u0102\n\5\3\5\3\5\3\5\5\5\u0107\n\5\3")
        buf.write("\5\3\5\5\5\u010b\n\5\3\5\3\5\3\5\3\5\5\5\u0111\n\5\3\5")
        buf.write("\3\5\5\5\u0115\n\5\3\5\3\5\3\5\5\5\u011a\n\5\3\5\3\5\5")
        buf.write("\5\u011e\n\5\5\5\u0120\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u0127")
        buf.write("\n\6\3\7\3\7\3\7\5\7\u012c\n\7\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\7\b\u0136\n\b\f\b\16\b\u0139\13\b\3\b\3\b\3\t")
        buf.write("\3\t\3\t\3\t\7\t\u0141\n\t\f\t\16\t\u0144\13\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\7\t\u014b\n\t\f\t\16\t\u014e\13\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0158\n\t\3\t\3\t\3\t\5\t")
        buf.write("\u015d\n\t\3\t\5\t\u0160\n\t\3\n\3\n\7\n\u0164\n\n\f\n")
        buf.write("\16\n\u0167\13\n\3\n\5\n\u016a\n\n\3\n\3\n\7\n\u016e\n")
        buf.write("\n\f\n\16\n\u0171\13\n\3\n\5\n\u0174\n\n\3\n\3\n\3\13")
        buf.write("\3\13\5\13\u017a\n\13\3\13\3\13\3\13\3\13\3\13\5\13\u0181")
        buf.write("\n\13\3\13\3\13\3\13\5\13\u0186\n\13\3\13\3\13\5\13\u018a")
        buf.write("\n\13\3\13\3\13\5\13\u018e\n\13\3\f\3\f\3\f\3\r\3\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3")
        buf.write("\20\7\20\u01a1\n\20\f\20\16\20\u01a4\13\20\3\20\3\20\3")
        buf.write("\20\3\20\5\20\u01aa\n\20\3\21\3\21\5\21\u01ae\n\21\3\22")
        buf.write("\3\22\7\22\u01b2\n\22\f\22\16\22\u01b5\13\22\3\22\3\22")
        buf.write("\3\22\3\22\5\22\u01bb\n\22\3\23\7\23\u01be\n\23\f\23\16")
        buf.write("\23\u01c1\13\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u01d3\n")
        buf.write("\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\7\27")
        buf.write("\u01de\n\27\f\27\16\27\u01e1\13\27\3\27\3\27\3\30\5\30")
        buf.write("\u01e6\n\30\3\30\5\30\u01e9\n\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u01ef\n\30\3\31\3\31\3\31\3\31\3\31\5\31\u01f6\n\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\5\31\u01fd\n\31\7\31\u01ff\n")
        buf.write("\31\f\31\16\31\u0202\13\31\3\31\3\31\3\31\3\31\3\31\5")
        buf.write("\31\u0209\n\31\3\31\5\31\u020c\n\31\3\32\3\32\5\32\u0210")
        buf.write("\n\32\3\32\3\32\3\33\3\33\5\33\u0216\n\33\3\33\3\33\3")
        buf.write("\33\5\33\u021b\n\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\7\35\u0224\n\35\f\35\16\35\u0227\13\35\3\36\3\36\3\36")
        buf.write("\7\36\u022c\n\36\f\36\16\36\u022f\13\36\3\37\3\37\7\37")
        buf.write("\u0233\n\37\f\37\16\37\u0236\13\37\3\37\3\37\3\37\5\37")
        buf.write("\u023b\n\37\3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!")
        buf.write('\3!\3!\3!\3!\3!\3!\3!\5!\u0252\n!\3"\3"\3"\3"\7"')
        buf.write('\u0258\n"\f"\16"\u025b\13"\3"\5"\u025e\n"\3#\3')
        buf.write("#\3#\5#\u0263\n#\3$\3$\3$\3$\5$\u0269\n$\3$\3$\3$\3$\5")
        buf.write("$\u026f\n$\3$\5$\u0272\n$\3%\3%\3%\3%\3&\3&\3&\3'\3'")
        buf.write("\3'\3'\3'\3'\3'\3'\3'\3'\3'\3'\5'\u0287\n'")
        buf.write("\3'\3'\3'\3'\5'\u028d\n'\3(\3(\3(\3(\3)\3)\3*\3")
        buf.write("*\3*\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u02a7")
        buf.write("\n,\3-\3-\3-\3-\5-\u02ad\n-\3.\3.\3.\3.\3/\3/\3/\5/\u02b6")
        buf.write("\n/\3/\3/\3/\5/\u02bb\n/\3\60\3\60\3\60\5\60\u02c0\n\60")
        buf.write("\3\61\3\61\3\61\3\61\3\61\5\61\u02c7\n\61\3\62\3\62\3")
        buf.write("\62\3\62\5\62\u02cd\n\62\3\63\3\63\3\63\3\64\3\64\3\64")
        buf.write("\3\65\3\65\3\65\3\66\3\66\5\66\u02da\n\66\3\66\3\66\3")
        buf.write("\66\5\66\u02df\n\66\3\67\3\67\3\67\7\67\u02e4\n\67\f\67")
        buf.write("\16\67\u02e7\13\67\38\38\38\38\38\38\78\u02ef\n8\f8\16")
        buf.write("8\u02f2\138\58\u02f4\n8\39\39\39\39\39\39\39\39\59\u02fe")
        buf.write("\n9\3:\3:\3:\3;\3;\3;\7;\u0306\n;\f;\16;\u0309\13;\3<")
        buf.write("\3<\3<\7<\u030e\n<\f<\16<\u0311\13<\3=\3=\3=\5=\u0316")
        buf.write("\n=\3>\3>\3>\7>\u031b\n>\f>\16>\u031e\13>\3?\3?\3?\3?")
        buf.write("\5?\u0324\n?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\5@\u0338\n@\3@\3@\3@\3@\3@\3@\5@\u0340\n")
        buf.write("@\3@\3@\6@\u0344\n@\r@\16@\u0345\7@\u0348\n@\f@\16@\u034b")
        buf.write("\13@\3A\3A\3A\3A\3A\3A\3A\5A\u0354\nA\3A\3A\3A\3A\5A\u035a")
        buf.write("\nA\5A\u035c\nA\3B\3B\3B\3B\5B\u0362\nB\3C\3C\3C\3D\3")
        buf.write("D\3D\3E\3E\3E\3E\3E\3E\5E\u0370\nE\3F\3F\3G\3G\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\5H\u037e\nH\3H\3H\3H\3H\3H\5H\u0385\n")
        buf.write("H\5H\u0387\nH\3I\3I\3I\3I\5I\u038d\nI\3I\3I\3I\3I\3I\5")
        buf.write("I\u0394\nI\5I\u0396\nI\3J\3J\3J\5J\u039b\nJ\3J\3J\3J\3")
        buf.write("J\3J\5J\u03a2\nJ\3K\3K\5K\u03a6\nK\3K\3K\3K\5K\u03ab\n")
        buf.write("K\5K\u03ad\nK\5K\u03af\nK\3L\3L\3L\3M\3M\3M\3N\3N\3N\3")
        buf.write("O\3O\3O\3P\3P\3P\5P\u03c0\nP\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u03c8")
        buf.write("\nQ\3Q\5Q\u03cb\nQ\3Q\5Q\u03ce\nQ\3R\3R\3R\3R\3R\3R\5")
        buf.write("R\u03d6\nR\3R\5R\u03d9\nR\3R\5R\u03dc\nR\3S\3S\3S\3S\3")
        buf.write("S\3S\5S\u03e4\nS\3S\5S\u03e7\nS\3S\5S\u03ea\nS\3T\3T\5")
        buf.write("T\u03ee\nT\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u03fc")
        buf.write("\nU\3V\3V\3V\3V\7V\u0402\nV\fV\16V\u0405\13V\5V\u0407")
        buf.write("\nV\3V\3V\3W\3W\3W\3W\3X\3X\3X\3Y\3Y\3Y\3Y\5Y\u0416\n")
        buf.write("Y\3Z\3Z\3Z\3[\5[\u041c\n[\3[\3[\5[\u0420\n[\3\\\5\\\u0423")
        buf.write("\n\\\3\\\3\\\3]\3]\5]\u0429\n]\3]\3]\5]\u042d\n]\3^\3")
        buf.write("^\5^\u0431\n^\3_\3_\3_\3_\7_\u0437\n_\f_\16_\u043a\13")
        buf.write("_\5_\u043c\n_\3_\3_\3`\3`\3`\3`\7`\u0444\n`\f`\16`\u0447")
        buf.write("\13`\5`\u0449\n`\3`\3`\3a\3a\3a\3a\3b\3b\3b\3b\3c\3c\3")
        buf.write('c\2\3~d\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 "$&(*')
        buf.write(",.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\2\13\4\2\26")
        buf.write("\27\35\35\4\2BCFF\3\2\64\67\3\29:\3\2Z[\3\2\\^\3\2\32")
        buf.write("\34\4\2\31\31ii\5\2\t\17\21\21,,\2\u04b5\2\u00c7\3\2\2")
        buf.write("\2\4\u00d7\3\2\2\2\6\u00dd\3\2\2\2\b\u011f\3\2\2\2\n\u0126")
        buf.write("\3\2\2\2\f\u012b\3\2\2\2\16\u012d\3\2\2\2\20\u015f\3\2")
        buf.write("\2\2\22\u0161\3\2\2\2\24\u0177\3\2\2\2\26\u018f\3\2\2")
        buf.write("\2\30\u0192\3\2\2\2\32\u0196\3\2\2\2\34\u019a\3\2\2\2")
        buf.write('\36\u01a9\3\2\2\2 \u01ad\3\2\2\2"\u01ba\3\2\2\2$\u01bf')
        buf.write("\3\2\2\2&\u01c2\3\2\2\2(\u01d2\3\2\2\2*\u01d4\3\2\2\2")
        buf.write(",\u01d9\3\2\2\2.\u01e5\3\2\2\2\60\u020b\3\2\2\2\62\u020d")
        buf.write("\3\2\2\2\64\u0213\3\2\2\2\66\u021c\3\2\2\28\u0220\3\2")
        buf.write("\2\2:\u0228\3\2\2\2<\u023a\3\2\2\2>\u023c\3\2\2\2@\u0251")
        buf.write("\3\2\2\2B\u0253\3\2\2\2D\u025f\3\2\2\2F\u0271\3\2\2\2")
        buf.write("H\u0273\3\2\2\2J\u0277\3\2\2\2L\u028c\3\2\2\2N\u028e\3")
        buf.write("\2\2\2P\u0292\3\2\2\2R\u0294\3\2\2\2T\u0297\3\2\2\2V\u02a6")
        buf.write("\3\2\2\2X\u02ac\3\2\2\2Z\u02ae\3\2\2\2\\\u02b2\3\2\2\2")
        buf.write("^\u02bc\3\2\2\2`\u02c1\3\2\2\2b\u02c8\3\2\2\2d\u02ce\3")
        buf.write("\2\2\2f\u02d1\3\2\2\2h\u02d4\3\2\2\2j\u02d7\3\2\2\2l\u02e0")
        buf.write("\3\2\2\2n\u02f3\3\2\2\2p\u02fd\3\2\2\2r\u02ff\3\2\2\2")
        buf.write("t\u0302\3\2\2\2v\u030a\3\2\2\2x\u0315\3\2\2\2z\u0317\3")
        buf.write("\2\2\2|\u031f\3\2\2\2~\u033f\3\2\2\2\u0080\u035b\3\2\2")
        buf.write("\2\u0082\u0361\3\2\2\2\u0084\u0363\3\2\2\2\u0086\u0366")
        buf.write("\3\2\2\2\u0088\u036f\3\2\2\2\u008a\u0371\3\2\2\2\u008c")
        buf.write("\u0373\3\2\2\2\u008e\u0386\3\2\2\2\u0090\u0395\3\2\2\2")
        buf.write("\u0092\u039a\3\2\2\2\u0094\u03ae\3\2\2\2\u0096\u03b0\3")
        buf.write("\2\2\2\u0098\u03b3\3\2\2\2\u009a\u03b6\3\2\2\2\u009c\u03b9")
        buf.write("\3\2\2\2\u009e\u03bf\3\2\2\2\u00a0\u03cd\3\2\2\2\u00a2")
        buf.write("\u03db\3\2\2\2\u00a4\u03e9\3\2\2\2\u00a6\u03eb\3\2\2\2")
        buf.write("\u00a8\u03fb\3\2\2\2\u00aa\u03fd\3\2\2\2\u00ac\u040a\3")
        buf.write("\2\2\2\u00ae\u040e\3\2\2\2\u00b0\u0415\3\2\2\2\u00b2\u0417")
        buf.write("\3\2\2\2\u00b4\u041b\3\2\2\2\u00b6\u0422\3\2\2\2\u00b8")
        buf.write("\u0426\3\2\2\2\u00ba\u042e\3\2\2\2\u00bc\u0432\3\2\2\2")
        buf.write("\u00be\u043f\3\2\2\2\u00c0\u044c\3\2\2\2\u00c2\u0450\3")
        buf.write("\2\2\2\u00c4\u0454\3\2\2\2\u00c6\u00c8\5\4\3\2\u00c7\u00c6")
        buf.write("\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00cc\3\2\2\2\u00c9")
        buf.write("\u00cb\5\6\4\2\u00ca\u00c9\3\2\2\2\u00cb\u00ce\3\2\2\2")
        buf.write("\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00d2\3")
        buf.write("\2\2\2\u00ce\u00cc\3\2\2\2\u00cf\u00d1\5\f\7\2\u00d0\u00cf")
        buf.write("\3\2\2\2\u00d1\u00d4\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d2")
        buf.write("\u00d3\3\2\2\2\u00d3\u00d5\3\2\2\2\u00d4\u00d2\3\2\2\2")
        buf.write("\u00d5\u00d6\7\2\2\3\u00d6\3\3\2\2\2\u00d7\u00d8\7\3\2")
        buf.write("\2\u00d8\u00d9\7\37\2\2\u00d9\u00db\7e\2\2\u00da\u00dc")
        buf.write("\7\62\2\2\u00db\u00da\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc")
        buf.write("\5\3\2\2\2\u00dd\u00de\7\36\2\2\u00de\u00e1\7*\2\2\u00df")
        buf.write("\u00e2\5\b\5\2\u00e0\u00e2\7\\\2\2\u00e1\u00df\3\2\2\2")
        buf.write("\u00e1\u00e0\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4\7")
        buf.write("+\2\2\u00e4\u00e5\7\25\2\2\u00e5\u00e6\7e\2\2\u00e6\u00e7")
        buf.write("\7\62\2\2\u00e7\7\3\2\2\2\u00e8\u00eb\7&\2\2\u00e9\u00ec")
        buf.write("\7\\\2\2\u00ea\u00ec\5\n\6\2\u00eb\u00e9\3\2\2\2\u00eb")
        buf.write("\u00ea\3\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00ee\7X\2\2")
        buf.write("\u00ee\u00f0\5\b\5\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3")
        buf.write("\2\2\2\u00f0\u0120\3\2\2\2\u00f1\u00f4\7$\2\2\u00f2\u00f5")
        buf.write("\7\\\2\2\u00f3\u00f5\5\n\6\2\u00f4\u00f2\3\2\2\2\u00f4")
        buf.write("\u00f3\3\2\2\2\u00f5\u00f8\3\2\2\2\u00f6\u00f7\7X\2\2")
        buf.write("\u00f7\u00f9\5\b\5\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9\3")
        buf.write("\2\2\2\u00f9\u0120\3\2\2\2\u00fa\u00fd\7%\2\2\u00fb\u00fe")
        buf.write("\7\\\2\2\u00fc\u00fe\5\n\6\2\u00fd\u00fb\3\2\2\2\u00fd")
        buf.write("\u00fc\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff\u0100\7X\2\2")
        buf.write("\u0100\u0102\5\b\5\2\u0101\u00ff\3\2\2\2\u0101\u0102\3")
        buf.write("\2\2\2\u0102\u0120\3\2\2\2\u0103\u0106\7'\2\2\u0104\u0107")
        buf.write("\7\\\2\2\u0105\u0107\5\n\6\2\u0106\u0104\3\2\2\2\u0106")
        buf.write("\u0105\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0109\7X\2\2")
        buf.write("\u0109\u010b\5\b\5\2\u010a\u0108\3\2\2\2\u010a\u010b\3")
        buf.write("\2\2\2\u010b\u0120\3\2\2\2\u010c\u010d\7V\2\2\u010d\u0110")
        buf.write("\7 \2\2\u010e\u0111\7\\\2\2\u010f\u0111\5\n\6\2\u0110")
        buf.write("\u010e\3\2\2\2\u0110\u010f\3\2\2\2\u0111\u0114\3\2\2\2")
        buf.write("\u0112\u0113\7X\2\2\u0113\u0115\5\b\5\2\u0114\u0112\3")
        buf.write("\2\2\2\u0114\u0115\3\2\2\2\u0115\u0120\3\2\2\2\u0116\u0119")
        buf.write("\7(\2\2\u0117\u011a\7\\\2\2\u0118\u011a\5\n\6\2\u0119")
        buf.write("\u0117\3\2\2\2\u0119\u0118\3\2\2\2\u011a\u011d\3\2\2\2")
        buf.write("\u011b\u011c\7X\2\2\u011c\u011e\5\b\5\2\u011d\u011b\3")
        buf.write("\2\2\2\u011d\u011e\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u00e8")
        buf.write("\3\2\2\2\u011f\u00f1\3\2\2\2\u011f\u00fa\3\2\2\2\u011f")
        buf.write("\u0103\3\2\2\2\u011f\u010c\3\2\2\2\u011f\u0116\3\2\2\2")
        buf.write("\u0120\t\3\2\2\2\u0121\u0127\7i\2\2\u0122\u0123\7*\2\2")
        buf.write("\u0123\u0124\58\35\2\u0124\u0125\7+\2\2\u0125\u0127\3")
        buf.write("\2\2\2\u0126\u0121\3\2\2\2\u0126\u0122\3\2\2\2\u0127\13")
        buf.write("\3\2\2\2\u0128\u012c\5\16\b\2\u0129\u012c\5\20\t\2\u012a")
        buf.write("\u012c\5\24\13\2\u012b\u0128\3\2\2\2\u012b\u0129\3\2\2")
        buf.write("\2\u012b\u012a\3\2\2\2\u012c\r\3\2\2\2\u012d\u012e\7V")
        buf.write("\2\2\u012e\u012f\7i\2\2\u012f\u0130\7\63\2\2\u0130\u0137")
        buf.write("\5b\62\2\u0131\u0132\7X\2\2\u0132\u0133\7i\2\2\u0133\u0134")
        buf.write("\7\63\2\2\u0134\u0136\5b\62\2\u0135\u0131\3\2\2\2\u0136")
        buf.write("\u0139\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138\u013a\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u013b\7")
        buf.write("\62\2\2\u013b\17\3\2\2\2\u013c\u013d\7\21\2\2\u013d\u0142")
        buf.write("\7i\2\2\u013e\u013f\7\37\2\2\u013f\u0141\7i\2\2\u0140")
        buf.write("\u013e\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0140\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\u0145\3\2\2\2\u0144\u0142\3")
        buf.write("\2\2\2\u0145\u0160\5\36\20\2\u0146\u0147\7,\2\2\u0147")
        buf.write("\u014c\7i\2\2\u0148\u0149\7\37\2\2\u0149\u014b\7i\2\2")
        buf.write("\u014a\u0148\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a\3")
        buf.write("\2\2\2\u014c\u014d\3\2\2\2\u014d\u014f\3\2\2\2\u014e\u014c")
        buf.write("\3\2\2\2\u014f\u0160\5\36\20\2\u0150\u0151\7\17\2\2\u0151")
        buf.write('\u0152\7i\2\2\u0152\u0160\5"\22\2\u0153\u0154\7\20\2')
        buf.write("\2\u0154\u0155\7i\2\2\u0155\u0160\5&\24\2\u0156\u0158")
        buf.write("\7.\2\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\u015a\7-\2\2\u015a\u015c\7i\2\2\u015b")
        buf.write("\u015d\5\26\f\2\u015c\u015b\3\2\2\2\u015c\u015d\3\2\2")
        buf.write("\2\u015d\u015e\3\2\2\2\u015e\u0160\5\22\n\2\u015f\u013c")
        buf.write("\3\2\2\2\u015f\u0146\3\2\2\2\u015f\u0150\3\2\2\2\u015f")
        buf.write("\u0153\3\2\2\2\u015f\u0157\3\2\2\2\u0160\21\3\2\2\2\u0161")
        buf.write("\u0165\7*\2\2\u0162\u0164\5 \21\2\u0163\u0162\3\2\2\2")
        buf.write("\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3")
        buf.write("\2\2\2\u0166\u0169\3\2\2\2\u0167\u0165\3\2\2\2\u0168\u016a")
        buf.write("\5\30\r\2\u0169\u0168\3\2\2\2\u0169\u016a\3\2\2\2\u016a")
        buf.write("\u016f\3\2\2\2\u016b\u016e\5@!\2\u016c\u016e\5\34\17\2")
        buf.write("\u016d\u016b\3\2\2\2\u016d\u016c\3\2\2\2\u016e\u0171\3")
        buf.write("\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0173")
        buf.write("\3\2\2\2\u0171\u016f\3\2\2\2\u0172\u0174\5\32\16\2\u0173")
        buf.write("\u0172\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0175\3\2\2\2")
        buf.write("\u0175\u0176\7+\2\2\u0176\23\3\2\2\2\u0177\u0179\7\60")
        buf.write("\2\2\u0178\u017a\7i\2\2\u0179\u0178\3\2\2\2\u0179\u017a")
        buf.write("\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c\7e\2\2\u017c")
        buf.write("\u0180\7\25\2\2\u017d\u0181\5\u009aN\2\u017e\u017f\7\20")
        buf.write("\2\2\u017f\u0181\5&\24\2\u0180\u017d\3\2\2\2\u0180\u017e")
        buf.write("\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u018d\7@\2\2\u0183")
        buf.write("\u0185\5\u0098M\2\u0184\u0186\5\u00bc_\2\u0185\u0184\3")
        buf.write("\2\2\2\u0185\u0186\3\2\2\2\u0186\u0189\3\2\2\2\u0187\u018a")
        buf.write("\5<\37\2\u0188\u018a\7\62\2\2\u0189\u0187\3\2\2\2\u0189")
        buf.write("\u0188\3\2\2\2\u018a\u018e\3\2\2\2\u018b\u018c\7-\2\2")
        buf.write("\u018c\u018e\5\22\n\2\u018d\u0183\3\2\2\2\u018d\u018b")
        buf.write("\3\2\2\2\u018e\25\3\2\2\2\u018f\u0190\7\37\2\2\u0190\u0191")
        buf.write("\58\35\2\u0191\27\3\2\2\2\u0192\u0193\7\25\2\2\u0193\u0194")
        buf.write("\7\26\2\2\u0194\u0195\5<\37\2\u0195\31\3\2\2\2\u0196\u0197")
        buf.write("\7\25\2\2\u0197\u0198\7\27\2\2\u0198\u0199\5<\37\2\u0199")
        buf.write("\33\3\2\2\2\u019a\u019b\7\25\2\2\u019b\u019c\7\35\2\2")
        buf.write("\u019c\u019d\5<\37\2\u019d\35\3\2\2\2\u019e\u01a2\7*\2")
        buf.write("\2\u019f\u01a1\5 \21\2\u01a0\u019f\3\2\2\2\u01a1\u01a4")
        buf.write("\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3")
        buf.write("\u01a5\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a5\u01aa\7+\2\2")
        buf.write("\u01a6\u01a7\7\37\2\2\u01a7\u01aa\5 \21\2\u01a8\u01aa")
        buf.write("\7\62\2\2\u01a9\u019e\3\2\2\2\u01a9\u01a6\3\2\2\2\u01a9")
        buf.write("\u01a8\3\2\2\2\u01aa\37\3\2\2\2\u01ab\u01ae\5,\27\2\u01ac")
        buf.write("\u01ae\5\60\31\2\u01ad\u01ab\3\2\2\2\u01ad\u01ac\3\2\2")
        buf.write("\2\u01ae!\3\2\2\2\u01af\u01b3\7*\2\2\u01b0\u01b2\5,\27")
        buf.write("\2\u01b1\u01b0\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b1")
        buf.write("\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b6\3\2\2\2\u01b5")
        buf.write("\u01b3\3\2\2\2\u01b6\u01bb\7+\2\2\u01b7\u01b8\7\37\2\2")
        buf.write("\u01b8\u01bb\5,\27\2\u01b9\u01bb\7\62\2\2\u01ba\u01af")
        buf.write("\3\2\2\2\u01ba\u01b7\3\2\2\2\u01ba\u01b9\3\2\2\2\u01bb")
        buf.write("#\3\2\2\2\u01bc\u01be\5\60\31\2\u01bd\u01bc\3\2\2\2\u01be")
        buf.write("\u01c1\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2")
        buf.write("\u01c0%\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c3\5(\25")
        buf.write("\2\u01c3'\3\2\2\2\u01c4\u01c5\7*\2\2\u01c5\u01c6\5*\26")
        buf.write("\2\u01c6\u01c7\5$\23\2\u01c7\u01c8\7\24\2\2\u01c8\u01c9")
        buf.write("\5<\37\2\u01c9\u01ca\7+\2\2\u01ca\u01d3\3\2\2\2\u01cb")
        buf.write("\u01cc\7\37\2\2\u01cc\u01cd\5*\26\2\u01cd\u01ce\5$\23")
        buf.write("\2\u01ce\u01cf\7\24\2\2\u01cf\u01d0\5<\37\2\u01d0\u01d1")
        buf.write("\7\62\2\2\u01d1\u01d3\3\2\2\2\u01d2\u01c4\3\2\2\2\u01d2")
        buf.write("\u01cb\3\2\2\2\u01d3)\3\2\2\2\u01d4\u01d5\7U\2\2\u01d5")
        buf.write("\u01d6\7T\2\2\u01d6\u01d7\7i\2\2\u01d7\u01d8\7\62\2\2")
        buf.write("\u01d8+\3\2\2\2\u01d9\u01da\7U\2\2\u01da\u01df\5.\30\2")
        buf.write("\u01db\u01dc\7X\2\2\u01dc\u01de\5.\30\2\u01dd\u01db\3")
        buf.write("\2\2\2\u01de\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01e0")
        buf.write("\3\2\2\2\u01e0\u01e2\3\2\2\2\u01e1\u01df\3\2\2\2\u01e2")
        buf.write("\u01e3\7\62\2\2\u01e3-\3\2\2\2\u01e4\u01e6\7W\2\2\u01e5")
        buf.write("\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e8\3\2\2\2")
        buf.write("\u01e7\u01e9\7T\2\2\u01e8\u01e7\3\2\2\2\u01e8\u01e9\3")
        buf.write("\2\2\2\u01e9\u01ee\3\2\2\2\u01ea\u01ef\7i\2\2\u01eb\u01ec")
        buf.write("\7i\2\2\u01ec\u01ed\7\63\2\2\u01ed\u01ef\5b\62\2\u01ee")
        buf.write("\u01ea\3\2\2\2\u01ee\u01eb\3\2\2\2\u01ef/\3\2\2\2\u01f0")
        buf.write("\u01f1\7Y\2\2\u01f1\u01f5\5\66\34\2\u01f2\u01f3\5\64\33")
        buf.write("\2\u01f3\u01f4\5\62\32\2\u01f4\u01f6\3\2\2\2\u01f5\u01f2")
        buf.write("\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u0200\3\2\2\2\u01f7")
        buf.write("\u01f8\7X\2\2\u01f8\u01fc\5\66\34\2\u01f9\u01fa\5\64\33")
        buf.write("\2\u01fa\u01fb\5\62\32\2\u01fb\u01fd\3\2\2\2\u01fc\u01f9")
        buf.write("\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01ff\3\2\2\2\u01fe")
        buf.write("\u01f7\3\2\2\2\u01ff\u0202\3\2\2\2\u0200\u01fe\3\2\2\2")
        buf.write("\u0200\u0201\3\2\2\2\u0201\u0203\3\2\2\2\u0202\u0200\3")
        buf.write("\2\2\2\u0203\u0204\7\62\2\2\u0204\u020c\3\2\2\2\u0205")
        buf.write("\u0206\7Y\2\2\u0206\u0208\7i\2\2\u0207\u0209\5\62\32\2")
        buf.write("\u0208\u0207\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u020a\3")
        buf.write("\2\2\2\u020a\u020c\5<\37\2\u020b\u01f0\3\2\2\2\u020b\u0205")
        buf.write("\3\2\2\2\u020c\61\3\2\2\2\u020d\u020f\7\25\2\2\u020e\u0210")
        buf.write("\58\35\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2\2\u0210")
        buf.write("\u0211\3\2\2\2\u0211\u0212\t\2\2\2\u0212\63\3\2\2\2\u0213")
        buf.write("\u0215\7 \2\2\u0214\u0216\5:\36\2\u0215\u0214\3\2\2\2")
        buf.write("\u0215\u0216\3\2\2\2\u0216\u021a\3\2\2\2\u0217\u021b\7")
        buf.write(" \2\2\u0218\u0219\7)\2\2\u0219\u021b\5b\62\2\u021a\u0217")
        buf.write("\3\2\2\2\u021a\u0218\3\2\2\2\u021b\65\3\2\2\2\u021c\u021d")
        buf.write("\7i\2\2\u021d\u021e\7K\2\2\u021e\u021f\7i\2\2\u021f\67")
        buf.write("\3\2\2\2\u0220\u0225\7i\2\2\u0221\u0222\7X\2\2\u0222\u0224")
        buf.write("\7i\2\2\u0223\u0221\3\2\2\2\u0224\u0227\3\2\2\2\u0225")
        buf.write("\u0223\3\2\2\2\u0225\u0226\3\2\2\2\u02269\3\2\2\2\u0227")
        buf.write("\u0225\3\2\2\2\u0228\u022d\5b\62\2\u0229\u022a\7X\2\2")
        buf.write("\u022a\u022c\5b\62\2\u022b\u0229\3\2\2\2\u022c\u022f\3")
        buf.write("\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e;")
        buf.write("\3\2\2\2\u022f\u022d\3\2\2\2\u0230\u0234\7*\2\2\u0231")
        buf.write("\u0233\5@!\2\u0232\u0231\3\2\2\2\u0233\u0236\3\2\2\2\u0234")
        buf.write("\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0237\3\2\2\2")
        buf.write("\u0236\u0234\3\2\2\2\u0237\u023b\7+\2\2\u0238\u0239\7")
        buf.write("\37\2\2\u0239\u023b\5@!\2\u023a\u0230\3\2\2\2\u023a\u0238")
        buf.write("\3\2\2\2\u023b=\3\2\2\2\u023c\u023d\58\35\2\u023d\u023e")
        buf.write("\5<\37\2\u023e?\3\2\2\2\u023f\u0252\5<\37\2\u0240\u0252")
        buf.write("\5> \2\u0241\u0242\5b\62\2\u0242\u0243\7\62\2\2\u0243")
        buf.write('\u0252\3\2\2\2\u0244\u0252\5B"\2\u0245\u0252\5D#\2\u0246')
        buf.write("\u0252\5L'\2\u0247\u0252\5N(\2\u0248\u0249\5R*\2\u0249")
        buf.write("\u024a\7\62\2\2\u024a\u0252\3\2\2\2\u024b\u024c\5P)\2")
        buf.write("\u024c\u024d\7\62\2\2\u024d\u0252\3\2\2\2\u024e\u0252")
        buf.write("\5T+\2\u024f\u0252\5V,\2\u0250\u0252\5X-\2\u0251\u023f")
        buf.write("\3\2\2\2\u0251\u0240\3\2\2\2\u0251\u0241\3\2\2\2\u0251")
        buf.write("\u0244\3\2\2\2\u0251\u0245\3\2\2\2\u0251\u0246\3\2\2\2")
        buf.write("\u0251\u0247\3\2\2\2\u0251\u0248\3\2\2\2\u0251\u024b\3")
        buf.write("\2\2\2\u0251\u024e\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0250")
        buf.write("\3\2\2\2\u0252A\3\2\2\2\u0253\u0254\7;\2\2\u0254\u0255")
        buf.write("\5b\62\2\u0255\u0259\5<\37\2\u0256\u0258\5H%\2\u0257\u0256")
        buf.write("\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257\3\2\2\2\u0259")
        buf.write("\u025a\3\2\2\2\u025a\u025d\3\2\2\2\u025b\u0259\3\2\2\2")
        buf.write("\u025c\u025e\5J&\2\u025d\u025c\3\2\2\2\u025d\u025e\3\2")
        buf.write("\2\2\u025eC\3\2\2\2\u025f\u0260\7I\2\2\u0260\u0262\5<")
        buf.write("\37\2\u0261\u0263\5F$\2\u0262\u0261\3\2\2\2\u0262\u0263")
        buf.write("\3\2\2\2\u0263E\3\2\2\2\u0264\u0268\7=\2\2\u0265\u0266")
        buf.write("\7`\2\2\u0266\u0267\7i\2\2\u0267\u0269\7a\2\2\u0268\u0265")
        buf.write("\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026a\3\2\2\2\u026a")
        buf.write("\u0272\5<\37\2\u026b\u026e\7=\2\2\u026c\u026d\7\25\2\2")
        buf.write("\u026d\u026f\7i\2\2\u026e\u026c\3\2\2\2\u026e\u026f\3")
        buf.write("\2\2\2\u026f\u0270\3\2\2\2\u0270\u0272\5<\37\2\u0271\u0264")
        buf.write("\3\2\2\2\u0271\u026b\3\2\2\2\u0272G\3\2\2\2\u0273\u0274")
        buf.write("\7<\2\2\u0274\u0275\5b\62\2\u0275\u0276\5<\37\2\u0276")
        buf.write("I\3\2\2\2\u0277\u0278\7=\2\2\u0278\u0279\5<\37\2\u0279")
        buf.write("K\3\2\2\2\u027a\u027b\7>\2\2\u027b\u027c\5b\62\2\u027c")
        buf.write("\u027d\7?\2\2\u027d\u027e\5b\62\2\u027e\u027f\7@\2\2\u027f")
        buf.write("\u0280\5b\62\2\u0280\u0281\5<\37\2\u0281\u028d\3\2\2\2")
        buf.write("\u0282\u0283\7>\2\2\u0283\u0286\7i\2\2\u0284\u0285\7X")
        buf.write("\2\2\u0285\u0287\7i\2\2\u0286\u0284\3\2\2\2\u0286\u0287")
        buf.write("\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u0289\7S\2\2\u0289")
        buf.write("\u028a\5b\62\2\u028a\u028b\5<\37\2\u028b\u028d\3\2\2\2")
        buf.write("\u028c\u027a\3\2\2\2\u028c\u0282\3\2\2\2\u028dM\3\2\2")
        buf.write("\2\u028e\u028f\7A\2\2\u028f\u0290\5b\62\2\u0290\u0291")
        buf.write("\5<\37\2\u0291O\3\2\2\2\u0292\u0293\t\3\2\2\u0293Q\3\2")
        buf.write("\2\2\u0294\u0295\7\61\2\2\u0295\u0296\5b\62\2\u0296S\3")
        buf.write("\2\2\2\u0297\u0298\7H\2\2\u0298\u0299\5b\62\2\u0299\u029a")
        buf.write("\7\62\2\2\u029aU\3\2\2\2\u029b\u029c\7G\2\2\u029c\u029d")
        buf.write("\5b\62\2\u029d\u029e\7\62\2\2\u029e\u02a7\3\2\2\2\u029f")
        buf.write("\u02a0\7G\2\2\u02a0\u02a1\7\37\2\2\u02a1\u02a2\7i\2\2")
        buf.write("\u02a2\u02a3\7\63\2\2\u02a3\u02a4\5b\62\2\u02a4\u02a5")
        buf.write("\7\62\2\2\u02a5\u02a7\3\2\2\2\u02a6\u029b\3\2\2\2\u02a6")
        buf.write("\u029f\3\2\2\2\u02a7W\3\2\2\2\u02a8\u02ad\5Z.\2\u02a9")
        buf.write("\u02ad\5\\/\2\u02aa\u02ad\5^\60\2\u02ab\u02ad\5`\61\2")
        buf.write("\u02ac\u02a8\3\2\2\2\u02ac\u02a9\3\2\2\2\u02ac\u02aa\3")
        buf.write("\2\2\2\u02ac\u02ab\3\2\2\2\u02adY\3\2\2\2\u02ae\u02af")
        buf.write("\7\22\2\2\u02af\u02b0\5b\62\2\u02b0\u02b1\7\62\2\2\u02b1")
        buf.write("[\3\2\2\2\u02b2\u02b5\7\23\2\2\u02b3\u02b4\7\37\2\2\u02b4")
        buf.write("\u02b6\7i\2\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2")
        buf.write("\u02b6\u02b7\3\2\2\2\u02b7\u02ba\5b\62\2\u02b8\u02bb\7")
        buf.write("\62\2\2\u02b9\u02bb\5J&\2\u02ba\u02b8\3\2\2\2\u02ba\u02b9")
        buf.write("\3\2\2\2\u02bb]\3\2\2\2\u02bc\u02bf\7D\2\2\u02bd\u02c0")
        buf.write("\5V,\2\u02be\u02c0\7\62\2\2\u02bf\u02bd\3\2\2\2\u02bf")
        buf.write("\u02be\3\2\2\2\u02c0_\3\2\2\2\u02c1\u02c6\7E\2\2\u02c2")
        buf.write("\u02c7\5V,\2\u02c3\u02c7\5^\60\2\u02c4\u02c7\5\\/\2\u02c5")
        buf.write("\u02c7\7\62\2\2\u02c6\u02c2\3\2\2\2\u02c6\u02c3\3\2\2")
        buf.write("\2\u02c6\u02c4\3\2\2\2\u02c6\u02c5\3\2\2\2\u02c7a\3\2")
        buf.write("\2\2\u02c8\u02cc\5j\66\2\u02c9\u02cd\5d\63\2\u02ca\u02cd")
        buf.write("\5f\64\2\u02cb\u02cd\5h\65\2\u02cc\u02c9\3\2\2\2\u02cc")
        buf.write("\u02ca\3\2\2\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd\3\2\2\2")
        buf.write("\u02cdc\3\2\2\2\u02ce\u02cf\7\63\2\2\u02cf\u02d0\5b\62")
        buf.write("\2\u02d0e\3\2\2\2\u02d1\u02d2\78\2\2\u02d2\u02d3\5b\62")
        buf.write("\2\u02d3g\3\2\2\2\u02d4\u02d5\t\4\2\2\u02d5\u02d6\5b\62")
        buf.write("\2\u02d6i\3\2\2\2\u02d7\u02de\5l\67\2\u02d8\u02da\7L\2")
        buf.write("\2\u02d9\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db")
        buf.write("\3\2\2\2\u02db\u02dc\5\u009eP\2\u02dc\u02dd\5b\62\2\u02dd")
        buf.write("\u02df\3\2\2\2\u02de\u02d9\3\2\2\2\u02de\u02df\3\2\2\2")
        buf.write("\u02dfk\3\2\2\2\u02e0\u02e5\5n8\2\u02e1\u02e2\t\5\2\2")
        buf.write("\u02e2\u02e4\5n8\2\u02e3\u02e1\3\2\2\2\u02e4\u02e7\3\2")
        buf.write("\2\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6m\3")
        buf.write("\2\2\2\u02e7\u02e5\3\2\2\2\u02e8\u02e9\7L\2\2\u02e9\u02f4")
        buf.write("\5n8\2\u02ea\u02f0\5t;\2\u02eb\u02ec\5p9\2\u02ec\u02ed")
        buf.write("\5t;\2\u02ed\u02ef\3\2\2\2\u02ee\u02eb\3\2\2\2\u02ef\u02f2")
        buf.write("\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1")
        buf.write("\u02f4\3\2\2\2\u02f2\u02f0\3\2\2\2\u02f3\u02e8\3\2\2\2")
        buf.write("\u02f3\u02ea\3\2\2\2\u02f4o\3\2\2\2\u02f5\u02fe\7M\2\2")
        buf.write("\u02f6\u02fe\7N\2\2\u02f7\u02fe\7O\2\2\u02f8\u02fe\7P")
        buf.write("\2\2\u02f9\u02fe\7Q\2\2\u02fa\u02fe\7R\2\2\u02fb\u02fe")
        buf.write("\7S\2\2\u02fc\u02fe\5r:\2\u02fd\u02f5\3\2\2\2\u02fd\u02f6")
        buf.write("\3\2\2\2\u02fd\u02f7\3\2\2\2\u02fd\u02f8\3\2\2\2\u02fd")
        buf.write("\u02f9\3\2\2\2\u02fd\u02fa\3\2\2\2\u02fd\u02fb\3\2\2\2")
        buf.write("\u02fd\u02fc\3\2\2\2\u02feq\3\2\2\2\u02ff\u0300\7L\2\2")
        buf.write("\u0300\u0301\7S\2\2\u0301s\3\2\2\2\u0302\u0307\5v<\2\u0303")
        buf.write("\u0304\t\6\2\2\u0304\u0306\5v<\2\u0305\u0303\3\2\2\2\u0306")
        buf.write("\u0309\3\2\2\2\u0307\u0305\3\2\2\2\u0307\u0308\3\2\2\2")
        buf.write("\u0308u\3\2\2\2\u0309\u0307\3\2\2\2\u030a\u030f\5x=\2")
        buf.write("\u030b\u030c\t\7\2\2\u030c\u030e\5x=\2\u030d\u030b\3\2")
        buf.write("\2\2\u030e\u0311\3\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310")
        buf.write("\3\2\2\2\u0310w\3\2\2\2\u0311\u030f\3\2\2\2\u0312\u0313")
        buf.write("\t\6\2\2\u0313\u0316\5x=\2\u0314\u0316\5z>\2\u0315\u0312")
        buf.write("\3\2\2\2\u0315\u0314\3\2\2\2\u0316y\3\2\2\2\u0317\u031c")
        buf.write("\5~@\2\u0318\u0319\7_\2\2\u0319\u031b\5x=\2\u031a\u0318")
        buf.write("\3\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3\2\2\2\u031c")
        buf.write("\u031d\3\2\2\2\u031d{\3\2\2\2\u031e\u031c\3\2\2\2\u031f")
        buf.write("\u0320\7V\2\2\u0320\u0323\7K\2\2\u0321\u0324\5\u008cG")
        buf.write("\2\u0322\u0324\7i\2\2\u0323\u0321\3\2\2\2\u0323\u0322")
        buf.write("\3\2\2\2\u0324}\3\2\2\2\u0325\u0326\b@\1\2\u0326\u0340")
        buf.write("\7g\2\2\u0327\u0340\7d\2\2\u0328\u0340\7e\2\2\u0329\u0340")
        buf.write("\7f\2\2\u032a\u0340\7h\2\2\u032b\u0340\7i\2\2\u032c\u0340")
        buf.write("\5|?\2\u032d\u0340\5\u0094K\2\u032e\u0340\5\u00a6T\2\u032f")
        buf.write("\u0340\5\u00aaV\2\u0330\u0331\7`\2\2\u0331\u0332\5b\62")
        buf.write("\2\u0332\u0333\7a\2\2\u0333\u0340\3\2\2\2\u0334\u0335")
        buf.write("\5\u0082B\2\u0335\u0337\7i\2\2\u0336\u0338\5\u00bc_\2")
        buf.write("\u0337\u0336\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0340\3")
        buf.write("\2\2\2\u0339\u033a\7/\2\2\u033a\u0340\5~@\7\u033b\u0340")
        buf.write("\5\u00aeX\2\u033c\u0340\5\u0084C\2\u033d\u0340\5\u0086")
        buf.write("D\2\u033e\u0340\5\u00c4c\2\u033f\u0325\3\2\2\2\u033f\u0327")
        buf.write("\3\2\2\2\u033f\u0328\3\2\2\2\u033f\u0329\3\2\2\2\u033f")
        buf.write("\u032a\3\2\2\2\u033f\u032b\3\2\2\2\u033f\u032c\3\2\2\2")
        buf.write("\u033f\u032d\3\2\2\2\u033f\u032e\3\2\2\2\u033f\u032f\3")
        buf.write("\2\2\2\u033f\u0330\3\2\2\2\u033f\u0334\3\2\2\2\u033f\u0339")
        buf.write("\3\2\2\2\u033f\u033b\3\2\2\2\u033f\u033c\3\2\2\2\u033f")
        buf.write("\u033d\3\2\2\2\u033f\u033e\3\2\2\2\u0340\u0349\3\2\2\2")
        buf.write("\u0341\u0343\f\b\2\2\u0342\u0344\5\u0080A\2\u0343\u0342")
        buf.write("\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0343\3\2\2\2\u0345")
        buf.write("\u0346\3\2\2\2\u0346\u0348\3\2\2\2\u0347\u0341\3\2\2\2")
        buf.write("\u0348\u034b\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a\3")
        buf.write("\2\2\2\u034a\177\3\2\2\2\u034b\u0349\3\2\2\2\u034c\u034d")
        buf.write("\7K\2\2\u034d\u035c\5\u0088E\2\u034e\u034f\7K\2\2\u034f")
        buf.write("\u035c\7i\2\2\u0350\u035c\5\u00a8U\2\u0351\u0353\7`\2")
        buf.write("\2\u0352\u0354\5:\36\2\u0353\u0352\3\2\2\2\u0353\u0354")
        buf.write("\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u035c\7a\2\2\u0356")
        buf.write("\u0357\5\u0082B\2\u0357\u0359\7i\2\2\u0358\u035a\5\u00bc")
        buf.write("_\2\u0359\u0358\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c")
        buf.write("\3\2\2\2\u035b\u034c\3\2\2\2\u035b\u034e\3\2\2\2\u035b")
        buf.write("\u0350\3\2\2\2\u035b\u0351\3\2\2\2\u035b\u0356\3\2\2\2")
        buf.write("\u035c\u0081\3\2\2\2\u035d\u0362\7 \2\2\u035e\u035f\7")
        buf.write(" \2\2\u035f\u0360\7i\2\2\u0360\u0362\7\37\2\2\u0361\u035d")
        buf.write("\3\2\2\2\u0361\u035e\3\2\2\2\u0362\u0083\3\2\2\2\u0363")
        buf.write("\u0364\7J\2\2\u0364\u0365\5~@\2\u0365\u0085\3\2\2\2\u0366")
        buf.write("\u0367\7\\\2\2\u0367\u0368\5~@\2\u0368\u0087\3\2\2\2\u0369")
        buf.write("\u0370\3\2\2\2\u036a\u0370\5\u0092J\2\u036b\u0370\5\u008e")
        buf.write("H\2\u036c\u0370\5\u0090I\2\u036d\u0370\5\u008cG\2\u036e")
        buf.write("\u0370\5\u008aF\2\u036f\u0369\3\2\2\2\u036f\u036a\3\2")
        buf.write("\2\2\u036f\u036b\3\2\2\2\u036f\u036c\3\2\2\2\u036f\u036d")
        buf.write("\3\2\2\2\u036f\u036e\3\2\2\2\u0370\u0089\3\2\2\2\u0371")
        buf.write("\u0372\5\u00c4c\2\u0372\u008b\3\2\2\2\u0373\u0374\t\b")
        buf.write("\2\2\u0374\u008d\3\2\2\2\u0375\u0387\7\31\2\2\u0376\u0377")
        buf.write("\7*\2\2\u0377\u0378\58\35\2\u0378\u0379\7+\2\2\u0379\u0387")
        buf.write("\3\2\2\2\u037a\u037b\7\r\2\2\u037b\u037e\7 \2\2\u037c")
        buf.write("\u037e\7#\2\2\u037d\u037a\3\2\2\2\u037d\u037c\3\2\2\2")
        buf.write("\u037e\u037f\3\2\2\2\u037f\u0384\t\t\2\2\u0380\u0381\7")
        buf.write("`\2\2\u0381\u0382\5:\36\2\u0382\u0383\7a\2\2\u0383\u0385")
        buf.write("\3\2\2\2\u0384\u0380\3\2\2\2\u0384\u0385\3\2\2\2\u0385")
        buf.write("\u0387\3\2\2\2\u0386\u0375\3\2\2\2\u0386\u0376\3\2\2\2")
        buf.write("\u0386\u037d\3\2\2\2\u0387\u008f\3\2\2\2\u0388\u0396\7")
        buf.write("\30\2\2\u0389\u038a\7\f\2\2\u038a\u038d\7 \2\2\u038b\u038d")
        buf.write('\7"\2\2\u038c\u0389\3\2\2\2\u038c\u038b\3\2\2\2\u038d')
        buf.write("\u038e\3\2\2\2\u038e\u0393\7i\2\2\u038f\u0390\7`\2\2\u0390")
        buf.write("\u0391\5:\36\2\u0391\u0392\7a\2\2\u0392\u0394\3\2\2\2")
        buf.write("\u0393\u038f\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0396\3")
        buf.write("\2\2\2\u0395\u0388\3\2\2\2\u0395\u038c\3\2\2\2\u0396\u0091")
        buf.write("\3\2\2\2\u0397\u0398\7\t\2\2\u0398\u039b\7 \2\2\u0399")
        buf.write("\u039b\7!\2\2\u039a\u0397\3\2\2\2\u039a\u0399\3\2\2\2")
        buf.write("\u039b\u039c\3\2\2\2\u039c\u03a1\7i\2\2\u039d\u039e\7")
        buf.write("`\2\2\u039e\u039f\5:\36\2\u039f\u03a0\7a\2\2\u03a0\u03a2")
        buf.write("\3\2\2\2\u03a1\u039d\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2")
        buf.write("\u0093\3\2\2\2\u03a3\u03a5\5\u0096L\2\u03a4\u03a6\5\u00be")
        buf.write("`\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03af")
        buf.write("\3\2\2\2\u03a7\u03ac\5\u009eP\2\u03a8\u03aa\5\u0096L\2")
        buf.write("\u03a9\u03ab\5\u00be`\2\u03aa\u03a9\3\2\2\2\u03aa\u03ab")
        buf.write("\3\2\2\2\u03ab\u03ad\3\2\2\2\u03ac\u03a8\3\2\2\2\u03ac")
        buf.write("\u03ad\3\2\2\2\u03ad\u03af\3\2\2\2\u03ae\u03a3\3\2\2\2")
        buf.write("\u03ae\u03a7\3\2\2\2\u03af\u0095\3\2\2\2\u03b0\u03b1\7")
        buf.write("$\2\2\u03b1\u03b2\7i\2\2\u03b2\u0097\3\2\2\2\u03b3\u03b4")
        buf.write("\7&\2\2\u03b4\u03b5\7i\2\2\u03b5\u0099\3\2\2\2\u03b6\u03b7")
        buf.write("\7'\2\2\u03b7\u03b8\7i\2\2\u03b8\u009b\3\2\2\2\u03b9")
        buf.write("\u03ba\7(\2\2\u03ba\u03bb\7i\2\2\u03bb\u009d\3\2\2\2\u03bc")
        buf.write("\u03c0\5\u00a0Q\2\u03bd\u03c0\5\u00a2R\2\u03be\u03c0\5")
        buf.write("\u00a4S\2\u03bf\u03bc\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf")
        buf.write("\u03be\3\2\2\2\u03c0\u009f\3\2\2\2\u03c1\u03ce\7\4\2\2")
        buf.write("\u03c2\u03ca\7[\2\2\u03c3\u03c4\7b\2\2\u03c4\u03c7\7i")
        buf.write("\2\2\u03c5\u03c8\5\u00bc_\2\u03c6\u03c8\5\u00be`\2\u03c7")
        buf.write("\u03c5\3\2\2\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2")
        buf.write("\u03c8\u03c9\3\2\2\2\u03c9\u03cb\7c\2\2\u03ca\u03c3\3")
        buf.write("\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03ce")
        buf.write("\7\5\2\2\u03cd\u03c1\3\2\2\2\u03cd\u03c2\3\2\2\2\u03ce")
        buf.write("\u00a1\3\2\2\2\u03cf\u03dc\7\6\2\2\u03d0\u03d8\7\7\2\2")
        buf.write("\u03d1\u03d2\7b\2\2\u03d2\u03d5\7i\2\2\u03d3\u03d6\5\u00bc")
        buf.write("_\2\u03d4\u03d6\5\u00be`\2\u03d5\u03d3\3\2\2\2\u03d5\u03d4")
        buf.write("\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7")
        buf.write("\u03d9\7c\2\2\u03d8\u03d1\3\2\2\2\u03d8\u03d9\3\2\2\2")
        buf.write("\u03d9\u03da\3\2\2\2\u03da\u03dc\7[\2\2\u03db\u03cf\3")
        buf.write("\2\2\2\u03db\u03d0\3\2\2\2\u03dc\u00a3\3\2\2\2\u03dd\u03ea")
        buf.write("\7\b\2\2\u03de\u03e6\7\7\2\2\u03df\u03e0\7b\2\2\u03e0")
        buf.write("\u03e3\7i\2\2\u03e1\u03e4\5\u00bc_\2\u03e2\u03e4\5\u00be")
        buf.write("`\2\u03e3\u03e1\3\2\2\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4")
        buf.write("\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7\7c\2\2\u03e6")
        buf.write("\u03df\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e8\3\2\2\2")
        buf.write("\u03e8\u03ea\7\5\2\2\u03e9\u03dd\3\2\2\2\u03e9\u03de\3")
        buf.write("\2\2\2\u03ea\u00a5\3\2\2\2\u03eb\u03ed\7b\2\2\u03ec\u03ee")
        buf.write("\5:\36\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee")
        buf.write("\u03ef\3\2\2\2\u03ef\u03f0\7c\2\2\u03f0\u00a7\3\2\2\2")
        buf.write("\u03f1\u03f2\7b\2\2\u03f2\u03f3\5b\62\2\u03f3\u03f4\7")
        buf.write("c\2\2\u03f4\u03fc\3\2\2\2\u03f5\u03f6\7b\2\2\u03f6\u03f7")
        buf.write("\5b\62\2\u03f7\u03f8\7\37\2\2\u03f8\u03f9\5b\62\2\u03f9")
        buf.write("\u03fa\7c\2\2\u03fa\u03fc\3\2\2\2\u03fb\u03f1\3\2\2\2")
        buf.write("\u03fb\u03f5\3\2\2\2\u03fc\u00a9\3\2\2\2\u03fd\u0406\7")
        buf.write("*\2\2\u03fe\u0403\5\u00acW\2\u03ff\u0400\7X\2\2\u0400")
        buf.write("\u0402\5\u00acW\2\u0401\u03ff\3\2\2\2\u0402\u0405\3\2")
        buf.write("\2\2\u0403\u0401\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0407")
        buf.write("\3\2\2\2\u0405\u0403\3\2\2\2\u0406\u03fe\3\2\2\2\u0406")
        buf.write("\u0407\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409\7+\2\2")
        buf.write("\u0409\u00ab\3\2\2\2\u040a\u040b\5b\62\2\u040b\u040c\7")
        buf.write("\37\2\2\u040c\u040d\5b\62\2\u040d\u00ad\3\2\2\2\u040e")
        buf.write("\u040f\7\24\2\2\u040f\u0410\5\u00b0Y\2\u0410\u00af\3\2")
        buf.write("\2\2\u0411\u0416\5\u00b4[\2\u0412\u0416\5\u00b8]\2\u0413")
        buf.write("\u0416\5\u00b6\\\2\u0414\u0416\5\u00ba^\2\u0415\u0411")
        buf.write("\3\2\2\2\u0415\u0412\3\2\2\2\u0415\u0413\3\2\2\2\u0415")
        buf.write("\u0414\3\2\2\2\u0416\u00b1\3\2\2\2\u0417\u0418\5b\62\2")
        buf.write("\u0418\u0419\5\u009eP\2\u0419\u00b3\3\2\2\2\u041a\u041c")
        buf.write("\5\u00b2Z\2\u041b\u041a\3\2\2\2\u041b\u041c\3\2\2\2\u041c")
        buf.write("\u041d\3\2\2\2\u041d\u041f\5\u0096L\2\u041e\u0420\5\u00bc")
        buf.write("_\2\u041f\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u00b5")
        buf.write("\3\2\2\2\u0421\u0423\5\u00b2Z\2\u0422\u0421\3\2\2\2\u0422")
        buf.write("\u0423\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\5\u009a")
        buf.write("N\2\u0425\u00b7\3\2\2\2\u0426\u0428\5b\62\2\u0427\u0429")
        buf.write("\7/\2\2\u0428\u0427\3\2\2\2\u0428\u0429\3\2\2\2\u0429")
        buf.write("\u042a\3\2\2\2\u042a\u042c\5\u0098M\2\u042b\u042d\5\u00bc")
        buf.write("_\2\u042c\u042b\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u00b9")
        buf.write("\3\2\2\2\u042e\u0430\5\u009cO\2\u042f\u0431\5\u00bc_\2")
        buf.write("\u0430\u042f\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u00bb\3")
        buf.write("\2\2\2\u0432\u043b\7`\2\2\u0433\u0438\5\u00c0a\2\u0434")
        buf.write("\u0435\7X\2\2\u0435\u0437\5\u00c0a\2\u0436\u0434\3\2\2")
        buf.write("\2\u0437\u043a\3\2\2\2\u0438\u0436\3\2\2\2\u0438\u0439")
        buf.write("\3\2\2\2\u0439\u043c\3\2\2\2\u043a\u0438\3\2\2\2\u043b")
        buf.write("\u0433\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043d\u043e\7a\2\2\u043e\u00bd\3\2\2\2\u043f\u0448\7")
        buf.write("`\2\2\u0440\u0445\5\u00c2b\2\u0441\u0442\7X\2\2\u0442")
        buf.write("\u0444\5\u00c2b\2\u0443\u0441\3\2\2\2\u0444\u0447\3\2")
        buf.write("\2\2\u0445\u0443\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0449")
        buf.write("\3\2\2\2\u0447\u0445\3\2\2\2\u0448\u0440\3\2\2\2\u0448")
        buf.write("\u0449\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044b\7a\2\2")
        buf.write("\u044b\u00bf\3\2\2\2\u044c\u044d\7i\2\2\u044d\u044e\7")
        buf.write("\63\2\2\u044e\u044f\5b\62\2\u044f\u00c1\3\2\2\2\u0450")
        buf.write("\u0451\7i\2\2\u0451\u0452\5p9\2\u0452\u0453\5b\62\2\u0453")
        buf.write("\u00c3\3\2\2\2\u0454\u0455\t\n\2\2\u0455\u00c5\3\2\2\2")
        buf.write("\u0086\u00c7\u00cc\u00d2\u00db\u00e1\u00eb\u00ef\u00f4")
        buf.write("\u00f8\u00fd\u0101\u0106\u010a\u0110\u0114\u0119\u011d")
        buf.write("\u011f\u0126\u012b\u0137\u0142\u014c\u0157\u015c\u015f")
        buf.write("\u0165\u0169\u016d\u016f\u0173\u0179\u0180\u0185\u0189")
        buf.write("\u018d\u01a2\u01a9\u01ad\u01b3\u01ba\u01bf\u01d2\u01df")
        buf.write("\u01e5\u01e8\u01ee\u01f5\u01fc\u0200\u0208\u020b\u020f")
        buf.write("\u0215\u021a\u0225\u022d\u0234\u023a\u0251\u0259\u025d")
        buf.write("\u0262\u0268\u026e\u0271\u0286\u028c\u02a6\u02ac\u02b5")
        buf.write("\u02ba\u02bf\u02c6\u02cc\u02d9\u02de\u02e5\u02f0\u02f3")
        buf.write("\u02fd\u0307\u030f\u0315\u031c\u0323\u0337\u033f\u0345")
        buf.write("\u0349\u0353\u0359\u035b\u0361\u036f\u037d\u0384\u0386")
        buf.write("\u038c\u0393\u0395\u039a\u03a1\u03a5\u03aa\u03ac\u03ae")
        buf.write("\u03bf\u03c7\u03ca\u03cd\u03d5\u03d8\u03db\u03e3\u03e6")
        buf.write("\u03e9\u03ed\u03fb\u0403\u0406\u0415\u041b\u041f\u0422")
        buf.write("\u0428\u042c\u0430\u0438\u043b\u0445\u0448")
        return buf.getvalue()


class jacParser(Parser):

    grammarFileName = "jac.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'version'",
        "'-->'",
        "'->'",
        "'<--'",
        "'<-'",
        "'<-->'",
        "'str'",
        "'int'",
        "'float'",
        "'list'",
        "'dict'",
        "'bool'",
        "'type'",
        "'graph'",
        "'node'",
        "'ignore'",
        "'take'",
        "'spawn'",
        "'with'",
        "'entry'",
        "'exit'",
        "'length'",
        "'keys'",
        "'context'",
        "'info'",
        "'details'",
        "'activity'",
        "'import'",
        "':'",
        "'::'",
        "'s::'",
        "'l::'",
        "'d::'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'::>'",
        "'{'",
        "'}'",
        "'edge'",
        "'walker'",
        "'async'",
        "'sync'",
        "'test'",
        "'assert'",
        "';'",
        "'='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "':='",
        "<INVALID>",
        "<INVALID>",
        "'if'",
        "'elif'",
        "'else'",
        "'for'",
        "'to'",
        "'by'",
        "'while'",
        "'continue'",
        "'break'",
        "'disengage'",
        "'yield'",
        "'skip'",
        "'report'",
        "'destroy'",
        "'try'",
        "'&'",
        "'.'",
        "<INVALID>",
        "'=='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'!='",
        "'in'",
        "'anchor'",
        "'has'",
        "'global'",
        "'private'",
        "','",
        "'can'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'^'",
        "'('",
        "')'",
        "'['",
        "']'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'null'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "TYP_STRING",
        "TYP_INT",
        "TYP_FLOAT",
        "TYP_LIST",
        "TYP_DICT",
        "TYP_BOOL",
        "KW_TYPE",
        "KW_GRAPH",
        "KW_NODE",
        "KW_IGNORE",
        "KW_TAKE",
        "KW_SPAWN",
        "KW_WITH",
        "KW_ENTRY",
        "KW_EXIT",
        "KW_LENGTH",
        "KW_KEYS",
        "KW_CONTEXT",
        "KW_INFO",
        "KW_DETAILS",
        "KW_ACTIVITY",
        "KW_IMPORT",
        "COLON",
        "DBL_COLON",
        "STR_DBL_COLON",
        "LIST_DBL_COLON",
        "DICT_DBL_COLON",
        "NODE_DBL_COLON",
        "EDGE_DBL_COLON",
        "WALKER_DBL_COLON",
        "GRAPH_DBL_COLON",
        "TYPE_DBL_COLON",
        "COLON_OUT",
        "LBRACE",
        "RBRACE",
        "KW_EDGE",
        "KW_WALKER",
        "KW_ASYNC",
        "KW_SYNC",
        "KW_TEST",
        "KW_ASSERT",
        "SEMI",
        "EQ",
        "PEQ",
        "MEQ",
        "TEQ",
        "DEQ",
        "CPY_EQ",
        "KW_AND",
        "KW_OR",
        "KW_IF",
        "KW_ELIF",
        "KW_ELSE",
        "KW_FOR",
        "KW_TO",
        "KW_BY",
        "KW_WHILE",
        "KW_CONTINUE",
        "KW_BREAK",
        "KW_DISENGAGE",
        "KW_YIELD",
        "KW_SKIP",
        "KW_REPORT",
        "KW_DESTROY",
        "KW_TRY",
        "KW_REF",
        "DOT",
        "NOT",
        "EE",
        "LT",
        "GT",
        "LTE",
        "GTE",
        "NE",
        "KW_IN",
        "KW_ANCHOR",
        "KW_HAS",
        "KW_GLOBAL",
        "KW_PRIVATE",
        "COMMA",
        "KW_CAN",
        "PLUS",
        "MINUS",
        "STAR_MUL",
        "DIV",
        "MOD",
        "POW",
        "LPAREN",
        "RPAREN",
        "LSQUARE",
        "RSQUARE",
        "FLOAT",
        "STRING",
        "BOOL",
        "INT",
        "NULL",
        "NAME",
        "COMMENT",
        "LINE_COMMENT",
        "PY_COMMENT",
        "WS",
        "ErrorChar",
    ]

    RULE_start = 0
    RULE_ver_label = 1
    RULE_import_module = 2
    RULE_import_items = 3
    RULE_import_names = 4
    RULE_element = 5
    RULE_global_var = 6
    RULE_architype = 7
    RULE_walker_block = 8
    RULE_test = 9
    RULE_namespaces = 10
    RULE_walk_entry_block = 11
    RULE_walk_exit_block = 12
    RULE_walk_activity_block = 13
    RULE_attr_block = 14
    RULE_attr_stmt = 15
    RULE_struct_block = 16
    RULE_can_block = 17
    RULE_graph_block = 18
    RULE_graph_block_spawn = 19
    RULE_has_root = 20
    RULE_has_stmt = 21
    RULE_has_assign = 22
    RULE_can_stmt = 23
    RULE_event_clause = 24
    RULE_preset_in_out = 25
    RULE_dotted_name = 26
    RULE_name_list = 27
    RULE_expr_list = 28
    RULE_code_block = 29
    RULE_node_ctx_block = 30
    RULE_statement = 31
    RULE_if_stmt = 32
    RULE_try_stmt = 33
    RULE_else_from_try = 34
    RULE_elif_stmt = 35
    RULE_else_stmt = 36
    RULE_for_stmt = 37
    RULE_while_stmt = 38
    RULE_ctrl_stmt = 39
    RULE_assert_stmt = 40
    RULE_destroy_action = 41
    RULE_report_action = 42
    RULE_walker_action = 43
    RULE_ignore_action = 44
    RULE_take_action = 45
    RULE_disengage_action = 46
    RULE_yield_action = 47
    RULE_expression = 48
    RULE_assignment = 49
    RULE_copy_assign = 50
    RULE_inc_assign = 51
    RULE_connect = 52
    RULE_logical = 53
    RULE_compare = 54
    RULE_cmp_op = 55
    RULE_nin = 56
    RULE_arithmetic = 57
    RULE_term = 58
    RULE_factor = 59
    RULE_power = 60
    RULE_global_ref = 61
    RULE_atom = 62
    RULE_atom_trailer = 63
    RULE_ability_op = 64
    RULE_ref = 65
    RULE_deref = 66
    RULE_built_in = 67
    RULE_cast_built_in = 68
    RULE_obj_built_in = 69
    RULE_dict_built_in = 70
    RULE_list_built_in = 71
    RULE_string_built_in = 72
    RULE_node_edge_ref = 73
    RULE_node_ref = 74
    RULE_walker_ref = 75
    RULE_graph_ref = 76
    RULE_type_ref = 77
    RULE_edge_ref = 78
    RULE_edge_to = 79
    RULE_edge_from = 80
    RULE_edge_any = 81
    RULE_list_val = 82
    RULE_index_slice = 83
    RULE_dict_val = 84
    RULE_kv_pair = 85
    RULE_spawn = 86
    RULE_spawn_object = 87
    RULE_spawn_edge = 88
    RULE_node_spawn = 89
    RULE_graph_spawn = 90
    RULE_walker_spawn = 91
    RULE_type_spawn = 92
    RULE_spawn_ctx = 93
    RULE_filter_ctx = 94
    RULE_spawn_assign = 95
    RULE_filter_compare = 96
    RULE_any_type = 97

    ruleNames = [
        "start",
        "ver_label",
        "import_module",
        "import_items",
        "import_names",
        "element",
        "global_var",
        "architype",
        "walker_block",
        "test",
        "namespaces",
        "walk_entry_block",
        "walk_exit_block",
        "walk_activity_block",
        "attr_block",
        "attr_stmt",
        "struct_block",
        "can_block",
        "graph_block",
        "graph_block_spawn",
        "has_root",
        "has_stmt",
        "has_assign",
        "can_stmt",
        "event_clause",
        "preset_in_out",
        "dotted_name",
        "name_list",
        "expr_list",
        "code_block",
        "node_ctx_block",
        "statement",
        "if_stmt",
        "try_stmt",
        "else_from_try",
        "elif_stmt",
        "else_stmt",
        "for_stmt",
        "while_stmt",
        "ctrl_stmt",
        "assert_stmt",
        "destroy_action",
        "report_action",
        "walker_action",
        "ignore_action",
        "take_action",
        "disengage_action",
        "yield_action",
        "expression",
        "assignment",
        "copy_assign",
        "inc_assign",
        "connect",
        "logical",
        "compare",
        "cmp_op",
        "nin",
        "arithmetic",
        "term",
        "factor",
        "power",
        "global_ref",
        "atom",
        "atom_trailer",
        "ability_op",
        "ref",
        "deref",
        "built_in",
        "cast_built_in",
        "obj_built_in",
        "dict_built_in",
        "list_built_in",
        "string_built_in",
        "node_edge_ref",
        "node_ref",
        "walker_ref",
        "graph_ref",
        "type_ref",
        "edge_ref",
        "edge_to",
        "edge_from",
        "edge_any",
        "list_val",
        "index_slice",
        "dict_val",
        "kv_pair",
        "spawn",
        "spawn_object",
        "spawn_edge",
        "node_spawn",
        "graph_spawn",
        "walker_spawn",
        "type_spawn",
        "spawn_ctx",
        "filter_ctx",
        "spawn_assign",
        "filter_compare",
        "any_type",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    TYP_STRING = 7
    TYP_INT = 8
    TYP_FLOAT = 9
    TYP_LIST = 10
    TYP_DICT = 11
    TYP_BOOL = 12
    KW_TYPE = 13
    KW_GRAPH = 14
    KW_NODE = 15
    KW_IGNORE = 16
    KW_TAKE = 17
    KW_SPAWN = 18
    KW_WITH = 19
    KW_ENTRY = 20
    KW_EXIT = 21
    KW_LENGTH = 22
    KW_KEYS = 23
    KW_CONTEXT = 24
    KW_INFO = 25
    KW_DETAILS = 26
    KW_ACTIVITY = 27
    KW_IMPORT = 28
    COLON = 29
    DBL_COLON = 30
    STR_DBL_COLON = 31
    LIST_DBL_COLON = 32
    DICT_DBL_COLON = 33
    NODE_DBL_COLON = 34
    EDGE_DBL_COLON = 35
    WALKER_DBL_COLON = 36
    GRAPH_DBL_COLON = 37
    TYPE_DBL_COLON = 38
    COLON_OUT = 39
    LBRACE = 40
    RBRACE = 41
    KW_EDGE = 42
    KW_WALKER = 43
    KW_ASYNC = 44
    KW_SYNC = 45
    KW_TEST = 46
    KW_ASSERT = 47
    SEMI = 48
    EQ = 49
    PEQ = 50
    MEQ = 51
    TEQ = 52
    DEQ = 53
    CPY_EQ = 54
    KW_AND = 55
    KW_OR = 56
    KW_IF = 57
    KW_ELIF = 58
    KW_ELSE = 59
    KW_FOR = 60
    KW_TO = 61
    KW_BY = 62
    KW_WHILE = 63
    KW_CONTINUE = 64
    KW_BREAK = 65
    KW_DISENGAGE = 66
    KW_YIELD = 67
    KW_SKIP = 68
    KW_REPORT = 69
    KW_DESTROY = 70
    KW_TRY = 71
    KW_REF = 72
    DOT = 73
    NOT = 74
    EE = 75
    LT = 76
    GT = 77
    LTE = 78
    GTE = 79
    NE = 80
    KW_IN = 81
    KW_ANCHOR = 82
    KW_HAS = 83
    KW_GLOBAL = 84
    KW_PRIVATE = 85
    COMMA = 86
    KW_CAN = 87
    PLUS = 88
    MINUS = 89
    STAR_MUL = 90
    DIV = 91
    MOD = 92
    POW = 93
    LPAREN = 94
    RPAREN = 95
    LSQUARE = 96
    RSQUARE = 97
    FLOAT = 98
    STRING = 99
    BOOL = 100
    INT = 101
    NULL = 102
    NAME = 103
    COMMENT = 104
    LINE_COMMENT = 105
    PY_COMMENT = 106
    WS = 107
    ErrorChar = 108

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class StartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(jacParser.EOF, 0)

        def ver_label(self):
            return self.getTypedRuleContext(jacParser.Ver_labelContext, 0)

        def import_module(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Import_moduleContext)
            else:
                return self.getTypedRuleContext(jacParser.Import_moduleContext, i)

        def element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ElementContext)
            else:
                return self.getTypedRuleContext(jacParser.ElementContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_start

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStart"):
                listener.enterStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStart"):
                listener.exitStart(self)

    def start(self):

        localctx = jacParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.T__0:
                self.state = 196
                self.ver_label()

            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_IMPORT:
                self.state = 199
                self.import_module()
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_GRAPH)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_WALKER)
                        | (1 << jacParser.KW_ASYNC)
                        | (1 << jacParser.KW_TEST)
                    )
                )
                != 0
            ) or _la == jacParser.KW_GLOBAL:
                self.state = 205
                self.element()
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 211
            self.match(jacParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ver_labelContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ver_label

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVer_label"):
                listener.enterVer_label(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVer_label"):
                listener.exitVer_label(self)

    def ver_label(self):

        localctx = jacParser.Ver_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_ver_label)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.match(jacParser.T__0)
            self.state = 214
            self.match(jacParser.COLON)
            self.state = 215
            self.match(jacParser.STRING)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.SEMI:
                self.state = 216
                self.match(jacParser.SEMI)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_moduleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(jacParser.KW_IMPORT, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_module

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_module"):
                listener.enterImport_module(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_module"):
                listener.exitImport_module(self)

    def import_module(self):

        localctx = jacParser.Import_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_import_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(jacParser.KW_IMPORT)
            self.state = 220
            self.match(jacParser.LBRACE)
            self.state = 223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                jacParser.NODE_DBL_COLON,
                jacParser.EDGE_DBL_COLON,
                jacParser.WALKER_DBL_COLON,
                jacParser.GRAPH_DBL_COLON,
                jacParser.TYPE_DBL_COLON,
                jacParser.KW_GLOBAL,
            ]:
                self.state = 221
                self.import_items()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 222
                self.match(jacParser.STAR_MUL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 225
            self.match(jacParser.RBRACE)
            self.state = 226
            self.match(jacParser.KW_WITH)
            self.state = 227
            self.match(jacParser.STRING)
            self.state = 228
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_itemsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WALKER_DBL_COLON(self):
            return self.getToken(jacParser.WALKER_DBL_COLON, 0)

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def import_names(self):
            return self.getTypedRuleContext(jacParser.Import_namesContext, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def import_items(self):
            return self.getTypedRuleContext(jacParser.Import_itemsContext, 0)

        def NODE_DBL_COLON(self):
            return self.getToken(jacParser.NODE_DBL_COLON, 0)

        def EDGE_DBL_COLON(self):
            return self.getToken(jacParser.EDGE_DBL_COLON, 0)

        def GRAPH_DBL_COLON(self):
            return self.getToken(jacParser.GRAPH_DBL_COLON, 0)

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def TYPE_DBL_COLON(self):
            return self.getToken(jacParser.TYPE_DBL_COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_items

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_items"):
                listener.enterImport_items(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_items"):
                listener.exitImport_items(self)

    def import_items(self):

        localctx = jacParser.Import_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_items)
        self._la = 0  # Token type
        try:
            self.state = 285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.WALKER_DBL_COLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                self.match(jacParser.WALKER_DBL_COLON)
                self.state = 233
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 231
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 232
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 235
                    self.match(jacParser.COMMA)
                    self.state = 236
                    self.import_items()

                pass
            elif token in [jacParser.NODE_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.match(jacParser.NODE_DBL_COLON)
                self.state = 242
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 240
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 241
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 244
                    self.match(jacParser.COMMA)
                    self.state = 245
                    self.import_items()

                pass
            elif token in [jacParser.EDGE_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self.match(jacParser.EDGE_DBL_COLON)
                self.state = 251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 249
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 250
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 253
                    self.match(jacParser.COMMA)
                    self.state = 254
                    self.import_items()

                pass
            elif token in [jacParser.GRAPH_DBL_COLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 257
                self.match(jacParser.GRAPH_DBL_COLON)
                self.state = 260
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 258
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 259
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 262
                    self.match(jacParser.COMMA)
                    self.state = 263
                    self.import_items()

                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 266
                self.match(jacParser.KW_GLOBAL)
                self.state = 267
                self.match(jacParser.DBL_COLON)
                self.state = 270
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 268
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 269
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 272
                    self.match(jacParser.COMMA)
                    self.state = 273
                    self.import_items()

                pass
            elif token in [jacParser.TYPE_DBL_COLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 276
                self.match(jacParser.TYPE_DBL_COLON)
                self.state = 279
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.STAR_MUL]:
                    self.state = 277
                    self.match(jacParser.STAR_MUL)
                    pass
                elif token in [jacParser.LBRACE, jacParser.NAME]:
                    self.state = 278
                    self.import_names()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 281
                    self.match(jacParser.COMMA)
                    self.state = 282
                    self.import_items()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_namesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_import_names

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_names"):
                listener.enterImport_names(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_names"):
                listener.exitImport_names(self)

    def import_names(self):

        localctx = jacParser.Import_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_import_names)
        try:
            self.state = 292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.match(jacParser.NAME)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                self.match(jacParser.LBRACE)
                self.state = 289
                self.name_list()
                self.state = 290
                self.match(jacParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_var(self):
            return self.getTypedRuleContext(jacParser.Global_varContext, 0)

        def architype(self):
            return self.getTypedRuleContext(jacParser.ArchitypeContext, 0)

        def test(self):
            return self.getTypedRuleContext(jacParser.TestContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)

    def element(self):

        localctx = jacParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_element)
        try:
            self.state = 297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_GLOBAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.global_var()
                pass
            elif token in [
                jacParser.KW_TYPE,
                jacParser.KW_GRAPH,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
                jacParser.KW_WALKER,
                jacParser.KW_ASYNC,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 295
                self.architype()
                pass
            elif token in [jacParser.KW_TEST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 296
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_varContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def EQ(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.EQ)
            else:
                return self.getToken(jacParser.EQ, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_global_var

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_var"):
                listener.enterGlobal_var(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_var"):
                listener.exitGlobal_var(self)

    def global_var(self):

        localctx = jacParser.Global_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_global_var)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(jacParser.KW_GLOBAL)
            self.state = 300
            self.match(jacParser.NAME)
            self.state = 301
            self.match(jacParser.EQ)
            self.state = 302
            self.expression()
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 303
                self.match(jacParser.COMMA)
                self.state = 304
                self.match(jacParser.NAME)
                self.state = 305
                self.match(jacParser.EQ)
                self.state = 306
                self.expression()
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 312
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArchitypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def attr_block(self):
            return self.getTypedRuleContext(jacParser.Attr_blockContext, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COLON)
            else:
                return self.getToken(jacParser.COLON, i)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def struct_block(self):
            return self.getTypedRuleContext(jacParser.Struct_blockContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def KW_ASYNC(self):
            return self.getToken(jacParser.KW_ASYNC, 0)

        def namespaces(self):
            return self.getTypedRuleContext(jacParser.NamespacesContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_architype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArchitype"):
                listener.enterArchitype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArchitype"):
                listener.exitArchitype(self)

    def architype(self):

        localctx = jacParser.ArchitypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_architype)
        self._la = 0  # Token type
        try:
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 314
                self.match(jacParser.KW_NODE)
                self.state = 315
                self.match(jacParser.NAME)
                self.state = 320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 316
                        self.match(jacParser.COLON)
                        self.state = 317
                        self.match(jacParser.NAME)
                    self.state = 322
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 323
                self.attr_block()
                pass
            elif token in [jacParser.KW_EDGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 324
                self.match(jacParser.KW_EDGE)
                self.state = 325
                self.match(jacParser.NAME)
                self.state = 330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 326
                        self.match(jacParser.COLON)
                        self.state = 327
                        self.match(jacParser.NAME)
                    self.state = 332
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)

                self.state = 333
                self.attr_block()
                pass
            elif token in [jacParser.KW_TYPE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self.match(jacParser.KW_TYPE)
                self.state = 335
                self.match(jacParser.NAME)
                self.state = 336
                self.struct_block()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 337
                self.match(jacParser.KW_GRAPH)
                self.state = 338
                self.match(jacParser.NAME)
                self.state = 339
                self.graph_block()
                pass
            elif token in [jacParser.KW_WALKER, jacParser.KW_ASYNC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_ASYNC:
                    self.state = 340
                    self.match(jacParser.KW_ASYNC)

                self.state = 343
                self.match(jacParser.KW_WALKER)
                self.state = 344
                self.match(jacParser.NAME)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COLON:
                    self.state = 345
                    self.namespaces()

                self.state = 348
                self.walker_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def walk_entry_block(self):
            return self.getTypedRuleContext(jacParser.Walk_entry_blockContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def walk_activity_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Walk_activity_blockContext)
            else:
                return self.getTypedRuleContext(jacParser.Walk_activity_blockContext, i)

        def walk_exit_block(self):
            return self.getTypedRuleContext(jacParser.Walk_exit_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_block"):
                listener.enterWalker_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_block"):
                listener.exitWalker_block(self)

    def walker_block(self):

        localctx = jacParser.Walker_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_walker_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(jacParser.LBRACE)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                self.state = 352
                self.attr_stmt()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.state = 358
                self.walk_entry_block()

            self.state = 365
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 363
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        jacParser.T__1,
                        jacParser.T__3,
                        jacParser.T__4,
                        jacParser.T__5,
                        jacParser.TYP_STRING,
                        jacParser.TYP_INT,
                        jacParser.TYP_FLOAT,
                        jacParser.TYP_LIST,
                        jacParser.TYP_DICT,
                        jacParser.TYP_BOOL,
                        jacParser.KW_TYPE,
                        jacParser.KW_NODE,
                        jacParser.KW_IGNORE,
                        jacParser.KW_TAKE,
                        jacParser.KW_SPAWN,
                        jacParser.COLON,
                        jacParser.DBL_COLON,
                        jacParser.NODE_DBL_COLON,
                        jacParser.LBRACE,
                        jacParser.KW_EDGE,
                        jacParser.KW_SYNC,
                        jacParser.KW_ASSERT,
                        jacParser.KW_IF,
                        jacParser.KW_FOR,
                        jacParser.KW_WHILE,
                        jacParser.KW_CONTINUE,
                        jacParser.KW_BREAK,
                        jacParser.KW_DISENGAGE,
                        jacParser.KW_YIELD,
                        jacParser.KW_SKIP,
                        jacParser.KW_REPORT,
                        jacParser.KW_DESTROY,
                        jacParser.KW_TRY,
                        jacParser.KW_REF,
                        jacParser.NOT,
                        jacParser.KW_GLOBAL,
                        jacParser.PLUS,
                        jacParser.MINUS,
                        jacParser.STAR_MUL,
                        jacParser.LPAREN,
                        jacParser.LSQUARE,
                        jacParser.FLOAT,
                        jacParser.STRING,
                        jacParser.BOOL,
                        jacParser.INT,
                        jacParser.NULL,
                        jacParser.NAME,
                    ]:
                        self.state = 361
                        self.statement()
                        pass
                    elif token in [jacParser.KW_WITH]:
                        self.state = 362
                        self.walk_activity_block()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 367
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_WITH:
                self.state = 368
                self.walk_exit_block()

            self.state = 371
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TEST(self):
            return self.getToken(jacParser.KW_TEST, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def KW_GRAPH(self):
            return self.getToken(jacParser.KW_GRAPH, 0)

        def graph_block(self):
            return self.getTypedRuleContext(jacParser.Graph_blockContext, 0)

        def KW_WALKER(self):
            return self.getToken(jacParser.KW_WALKER, 0)

        def walker_block(self):
            return self.getTypedRuleContext(jacParser.Walker_blockContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_test

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTest"):
                listener.enterTest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTest"):
                listener.exitTest(self)

    def test(self):

        localctx = jacParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(jacParser.KW_TEST)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 374
                self.match(jacParser.NAME)

            self.state = 377
            self.match(jacParser.STRING)
            self.state = 378
            self.match(jacParser.KW_WITH)
            self.state = 382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.GRAPH_DBL_COLON]:
                self.state = 379
                self.graph_ref()
                pass
            elif token in [jacParser.KW_GRAPH]:
                self.state = 380
                self.match(jacParser.KW_GRAPH)
                self.state = 381
                self.graph_block()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 384
            self.match(jacParser.KW_BY)
            self.state = 395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.WALKER_DBL_COLON]:
                self.state = 385
                self.walker_ref()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 386
                    self.spawn_ctx()

                self.state = 391
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.COLON, jacParser.LBRACE]:
                    self.state = 389
                    self.code_block()
                    pass
                elif token in [jacParser.SEMI]:
                    self.state = 390
                    self.match(jacParser.SEMI)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [jacParser.KW_WALKER]:
                self.state = 393
                self.match(jacParser.KW_WALKER)
                self.state = 394
                self.walker_block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_namespaces

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespaces"):
                listener.enterNamespaces(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespaces"):
                listener.exitNamespaces(self)

    def namespaces(self):

        localctx = jacParser.NamespacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_namespaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(jacParser.COLON)
            self.state = 398
            self.name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_entry_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_entry_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_entry_block"):
                listener.enterWalk_entry_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_entry_block"):
                listener.exitWalk_entry_block(self)

    def walk_entry_block(self):

        localctx = jacParser.Walk_entry_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_walk_entry_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(jacParser.KW_WITH)
            self.state = 401
            self.match(jacParser.KW_ENTRY)
            self.state = 402
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_exit_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_exit_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_exit_block"):
                listener.enterWalk_exit_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_exit_block"):
                listener.exitWalk_exit_block(self)

    def walk_exit_block(self):

        localctx = jacParser.Walk_exit_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_walk_exit_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(jacParser.KW_WITH)
            self.state = 405
            self.match(jacParser.KW_EXIT)
            self.state = 406
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walk_activity_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walk_activity_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalk_activity_block"):
                listener.enterWalk_activity_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalk_activity_block"):
                listener.exitWalk_activity_block(self)

    def walk_activity_block(self):

        localctx = jacParser.Walk_activity_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_walk_activity_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(jacParser.KW_WITH)
            self.state = 409
            self.match(jacParser.KW_ACTIVITY)
            self.state = 410
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def attr_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Attr_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Attr_stmtContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_block"):
                listener.enterAttr_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_block"):
                listener.exitAttr_block(self)

    def attr_block(self):

        localctx = jacParser.Attr_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_attr_block)
        self._la = 0  # Token type
        try:
            self.state = 423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self.match(jacParser.LBRACE)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.KW_HAS or _la == jacParser.KW_CAN:
                    self.state = 413
                    self.attr_stmt()
                    self.state = 418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 419
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.match(jacParser.COLON)
                self.state = 421
                self.attr_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 422
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attr_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def has_stmt(self):
            return self.getTypedRuleContext(jacParser.Has_stmtContext, 0)

        def can_stmt(self):
            return self.getTypedRuleContext(jacParser.Can_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_attr_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttr_stmt"):
                listener.enterAttr_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttr_stmt"):
                listener.exitAttr_stmt(self)

    def attr_stmt(self):

        localctx = jacParser.Attr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attr_stmt)
        try:
            self.state = 427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_HAS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self.has_stmt()
                pass
            elif token in [jacParser.KW_CAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.can_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def has_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_stmtContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_struct_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStruct_block"):
                listener.enterStruct_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStruct_block"):
                listener.exitStruct_block(self)

    def struct_block(self):

        localctx = jacParser.Struct_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_struct_block)
        self._la = 0  # Token type
        try:
            self.state = 440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.match(jacParser.LBRACE)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.KW_HAS:
                    self.state = 430
                    self.has_stmt()
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 436
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.match(jacParser.COLON)
                self.state = 438
                self.has_stmt()
                pass
            elif token in [jacParser.SEMI]:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def can_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Can_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Can_stmtContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_can_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_block"):
                listener.enterCan_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_block"):
                listener.exitCan_block(self)

    def can_block(self):

        localctx = jacParser.Can_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_can_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_CAN:
                self.state = 442
                self.can_stmt()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_block_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_block_spawnContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block"):
                listener.enterGraph_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block"):
                listener.exitGraph_block(self)

    def graph_block(self):

        localctx = jacParser.Graph_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_graph_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.graph_block_spawn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_block_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def has_root(self):
            return self.getTypedRuleContext(jacParser.Has_rootContext, 0)

        def can_block(self):
            return self.getTypedRuleContext(jacParser.Can_blockContext, 0)

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_block_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_block_spawn"):
                listener.enterGraph_block_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_block_spawn"):
                listener.exitGraph_block_spawn(self)

    def graph_block_spawn(self):

        localctx = jacParser.Graph_block_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_graph_block_spawn)
        try:
            self.state = 464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self.match(jacParser.LBRACE)
                self.state = 451
                self.has_root()
                self.state = 452
                self.can_block()
                self.state = 453
                self.match(jacParser.KW_SPAWN)
                self.state = 454
                self.code_block()
                self.state = 455
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.match(jacParser.COLON)
                self.state = 458
                self.has_root()
                self.state = 459
                self.can_block()
                self.state = 460
                self.match(jacParser.KW_SPAWN)
                self.state = 461
                self.code_block()
                self.state = 462
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_rootContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_root

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_root"):
                listener.enterHas_root(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_root"):
                listener.exitHas_root(self)

    def has_root(self):

        localctx = jacParser.Has_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_has_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(jacParser.KW_HAS)
            self.state = 467
            self.match(jacParser.KW_ANCHOR)
            self.state = 468
            self.match(jacParser.NAME)
            self.state = 469
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HAS(self):
            return self.getToken(jacParser.KW_HAS, 0)

        def has_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Has_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Has_assignContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_has_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_stmt"):
                listener.enterHas_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_stmt"):
                listener.exitHas_stmt(self)

    def has_stmt(self):

        localctx = jacParser.Has_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_has_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(jacParser.KW_HAS)
            self.state = 472
            self.has_assign()
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 473
                self.match(jacParser.COMMA)
                self.state = 474
                self.has_assign()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 480
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def KW_PRIVATE(self):
            return self.getToken(jacParser.KW_PRIVATE, 0)

        def KW_ANCHOR(self):
            return self.getToken(jacParser.KW_ANCHOR, 0)

        def getRuleIndex(self):
            return jacParser.RULE_has_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHas_assign"):
                listener.enterHas_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHas_assign"):
                listener.exitHas_assign(self)

    def has_assign(self):

        localctx = jacParser.Has_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_has_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_PRIVATE:
                self.state = 482
                self.match(jacParser.KW_PRIVATE)

            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_ANCHOR:
                self.state = 485
                self.match(jacParser.KW_ANCHOR)

            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
            if la_ == 1:
                self.state = 488
                self.match(jacParser.NAME)
                pass

            elif la_ == 2:
                self.state = 489
                self.match(jacParser.NAME)
                self.state = 490
                self.match(jacParser.EQ)
                self.state = 491
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Can_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CAN(self):
            return self.getToken(jacParser.KW_CAN, 0)

        def dotted_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Dotted_nameContext)
            else:
                return self.getTypedRuleContext(jacParser.Dotted_nameContext, i)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def preset_in_out(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Preset_in_outContext)
            else:
                return self.getTypedRuleContext(jacParser.Preset_in_outContext, i)

        def event_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Event_clauseContext)
            else:
                return self.getTypedRuleContext(jacParser.Event_clauseContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_can_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCan_stmt"):
                listener.enterCan_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCan_stmt"):
                listener.exitCan_stmt(self)

    def can_stmt(self):

        localctx = jacParser.Can_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_can_stmt)
        self._la = 0  # Token type
        try:
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.match(jacParser.KW_CAN)
                self.state = 495
                self.dotted_name()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.DBL_COLON:
                    self.state = 496
                    self.preset_in_out()
                    self.state = 497
                    self.event_clause()

                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 501
                    self.match(jacParser.COMMA)
                    self.state = 502
                    self.dotted_name()
                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == jacParser.DBL_COLON:
                        self.state = 503
                        self.preset_in_out()
                        self.state = 504
                        self.event_clause()

                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 513
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.match(jacParser.KW_CAN)
                self.state = 516
                self.match(jacParser.NAME)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 517
                    self.event_clause()

                self.state = 520
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_clauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def KW_ENTRY(self):
            return self.getToken(jacParser.KW_ENTRY, 0)

        def KW_EXIT(self):
            return self.getToken(jacParser.KW_EXIT, 0)

        def KW_ACTIVITY(self):
            return self.getToken(jacParser.KW_ACTIVITY, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_event_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEvent_clause"):
                listener.enterEvent_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEvent_clause"):
                listener.exitEvent_clause(self)

    def event_clause(self):

        localctx = jacParser.Event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_event_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(jacParser.KW_WITH)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 524
                self.name_list()

            self.state = 527
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_ENTRY)
                            | (1 << jacParser.KW_EXIT)
                            | (1 << jacParser.KW_ACTIVITY)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Preset_in_outContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DBL_COLON)
            else:
                return self.getToken(jacParser.DBL_COLON, i)

        def COLON_OUT(self):
            return self.getToken(jacParser.COLON_OUT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_preset_in_out

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPreset_in_out"):
                listener.enterPreset_in_out(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPreset_in_out"):
                listener.exitPreset_in_out(self)

    def preset_in_out(self):

        localctx = jacParser.Preset_in_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_preset_in_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(jacParser.DBL_COLON)
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.state = 530
                self.expr_list()

            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.DBL_COLON]:
                self.state = 533
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.COLON_OUT]:
                self.state = 534
                self.match(jacParser.COLON_OUT)
                self.state = 535
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dotted_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDotted_name"):
                listener.enterDotted_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDotted_name"):
                listener.exitDotted_name(self)

    def dotted_name(self):

        localctx = jacParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dotted_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(jacParser.NAME)
            self.state = 539
            self.match(jacParser.DOT)
            self.state = 540
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_name_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName_list"):
                listener.enterName_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName_list"):
                listener.exitName_list(self)

    def name_list(self):

        localctx = jacParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_name_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(jacParser.NAME)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 543
                self.match(jacParser.COMMA)
                self.state = 544
                self.match(jacParser.NAME)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_expr_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr_list"):
                listener.enterExpr_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr_list"):
                listener.exitExpr_list(self)

    def expr_list(self):

        localctx = jacParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_expr_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.expression()
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.COMMA:
                self.state = 551
                self.match(jacParser.COMMA)
                self.state = 552
                self.expression()
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.StatementContext)
            else:
                return self.getTypedRuleContext(jacParser.StatementContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_code_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCode_block"):
                listener.enterCode_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCode_block"):
                listener.exitCode_block(self)

    def code_block(self):

        localctx = jacParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_code_block)
        self._la = 0  # Token type
        try:
            self.state = 568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.match(jacParser.LBRACE)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__3)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_IGNORE)
                            | (1 << jacParser.KW_TAKE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.COLON)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.NODE_DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_SYNC)
                            | (1 << jacParser.KW_ASSERT)
                            | (1 << jacParser.KW_IF)
                            | (1 << jacParser.KW_FOR)
                            | (1 << jacParser.KW_WHILE)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (jacParser.KW_CONTINUE - 64))
                            | (1 << (jacParser.KW_BREAK - 64))
                            | (1 << (jacParser.KW_DISENGAGE - 64))
                            | (1 << (jacParser.KW_YIELD - 64))
                            | (1 << (jacParser.KW_SKIP - 64))
                            | (1 << (jacParser.KW_REPORT - 64))
                            | (1 << (jacParser.KW_DESTROY - 64))
                            | (1 << (jacParser.KW_TRY - 64))
                            | (1 << (jacParser.KW_REF - 64))
                            | (1 << (jacParser.NOT - 64))
                            | (1 << (jacParser.KW_GLOBAL - 64))
                            | (1 << (jacParser.PLUS - 64))
                            | (1 << (jacParser.MINUS - 64))
                            | (1 << (jacParser.STAR_MUL - 64))
                            | (1 << (jacParser.LPAREN - 64))
                            | (1 << (jacParser.LSQUARE - 64))
                            | (1 << (jacParser.FLOAT - 64))
                            | (1 << (jacParser.STRING - 64))
                            | (1 << (jacParser.BOOL - 64))
                            | (1 << (jacParser.INT - 64))
                            | (1 << (jacParser.NULL - 64))
                            | (1 << (jacParser.NAME - 64))
                        )
                    )
                    != 0
                ):
                    self.state = 559
                    self.statement()
                    self.state = 564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 565
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.match(jacParser.COLON)
                self.state = 567
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_ctx_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ctx_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ctx_block"):
                listener.enterNode_ctx_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ctx_block"):
                listener.exitNode_ctx_block(self)

    def node_ctx_block(self):

        localctx = jacParser.Node_ctx_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_node_ctx_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.name_list()
            self.state = 571
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def node_ctx_block(self):
            return self.getTypedRuleContext(jacParser.Node_ctx_blockContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def if_stmt(self):
            return self.getTypedRuleContext(jacParser.If_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(jacParser.Try_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(jacParser.For_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(jacParser.While_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(jacParser.Assert_stmtContext, 0)

        def ctrl_stmt(self):
            return self.getTypedRuleContext(jacParser.Ctrl_stmtContext, 0)

        def destroy_action(self):
            return self.getTypedRuleContext(jacParser.Destroy_actionContext, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def walker_action(self):
            return self.getTypedRuleContext(jacParser.Walker_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = jacParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        try:
            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.node_ctx_block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 575
                self.expression()
                self.state = 576
                self.match(jacParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 578
                self.if_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 579
                self.try_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 580
                self.for_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 581
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 582
                self.assert_stmt()
                self.state = 583
                self.match(jacParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 585
                self.ctrl_stmt()
                self.state = 586
                self.match(jacParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 588
                self.destroy_action()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 589
                self.report_action()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 590
                self.walker_action()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IF(self):
            return self.getToken(jacParser.KW_IF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def elif_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(jacParser.Elif_stmtContext, i)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_if_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIf_stmt"):
                listener.enterIf_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIf_stmt"):
                listener.exitIf_stmt(self)

    def if_stmt(self):

        localctx = jacParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(jacParser.KW_IF)
            self.state = 594
            self.expression()
            self.state = 595
            self.code_block()
            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 596
                    self.elif_stmt()
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)

            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 61, self._ctx)
            if la_ == 1:
                self.state = 602
                self.else_stmt()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TRY(self):
            return self.getToken(jacParser.KW_TRY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def else_from_try(self):
            return self.getTypedRuleContext(jacParser.Else_from_tryContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_try_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTry_stmt"):
                listener.enterTry_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTry_stmt"):
                listener.exitTry_stmt(self)

    def try_stmt(self):

        localctx = jacParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_try_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(jacParser.KW_TRY)
            self.state = 606
            self.code_block()
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
            if la_ == 1:
                self.state = 607
                self.else_from_try()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_from_tryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def KW_WITH(self):
            return self.getToken(jacParser.KW_WITH, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_from_try

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_from_try"):
                listener.enterElse_from_try(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_from_try"):
                listener.exitElse_from_try(self)

    def else_from_try(self):

        localctx = jacParser.Else_from_tryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_else_from_try)
        self._la = 0  # Token type
        try:
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.match(jacParser.KW_ELSE)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LPAREN:
                    self.state = 611
                    self.match(jacParser.LPAREN)
                    self.state = 612
                    self.match(jacParser.NAME)
                    self.state = 613
                    self.match(jacParser.RPAREN)

                self.state = 616
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.match(jacParser.KW_ELSE)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.KW_WITH:
                    self.state = 618
                    self.match(jacParser.KW_WITH)
                    self.state = 619
                    self.match(jacParser.NAME)

                self.state = 622
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elif_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELIF(self):
            return self.getToken(jacParser.KW_ELIF, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_elif_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElif_stmt"):
                listener.enterElif_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElif_stmt"):
                listener.exitElif_stmt(self)

    def elif_stmt(self):

        localctx = jacParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(jacParser.KW_ELIF)
            self.state = 626
            self.expression()
            self.state = 627
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ELSE(self):
            return self.getToken(jacParser.KW_ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_else_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_stmt"):
                listener.enterElse_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_stmt"):
                listener.exitElse_stmt(self)

    def else_stmt(self):

        localctx = jacParser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(jacParser.KW_ELSE)
            self.state = 630
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FOR(self):
            return self.getToken(jacParser.KW_FOR, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def KW_TO(self):
            return self.getToken(jacParser.KW_TO, 0)

        def KW_BY(self):
            return self.getToken(jacParser.KW_BY, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.NAME)
            else:
                return self.getToken(jacParser.NAME, i)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def COMMA(self):
            return self.getToken(jacParser.COMMA, 0)

        def getRuleIndex(self):
            return jacParser.RULE_for_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFor_stmt"):
                listener.enterFor_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFor_stmt"):
                listener.exitFor_stmt(self)

    def for_stmt(self):

        localctx = jacParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 632
                self.match(jacParser.KW_FOR)
                self.state = 633
                self.expression()
                self.state = 634
                self.match(jacParser.KW_TO)
                self.state = 635
                self.expression()
                self.state = 636
                self.match(jacParser.KW_BY)
                self.state = 637
                self.expression()
                self.state = 638
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.match(jacParser.KW_FOR)
                self.state = 641
                self.match(jacParser.NAME)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.COMMA:
                    self.state = 642
                    self.match(jacParser.COMMA)
                    self.state = 643
                    self.match(jacParser.NAME)

                self.state = 646
                self.match(jacParser.KW_IN)
                self.state = 647
                self.expression()
                self.state = 648
                self.code_block()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHILE(self):
            return self.getToken(jacParser.KW_WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def code_block(self):
            return self.getTypedRuleContext(jacParser.Code_blockContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_while_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhile_stmt"):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhile_stmt"):
                listener.exitWhile_stmt(self)

    def while_stmt(self):

        localctx = jacParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(jacParser.KW_WHILE)
            self.state = 653
            self.expression()
            self.state = 654
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ctrl_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTINUE(self):
            return self.getToken(jacParser.KW_CONTINUE, 0)

        def KW_BREAK(self):
            return self.getToken(jacParser.KW_BREAK, 0)

        def KW_SKIP(self):
            return self.getToken(jacParser.KW_SKIP, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ctrl_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtrl_stmt"):
                listener.enterCtrl_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtrl_stmt"):
                listener.exitCtrl_stmt(self)

    def ctrl_stmt(self):

        localctx = jacParser.Ctrl_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ctrl_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (jacParser.KW_CONTINUE - 64))
                            | (1 << (jacParser.KW_BREAK - 64))
                            | (1 << (jacParser.KW_SKIP - 64))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ASSERT(self):
            return self.getToken(jacParser.KW_ASSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssert_stmt"):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssert_stmt"):
                listener.exitAssert_stmt(self)

    def assert_stmt(self):

        localctx = jacParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_assert_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(jacParser.KW_ASSERT)
            self.state = 659
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destroy_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESTROY(self):
            return self.getToken(jacParser.KW_DESTROY, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_destroy_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDestroy_action"):
                listener.enterDestroy_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDestroy_action"):
                listener.exitDestroy_action(self)

    def destroy_action(self):

        localctx = jacParser.Destroy_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_destroy_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(jacParser.KW_DESTROY)
            self.state = 662
            self.expression()
            self.state = 663
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Report_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REPORT(self):
            return self.getToken(jacParser.KW_REPORT, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_report_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReport_action"):
                listener.enterReport_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReport_action"):
                listener.exitReport_action(self)

    def report_action(self):

        localctx = jacParser.Report_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_report_action)
        try:
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.match(jacParser.KW_REPORT)
                self.state = 666
                self.expression()
                self.state = 667
                self.match(jacParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.match(jacParser.KW_REPORT)
                self.state = 670
                self.match(jacParser.COLON)
                self.state = 671
                self.match(jacParser.NAME)
                self.state = 672
                self.match(jacParser.EQ)
                self.state = 673
                self.expression()
                self.state = 674
                self.match(jacParser.SEMI)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ignore_action(self):
            return self.getTypedRuleContext(jacParser.Ignore_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def disengage_action(self):
            return self.getTypedRuleContext(jacParser.Disengage_actionContext, 0)

        def yield_action(self):
            return self.getTypedRuleContext(jacParser.Yield_actionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_action"):
                listener.enterWalker_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_action"):
                listener.exitWalker_action(self)

    def walker_action(self):

        localctx = jacParser.Walker_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_walker_action)
        try:
            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 678
                self.ignore_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.take_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 680
                self.disengage_action()
                pass
            elif token in [jacParser.KW_YIELD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 681
                self.yield_action()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ignore_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IGNORE(self):
            return self.getToken(jacParser.KW_IGNORE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ignore_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIgnore_action"):
                listener.enterIgnore_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIgnore_action"):
                listener.exitIgnore_action(self)

    def ignore_action(self):

        localctx = jacParser.Ignore_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ignore_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(jacParser.KW_IGNORE)
            self.state = 685
            self.expression()
            self.state = 686
            self.match(jacParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Take_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TAKE(self):
            return self.getToken(jacParser.KW_TAKE, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(jacParser.Else_stmtContext, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_take_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTake_action"):
                listener.enterTake_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTake_action"):
                listener.exitTake_action(self)

    def take_action(self):

        localctx = jacParser.Take_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_take_action)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(jacParser.KW_TAKE)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.COLON:
                self.state = 689
                self.match(jacParser.COLON)
                self.state = 690
                self.match(jacParser.NAME)

            self.state = 693
            self.expression()
            self.state = 696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.SEMI]:
                self.state = 694
                self.match(jacParser.SEMI)
                pass
            elif token in [jacParser.KW_ELSE]:
                self.state = 695
                self.else_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Disengage_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISENGAGE(self):
            return self.getToken(jacParser.KW_DISENGAGE, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_disengage_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDisengage_action"):
                listener.enterDisengage_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDisengage_action"):
                listener.exitDisengage_action(self)

    def disengage_action(self):

        localctx = jacParser.Disengage_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_disengage_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(jacParser.KW_DISENGAGE)
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_REPORT]:
                self.state = 699
                self.report_action()
                pass
            elif token in [jacParser.SEMI]:
                self.state = 700
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_actionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_YIELD(self):
            return self.getToken(jacParser.KW_YIELD, 0)

        def report_action(self):
            return self.getTypedRuleContext(jacParser.Report_actionContext, 0)

        def disengage_action(self):
            return self.getTypedRuleContext(jacParser.Disengage_actionContext, 0)

        def take_action(self):
            return self.getTypedRuleContext(jacParser.Take_actionContext, 0)

        def SEMI(self):
            return self.getToken(jacParser.SEMI, 0)

        def getRuleIndex(self):
            return jacParser.RULE_yield_action

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYield_action"):
                listener.enterYield_action(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYield_action"):
                listener.exitYield_action(self)

    def yield_action(self):

        localctx = jacParser.Yield_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_yield_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(jacParser.KW_YIELD)
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_REPORT]:
                self.state = 704
                self.report_action()
                pass
            elif token in [jacParser.KW_DISENGAGE]:
                self.state = 705
                self.disengage_action()
                pass
            elif token in [jacParser.KW_TAKE]:
                self.state = 706
                self.take_action()
                pass
            elif token in [jacParser.SEMI]:
                self.state = 707
                self.match(jacParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connect(self):
            return self.getTypedRuleContext(jacParser.ConnectContext, 0)

        def assignment(self):
            return self.getTypedRuleContext(jacParser.AssignmentContext, 0)

        def copy_assign(self):
            return self.getTypedRuleContext(jacParser.Copy_assignContext, 0)

        def inc_assign(self):
            return self.getTypedRuleContext(jacParser.Inc_assignContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):

        localctx = jacParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.connect()
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 74, self._ctx)
            if la_ == 1:
                self.state = 711
                self.assignment()

            elif la_ == 2:
                self.state = 712
                self.copy_assign()

            elif la_ == 3:
                self.state = 713
                self.inc_assign()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_assignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)

    def assignment(self):

        localctx = jacParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(jacParser.EQ)
            self.state = 717
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CPY_EQ(self):
            return self.getToken(jacParser.CPY_EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_copy_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCopy_assign"):
                listener.enterCopy_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCopy_assign"):
                listener.exitCopy_assign(self)

    def copy_assign(self):

        localctx = jacParser.Copy_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_copy_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(jacParser.CPY_EQ)
            self.state = 720
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inc_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def PEQ(self):
            return self.getToken(jacParser.PEQ, 0)

        def MEQ(self):
            return self.getToken(jacParser.MEQ, 0)

        def TEQ(self):
            return self.getToken(jacParser.TEQ, 0)

        def DEQ(self):
            return self.getToken(jacParser.DEQ, 0)

        def getRuleIndex(self):
            return jacParser.RULE_inc_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInc_assign"):
                listener.enterInc_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInc_assign"):
                listener.exitInc_assign(self)

    def inc_assign(self):

        localctx = jacParser.Inc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_inc_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.PEQ)
                            | (1 << jacParser.MEQ)
                            | (1 << jacParser.TEQ)
                            | (1 << jacParser.DEQ)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 723
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConnectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical(self):
            return self.getTypedRuleContext(jacParser.LogicalContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def getRuleIndex(self):
            return jacParser.RULE_connect

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnect"):
                listener.enterConnect(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnect"):
                listener.exitConnect(self)

    def connect(self):

        localctx = jacParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_connect)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.logical()
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
            if la_ == 1:
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.NOT:
                    self.state = 726
                    self.match(jacParser.NOT)

                self.state = 729
                self.edge_ref()
                self.state = 730
                self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.CompareContext)
            else:
                return self.getTypedRuleContext(jacParser.CompareContext, i)

        def KW_AND(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_AND)
            else:
                return self.getToken(jacParser.KW_AND, i)

        def KW_OR(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.KW_OR)
            else:
                return self.getToken(jacParser.KW_OR, i)

        def getRuleIndex(self):
            return jacParser.RULE_logical

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogical"):
                listener.enterLogical(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogical"):
                listener.exitLogical(self)

    def logical(self):

        localctx = jacParser.LogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_logical)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.compare()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == jacParser.KW_AND or _la == jacParser.KW_OR:
                self.state = 735
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_AND or _la == jacParser.KW_OR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 736
                self.compare()
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def compare(self):
            return self.getTypedRuleContext(jacParser.CompareContext, 0)

        def arithmetic(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(jacParser.ArithmeticContext, i)

        def cmp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Cmp_opContext)
            else:
                return self.getTypedRuleContext(jacParser.Cmp_opContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompare"):
                listener.enterCompare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompare"):
                listener.exitCompare(self)

    def compare(self):

        localctx = jacParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_compare)
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.match(jacParser.NOT)
                self.state = 743
                self.compare()
                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.TYP_STRING,
                jacParser.TYP_INT,
                jacParser.TYP_FLOAT,
                jacParser.TYP_LIST,
                jacParser.TYP_DICT,
                jacParser.TYP_BOOL,
                jacParser.KW_TYPE,
                jacParser.KW_NODE,
                jacParser.KW_SPAWN,
                jacParser.DBL_COLON,
                jacParser.NODE_DBL_COLON,
                jacParser.LBRACE,
                jacParser.KW_EDGE,
                jacParser.KW_SYNC,
                jacParser.KW_REF,
                jacParser.KW_GLOBAL,
                jacParser.PLUS,
                jacParser.MINUS,
                jacParser.STAR_MUL,
                jacParser.LPAREN,
                jacParser.LSQUARE,
                jacParser.FLOAT,
                jacParser.STRING,
                jacParser.BOOL,
                jacParser.INT,
                jacParser.NULL,
                jacParser.NAME,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.arithmetic()
                self.state = 750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 745
                        self.cmp_op()
                        self.state = 746
                        self.arithmetic()
                    self.state = 752
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cmp_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(jacParser.EE, 0)

        def LT(self):
            return self.getToken(jacParser.LT, 0)

        def GT(self):
            return self.getToken(jacParser.GT, 0)

        def LTE(self):
            return self.getToken(jacParser.LTE, 0)

        def GTE(self):
            return self.getToken(jacParser.GTE, 0)

        def NE(self):
            return self.getToken(jacParser.NE, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def nin(self):
            return self.getTypedRuleContext(jacParser.NinContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cmp_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCmp_op"):
                listener.enterCmp_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCmp_op"):
                listener.exitCmp_op(self)

    def cmp_op(self):

        localctx = jacParser.Cmp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_cmp_op)
        try:
            self.state = 763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.EE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.match(jacParser.EE)
                pass
            elif token in [jacParser.LT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.match(jacParser.LT)
                pass
            elif token in [jacParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 757
                self.match(jacParser.GT)
                pass
            elif token in [jacParser.LTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 758
                self.match(jacParser.LTE)
                pass
            elif token in [jacParser.GTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 759
                self.match(jacParser.GTE)
                pass
            elif token in [jacParser.NE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 760
                self.match(jacParser.NE)
                pass
            elif token in [jacParser.KW_IN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 761
                self.match(jacParser.KW_IN)
                pass
            elif token in [jacParser.NOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 762
                self.nin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NinContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(jacParser.NOT, 0)

        def KW_IN(self):
            return self.getToken(jacParser.KW_IN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_nin

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNin"):
                listener.enterNin(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNin"):
                listener.exitNin(self)

    def nin(self):

        localctx = jacParser.NinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_nin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(jacParser.NOT)
            self.state = 766
            self.match(jacParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.TermContext)
            else:
                return self.getTypedRuleContext(jacParser.TermContext, i)

        def PLUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.PLUS)
            else:
                return self.getToken(jacParser.PLUS, i)

        def MINUS(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MINUS)
            else:
                return self.getToken(jacParser.MINUS, i)

        def getRuleIndex(self):
            return jacParser.RULE_arithmetic

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmetic"):
                listener.enterArithmetic(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmetic"):
                listener.exitArithmetic(self)

    def arithmetic(self):

        localctx = jacParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arithmetic)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.term()
            self.state = 773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 769
                    _la = self._input.LA(1)
                    if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 770
                    self.term()
                self.state = 775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def STAR_MUL(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.STAR_MUL)
            else:
                return self.getToken(jacParser.STAR_MUL, i)

        def DIV(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.DIV)
            else:
                return self.getToken(jacParser.DIV, i)

        def MOD(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.MOD)
            else:
                return self.getToken(jacParser.MOD, i)

        def getRuleIndex(self):
            return jacParser.RULE_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTerm"):
                listener.enterTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTerm"):
                listener.exitTerm(self)

    def term(self):

        localctx = jacParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.factor()
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 90)) & ~0x3F) == 0 and (
                (1 << (_la - 90))
                & (
                    (1 << (jacParser.STAR_MUL - 90))
                    | (1 << (jacParser.DIV - 90))
                    | (1 << (jacParser.MOD - 90))
                )
            ) != 0:
                self.state = 777
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 90)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 90))
                            & (
                                (1 << (jacParser.STAR_MUL - 90))
                                | (1 << (jacParser.DIV - 90))
                                | (1 << (jacParser.MOD - 90))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 778
                self.factor()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(jacParser.FactorContext, 0)

        def PLUS(self):
            return self.getToken(jacParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def power(self):
            return self.getTypedRuleContext(jacParser.PowerContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

    def factor(self):

        localctx = jacParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 83, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                _la = self._input.LA(1)
                if not (_la == jacParser.PLUS or _la == jacParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 785
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.power()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def POW(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.POW)
            else:
                return self.getToken(jacParser.POW, i)

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.FactorContext)
            else:
                return self.getTypedRuleContext(jacParser.FactorContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_power

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPower"):
                listener.enterPower(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPower"):
                listener.exitPower(self)

    def power(self):

        localctx = jacParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.atom(0)
            self.state = 794
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 790
                    self.match(jacParser.POW)
                    self.state = 791
                    self.factor()
                self.state = 796
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GLOBAL(self):
            return self.getToken(jacParser.KW_GLOBAL, 0)

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_global_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobal_ref"):
                listener.enterGlobal_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobal_ref"):
                listener.exitGlobal_ref(self)

    def global_ref(self):

        localctx = jacParser.Global_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_global_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(jacParser.KW_GLOBAL)
            self.state = 798
            self.match(jacParser.DOT)
            self.state = 801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_CONTEXT, jacParser.KW_INFO, jacParser.KW_DETAILS]:
                self.state = 799
                self.obj_built_in()
                pass
            elif token in [jacParser.NAME]:
                self.state = 800
                self.match(jacParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(jacParser.INT, 0)

        def FLOAT(self):
            return self.getToken(jacParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(jacParser.STRING, 0)

        def BOOL(self):
            return self.getToken(jacParser.BOOL, 0)

        def NULL(self):
            return self.getToken(jacParser.NULL, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def global_ref(self):
            return self.getTypedRuleContext(jacParser.Global_refContext, 0)

        def node_edge_ref(self):
            return self.getTypedRuleContext(jacParser.Node_edge_refContext, 0)

        def list_val(self):
            return self.getTypedRuleContext(jacParser.List_valContext, 0)

        def dict_val(self):
            return self.getTypedRuleContext(jacParser.Dict_valContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def KW_SYNC(self):
            return self.getToken(jacParser.KW_SYNC, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def spawn(self):
            return self.getTypedRuleContext(jacParser.SpawnContext, 0)

        def ref(self):
            return self.getTypedRuleContext(jacParser.RefContext, 0)

        def deref(self):
            return self.getTypedRuleContext(jacParser.DerefContext, 0)

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def atom_trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Atom_trailerContext)
            else:
                return self.getTypedRuleContext(jacParser.Atom_trailerContext, i)

        def getRuleIndex(self):
            return jacParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

    def atom(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = jacParser.AtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_atom, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.INT]:
                self.state = 804
                self.match(jacParser.INT)
                pass
            elif token in [jacParser.FLOAT]:
                self.state = 805
                self.match(jacParser.FLOAT)
                pass
            elif token in [jacParser.STRING]:
                self.state = 806
                self.match(jacParser.STRING)
                pass
            elif token in [jacParser.BOOL]:
                self.state = 807
                self.match(jacParser.BOOL)
                pass
            elif token in [jacParser.NULL]:
                self.state = 808
                self.match(jacParser.NULL)
                pass
            elif token in [jacParser.NAME]:
                self.state = 809
                self.match(jacParser.NAME)
                pass
            elif token in [jacParser.KW_GLOBAL]:
                self.state = 810
                self.global_ref()
                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.NODE_DBL_COLON,
                jacParser.MINUS,
            ]:
                self.state = 811
                self.node_edge_ref()
                pass
            elif token in [jacParser.LSQUARE]:
                self.state = 812
                self.list_val()
                pass
            elif token in [jacParser.LBRACE]:
                self.state = 813
                self.dict_val()
                pass
            elif token in [jacParser.LPAREN]:
                self.state = 814
                self.match(jacParser.LPAREN)
                self.state = 815
                self.expression()
                self.state = 816
                self.match(jacParser.RPAREN)
                pass
            elif token in [jacParser.DBL_COLON]:
                self.state = 818
                self.ability_op()
                self.state = 819
                self.match(jacParser.NAME)
                self.state = 821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
                if la_ == 1:
                    self.state = 820
                    self.spawn_ctx()

                pass
            elif token in [jacParser.KW_SYNC]:
                self.state = 823
                self.match(jacParser.KW_SYNC)
                self.state = 824
                self.atom(5)
                pass
            elif token in [jacParser.KW_SPAWN]:
                self.state = 825
                self.spawn()
                pass
            elif token in [jacParser.KW_REF]:
                self.state = 826
                self.ref()
                pass
            elif token in [jacParser.STAR_MUL]:
                self.state = 827
                self.deref()
                pass
            elif token in [
                jacParser.TYP_STRING,
                jacParser.TYP_INT,
                jacParser.TYP_FLOAT,
                jacParser.TYP_LIST,
                jacParser.TYP_DICT,
                jacParser.TYP_BOOL,
                jacParser.KW_TYPE,
                jacParser.KW_NODE,
                jacParser.KW_EDGE,
            ]:
                self.state = 828
                self.any_type()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = jacParser.AtomContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom)
                    self.state = 831
                    if not self.precpred(self._ctx, 6):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 6)"
                        )
                    self.state = 833
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 832
                            self.atom_trailer()

                        else:
                            raise NoViableAltException(self)
                        self.state = 835
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)

                self.state = 841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Atom_trailerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(jacParser.DOT, 0)

        def built_in(self):
            return self.getTypedRuleContext(jacParser.Built_inContext, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def index_slice(self):
            return self.getTypedRuleContext(jacParser.Index_sliceContext, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def ability_op(self):
            return self.getTypedRuleContext(jacParser.Ability_opContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_atom_trailer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom_trailer"):
                listener.enterAtom_trailer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom_trailer"):
                listener.exitAtom_trailer(self)

    def atom_trailer(self):

        localctx = jacParser.Atom_trailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_atom_trailer)
        self._la = 0  # Token type
        try:
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 842
                self.match(jacParser.DOT)
                self.state = 843
                self.built_in()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self.match(jacParser.DOT)
                self.state = 845
                self.match(jacParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 846
                self.index_slice()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 847
                self.match(jacParser.LPAREN)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.T__1)
                            | (1 << jacParser.T__3)
                            | (1 << jacParser.T__4)
                            | (1 << jacParser.T__5)
                            | (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_SPAWN)
                            | (1 << jacParser.DBL_COLON)
                            | (1 << jacParser.NODE_DBL_COLON)
                            | (1 << jacParser.LBRACE)
                            | (1 << jacParser.KW_EDGE)
                            | (1 << jacParser.KW_SYNC)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 72)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 72))
                        & (
                            (1 << (jacParser.KW_REF - 72))
                            | (1 << (jacParser.NOT - 72))
                            | (1 << (jacParser.KW_GLOBAL - 72))
                            | (1 << (jacParser.PLUS - 72))
                            | (1 << (jacParser.MINUS - 72))
                            | (1 << (jacParser.STAR_MUL - 72))
                            | (1 << (jacParser.LPAREN - 72))
                            | (1 << (jacParser.LSQUARE - 72))
                            | (1 << (jacParser.FLOAT - 72))
                            | (1 << (jacParser.STRING - 72))
                            | (1 << (jacParser.BOOL - 72))
                            | (1 << (jacParser.INT - 72))
                            | (1 << (jacParser.NULL - 72))
                            | (1 << (jacParser.NAME - 72))
                        )
                    )
                    != 0
                ):
                    self.state = 848
                    self.expr_list()

                self.state = 851
                self.match(jacParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 852
                self.ability_op()
                self.state = 853
                self.match(jacParser.NAME)
                self.state = 855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
                if la_ == 1:
                    self.state = 854
                    self.spawn_ctx()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ability_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ability_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbility_op"):
                listener.enterAbility_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbility_op"):
                listener.exitAbility_op(self)

    def ability_op(self):

        localctx = jacParser.Ability_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_ability_op)
        try:
            self.state = 863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 859
                self.match(jacParser.DBL_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 860
                self.match(jacParser.DBL_COLON)
                self.state = 861
                self.match(jacParser.NAME)
                self.state = 862
                self.match(jacParser.COLON)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_REF(self):
            return self.getToken(jacParser.KW_REF, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRef"):
                listener.enterRef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRef"):
                listener.exitRef(self)

    def ref(self):

        localctx = jacParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(jacParser.KW_REF)
            self.state = 866
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerefContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR_MUL(self):
            return self.getToken(jacParser.STAR_MUL, 0)

        def atom(self):
            return self.getTypedRuleContext(jacParser.AtomContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_deref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeref"):
                listener.enterDeref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeref"):
                listener.exitDeref(self)

    def deref(self):

        localctx = jacParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(jacParser.STAR_MUL)
            self.state = 869
            self.atom(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_built_in(self):
            return self.getTypedRuleContext(jacParser.String_built_inContext, 0)

        def dict_built_in(self):
            return self.getTypedRuleContext(jacParser.Dict_built_inContext, 0)

        def list_built_in(self):
            return self.getTypedRuleContext(jacParser.List_built_inContext, 0)

        def obj_built_in(self):
            return self.getTypedRuleContext(jacParser.Obj_built_inContext, 0)

        def cast_built_in(self):
            return self.getTypedRuleContext(jacParser.Cast_built_inContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBuilt_in"):
                listener.enterBuilt_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBuilt_in"):
                listener.exitBuilt_in(self)

    def built_in(self):

        localctx = jacParser.Built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_built_in)
        try:
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 872
                self.string_built_in()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 873
                self.dict_built_in()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 874
                self.list_built_in()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 875
                self.obj_built_in()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 876
                self.cast_built_in()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(jacParser.Any_typeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_cast_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCast_built_in"):
                listener.enterCast_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCast_built_in"):
                listener.exitCast_built_in(self)

    def cast_built_in(self):

        localctx = jacParser.Cast_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_cast_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Obj_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(jacParser.KW_CONTEXT, 0)

        def KW_INFO(self):
            return self.getToken(jacParser.KW_INFO, 0)

        def KW_DETAILS(self):
            return self.getToken(jacParser.KW_DETAILS, 0)

        def getRuleIndex(self):
            return jacParser.RULE_obj_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObj_built_in"):
                listener.enterObj_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObj_built_in"):
                listener.exitObj_built_in(self)

    def obj_built_in(self):

        localctx = jacParser.Obj_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_obj_built_in)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.KW_CONTEXT)
                            | (1 << jacParser.KW_INFO)
                            | (1 << jacParser.KW_DETAILS)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_KEYS(self):
            return self.getToken(jacParser.KW_KEYS, 0)

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def name_list(self):
            return self.getTypedRuleContext(jacParser.Name_listContext, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def DICT_DBL_COLON(self):
            return self.getToken(jacParser.DICT_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_dict_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_built_in"):
                listener.enterDict_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_built_in"):
                listener.exitDict_built_in(self)

    def dict_built_in(self):

        localctx = jacParser.Dict_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dict_built_in)
        self._la = 0  # Token type
        try:
            self.state = 900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_KEYS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 883
                self.match(jacParser.KW_KEYS)
                pass
            elif token in [jacParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.match(jacParser.LBRACE)
                self.state = 885
                self.name_list()
                self.state = 886
                self.match(jacParser.RBRACE)
                pass
            elif token in [jacParser.TYP_DICT, jacParser.DICT_DBL_COLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 891
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_DICT]:
                    self.state = 888
                    self.match(jacParser.TYP_DICT)
                    self.state = 889
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.DICT_DBL_COLON]:
                    self.state = 890
                    self.match(jacParser.DICT_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 893
                _la = self._input.LA(1)
                if not (_la == jacParser.KW_KEYS or _la == jacParser.NAME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
                if la_ == 1:
                    self.state = 894
                    self.match(jacParser.LPAREN)
                    self.state = 895
                    self.expr_list()
                    self.state = 896
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LENGTH(self):
            return self.getToken(jacParser.KW_LENGTH, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def LIST_DBL_COLON(self):
            return self.getToken(jacParser.LIST_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_built_in"):
                listener.enterList_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_built_in"):
                listener.exitList_built_in(self)

    def list_built_in(self):

        localctx = jacParser.List_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_list_built_in)
        try:
            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.KW_LENGTH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 902
                self.match(jacParser.KW_LENGTH)
                pass
            elif token in [jacParser.TYP_LIST, jacParser.LIST_DBL_COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [jacParser.TYP_LIST]:
                    self.state = 903
                    self.match(jacParser.TYP_LIST)
                    self.state = 904
                    self.match(jacParser.DBL_COLON)
                    pass
                elif token in [jacParser.LIST_DBL_COLON]:
                    self.state = 905
                    self.match(jacParser.LIST_DBL_COLON)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 908
                self.match(jacParser.NAME)
                self.state = 913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
                if la_ == 1:
                    self.state = 909
                    self.match(jacParser.LPAREN)
                    self.state = 910
                    self.expr_list()
                    self.state = 911
                    self.match(jacParser.RPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_built_inContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def DBL_COLON(self):
            return self.getToken(jacParser.DBL_COLON, 0)

        def STR_DBL_COLON(self):
            return self.getToken(jacParser.STR_DBL_COLON, 0)

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def getRuleIndex(self):
            return jacParser.RULE_string_built_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_built_in"):
                listener.enterString_built_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_built_in"):
                listener.exitString_built_in(self)

    def string_built_in(self):

        localctx = jacParser.String_built_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_string_built_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.TYP_STRING]:
                self.state = 917
                self.match(jacParser.TYP_STRING)
                self.state = 918
                self.match(jacParser.DBL_COLON)
                pass
            elif token in [jacParser.STR_DBL_COLON]:
                self.state = 919
                self.match(jacParser.STR_DBL_COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 922
            self.match(jacParser.NAME)
            self.state = 927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
            if la_ == 1:
                self.state = 923
                self.match(jacParser.LPAREN)
                self.state = 924
                self.expr_list()
                self.state = 925
                self.match(jacParser.RPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_edge_ref"):
                listener.enterNode_edge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_edge_ref"):
                listener.exitNode_edge_ref(self)

    def node_edge_ref(self):

        localctx = jacParser.Node_edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_node_edge_ref)
        try:
            self.state = 940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.NODE_DBL_COLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 929
                self.node_ref()
                self.state = 931
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
                if la_ == 1:
                    self.state = 930
                    self.filter_ctx()

                pass
            elif token in [
                jacParser.T__1,
                jacParser.T__3,
                jacParser.T__4,
                jacParser.T__5,
                jacParser.MINUS,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.edge_ref()
                self.state = 938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
                if la_ == 1:
                    self.state = 934
                    self.node_ref()
                    self.state = 936
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                    if la_ == 1:
                        self.state = 935
                        self.filter_ctx()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE_DBL_COLON(self):
            return self.getToken(jacParser.NODE_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_ref"):
                listener.enterNode_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_ref"):
                listener.exitNode_ref(self)

    def node_ref(self):

        localctx = jacParser.Node_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_node_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(jacParser.NODE_DBL_COLON)
            self.state = 943
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WALKER_DBL_COLON(self):
            return self.getToken(jacParser.WALKER_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_ref"):
                listener.enterWalker_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_ref"):
                listener.exitWalker_ref(self)

    def walker_ref(self):

        localctx = jacParser.Walker_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_walker_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(jacParser.WALKER_DBL_COLON)
            self.state = 946
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH_DBL_COLON(self):
            return self.getToken(jacParser.GRAPH_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_ref"):
                listener.enterGraph_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_ref"):
                listener.exitGraph_ref(self)

    def graph_ref(self):

        localctx = jacParser.Graph_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_graph_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(jacParser.GRAPH_DBL_COLON)
            self.state = 949
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_DBL_COLON(self):
            return self.getToken(jacParser.TYPE_DBL_COLON, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def getRuleIndex(self):
            return jacParser.RULE_type_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_ref"):
                listener.enterType_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_ref"):
                listener.exitType_ref(self)

    def type_ref(self):

        localctx = jacParser.Type_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_type_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(jacParser.TYPE_DBL_COLON)
            self.state = 952
            self.match(jacParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_refContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edge_to(self):
            return self.getTypedRuleContext(jacParser.Edge_toContext, 0)

        def edge_from(self):
            return self.getTypedRuleContext(jacParser.Edge_fromContext, 0)

        def edge_any(self):
            return self.getTypedRuleContext(jacParser.Edge_anyContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_ref

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_ref"):
                listener.enterEdge_ref(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_ref"):
                listener.exitEdge_ref(self)

    def edge_ref(self):

        localctx = jacParser.Edge_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_edge_ref)
        try:
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.edge_to()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.edge_from()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 956
                self.edge_any()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_toContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_to

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_to"):
                listener.enterEdge_to(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_to"):
                listener.exitEdge_to(self)

    def edge_to(self):

        localctx = jacParser.Edge_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_edge_to)
        self._la = 0  # Token type
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 959
                self.match(jacParser.T__1)
                pass
            elif token in [jacParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.match(jacParser.MINUS)
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 961
                    self.match(jacParser.LSQUARE)
                    self.state = 962
                    self.match(jacParser.NAME)
                    self.state = 965
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
                    if la_ == 1:
                        self.state = 963
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 964
                        self.filter_ctx()

                    self.state = 967
                    self.match(jacParser.RSQUARE)

                self.state = 970
                self.match(jacParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_fromContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(jacParser.MINUS, 0)

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_from

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_from"):
                listener.enterEdge_from(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_from"):
                listener.exitEdge_from(self)

    def edge_from(self):

        localctx = jacParser.Edge_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_edge_from)
        self._la = 0  # Token type
        try:
            self.state = 985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 973
                self.match(jacParser.T__3)
                pass
            elif token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.match(jacParser.T__4)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 975
                    self.match(jacParser.LSQUARE)
                    self.state = 976
                    self.match(jacParser.NAME)
                    self.state = 979
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 111, self._ctx)
                    if la_ == 1:
                        self.state = 977
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 978
                        self.filter_ctx()

                    self.state = 981
                    self.match(jacParser.RSQUARE)

                self.state = 984
                self.match(jacParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Edge_anyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def filter_ctx(self):
            return self.getTypedRuleContext(jacParser.Filter_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_edge_any

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdge_any"):
                listener.enterEdge_any(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdge_any"):
                listener.exitEdge_any(self)

    def edge_any(self):

        localctx = jacParser.Edge_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_edge_any)
        self._la = 0  # Token type
        try:
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [jacParser.T__5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 987
                self.match(jacParser.T__5)
                pass
            elif token in [jacParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self.match(jacParser.T__4)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == jacParser.LSQUARE:
                    self.state = 989
                    self.match(jacParser.LSQUARE)
                    self.state = 990
                    self.match(jacParser.NAME)
                    self.state = 993
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
                    if la_ == 1:
                        self.state = 991
                        self.spawn_ctx()

                    elif la_ == 2:
                        self.state = 992
                        self.filter_ctx()

                    self.state = 995
                    self.match(jacParser.RSQUARE)

                self.state = 998
                self.match(jacParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(jacParser.Expr_listContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_list_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterList_val"):
                listener.enterList_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitList_val"):
                listener.exitList_val(self)

    def list_val(self):

        localctx = jacParser.List_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_list_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(jacParser.LSQUARE)
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 72)) & ~0x3F) == 0
                and (
                    (1 << (_la - 72))
                    & (
                        (1 << (jacParser.KW_REF - 72))
                        | (1 << (jacParser.NOT - 72))
                        | (1 << (jacParser.KW_GLOBAL - 72))
                        | (1 << (jacParser.PLUS - 72))
                        | (1 << (jacParser.MINUS - 72))
                        | (1 << (jacParser.STAR_MUL - 72))
                        | (1 << (jacParser.LPAREN - 72))
                        | (1 << (jacParser.LSQUARE - 72))
                        | (1 << (jacParser.FLOAT - 72))
                        | (1 << (jacParser.STRING - 72))
                        | (1 << (jacParser.BOOL - 72))
                        | (1 << (jacParser.INT - 72))
                        | (1 << (jacParser.NULL - 72))
                        | (1 << (jacParser.NAME - 72))
                    )
                )
                != 0
            ):
                self.state = 1002
                self.expr_list()

            self.state = 1005
            self.match(jacParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_sliceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(jacParser.LSQUARE, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def RSQUARE(self):
            return self.getToken(jacParser.RSQUARE, 0)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_index_slice

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndex_slice"):
                listener.enterIndex_slice(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndex_slice"):
                listener.exitIndex_slice(self)

    def index_slice(self):

        localctx = jacParser.Index_sliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_index_slice)
        try:
            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.match(jacParser.LSQUARE)
                self.state = 1008
                self.expression()
                self.state = 1009
                self.match(jacParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.match(jacParser.LSQUARE)
                self.state = 1012
                self.expression()
                self.state = 1013
                self.match(jacParser.COLON)
                self.state = 1014
                self.expression()
                self.state = 1015
                self.match(jacParser.RSQUARE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_valContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(jacParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(jacParser.RBRACE, 0)

        def kv_pair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(jacParser.Kv_pairContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_dict_val

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDict_val"):
                listener.enterDict_val(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDict_val"):
                listener.exitDict_val(self)

    def dict_val(self):

        localctx = jacParser.Dict_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dict_val)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(jacParser.LBRACE)
            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 72)) & ~0x3F) == 0
                and (
                    (1 << (_la - 72))
                    & (
                        (1 << (jacParser.KW_REF - 72))
                        | (1 << (jacParser.NOT - 72))
                        | (1 << (jacParser.KW_GLOBAL - 72))
                        | (1 << (jacParser.PLUS - 72))
                        | (1 << (jacParser.MINUS - 72))
                        | (1 << (jacParser.STAR_MUL - 72))
                        | (1 << (jacParser.LPAREN - 72))
                        | (1 << (jacParser.LSQUARE - 72))
                        | (1 << (jacParser.FLOAT - 72))
                        | (1 << (jacParser.STRING - 72))
                        | (1 << (jacParser.BOOL - 72))
                        | (1 << (jacParser.INT - 72))
                        | (1 << (jacParser.NULL - 72))
                        | (1 << (jacParser.NAME - 72))
                    )
                )
                != 0
            ):
                self.state = 1020
                self.kv_pair()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1021
                    self.match(jacParser.COMMA)
                    self.state = 1022
                    self.kv_pair()
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1030
            self.match(jacParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Kv_pairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(jacParser.ExpressionContext, i)

        def COLON(self):
            return self.getToken(jacParser.COLON, 0)

        def getRuleIndex(self):
            return jacParser.RULE_kv_pair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKv_pair"):
                listener.enterKv_pair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKv_pair"):
                listener.exitKv_pair(self)

    def kv_pair(self):

        localctx = jacParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.expression()
            self.state = 1033
            self.match(jacParser.COLON)
            self.state = 1034
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SPAWN(self):
            return self.getToken(jacParser.KW_SPAWN, 0)

        def spawn_object(self):
            return self.getTypedRuleContext(jacParser.Spawn_objectContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn"):
                listener.enterSpawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn"):
                listener.exitSpawn(self)

    def spawn(self):

        localctx = jacParser.SpawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(jacParser.KW_SPAWN)
            self.state = 1037
            self.spawn_object()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_objectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_spawn(self):
            return self.getTypedRuleContext(jacParser.Node_spawnContext, 0)

        def walker_spawn(self):
            return self.getTypedRuleContext(jacParser.Walker_spawnContext, 0)

        def graph_spawn(self):
            return self.getTypedRuleContext(jacParser.Graph_spawnContext, 0)

        def type_spawn(self):
            return self.getTypedRuleContext(jacParser.Type_spawnContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_object

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_object"):
                listener.enterSpawn_object(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_object"):
                listener.exitSpawn_object(self)

    def spawn_object(self):

        localctx = jacParser.Spawn_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_spawn_object)
        try:
            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.node_spawn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.walker_spawn()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1041
                self.graph_spawn()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1042
                self.type_spawn()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_edgeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def edge_ref(self):
            return self.getTypedRuleContext(jacParser.Edge_refContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_edge

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_edge"):
                listener.enterSpawn_edge(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_edge"):
                listener.exitSpawn_edge(self)

    def spawn_edge(self):

        localctx = jacParser.Spawn_edgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_spawn_edge)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.expression()
            self.state = 1046
            self.edge_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Node_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def node_ref(self):
            return self.getTypedRuleContext(jacParser.Node_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_node_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNode_spawn"):
                listener.enterNode_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNode_spawn"):
                listener.exitNode_spawn(self)

    def node_spawn(self):

        localctx = jacParser.Node_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_node_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
            if la_ == 1:
                self.state = 1048
                self.spawn_edge()

            self.state = 1051
            self.node_ref()
            self.state = 1053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 123, self._ctx)
            if la_ == 1:
                self.state = 1052
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Graph_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_ref(self):
            return self.getTypedRuleContext(jacParser.Graph_refContext, 0)

        def spawn_edge(self):
            return self.getTypedRuleContext(jacParser.Spawn_edgeContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_graph_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraph_spawn"):
                listener.enterGraph_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraph_spawn"):
                listener.exitGraph_spawn(self)

    def graph_spawn(self):

        localctx = jacParser.Graph_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_graph_spawn)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << jacParser.T__1)
                        | (1 << jacParser.T__3)
                        | (1 << jacParser.T__4)
                        | (1 << jacParser.T__5)
                        | (1 << jacParser.TYP_STRING)
                        | (1 << jacParser.TYP_INT)
                        | (1 << jacParser.TYP_FLOAT)
                        | (1 << jacParser.TYP_LIST)
                        | (1 << jacParser.TYP_DICT)
                        | (1 << jacParser.TYP_BOOL)
                        | (1 << jacParser.KW_TYPE)
                        | (1 << jacParser.KW_NODE)
                        | (1 << jacParser.KW_SPAWN)
                        | (1 << jacParser.DBL_COLON)
                        | (1 << jacParser.NODE_DBL_COLON)
                        | (1 << jacParser.LBRACE)
                        | (1 << jacParser.KW_EDGE)
                        | (1 << jacParser.KW_SYNC)
                    )
                )
                != 0
            ) or (
                (((_la - 72)) & ~0x3F) == 0
                and (
                    (1 << (_la - 72))
                    & (
                        (1 << (jacParser.KW_REF - 72))
                        | (1 << (jacParser.NOT - 72))
                        | (1 << (jacParser.KW_GLOBAL - 72))
                        | (1 << (jacParser.PLUS - 72))
                        | (1 << (jacParser.MINUS - 72))
                        | (1 << (jacParser.STAR_MUL - 72))
                        | (1 << (jacParser.LPAREN - 72))
                        | (1 << (jacParser.LSQUARE - 72))
                        | (1 << (jacParser.FLOAT - 72))
                        | (1 << (jacParser.STRING - 72))
                        | (1 << (jacParser.BOOL - 72))
                        | (1 << (jacParser.INT - 72))
                        | (1 << (jacParser.NULL - 72))
                        | (1 << (jacParser.NAME - 72))
                    )
                )
                != 0
            ):
                self.state = 1055
                self.spawn_edge()

            self.state = 1058
            self.graph_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Walker_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def walker_ref(self):
            return self.getTypedRuleContext(jacParser.Walker_refContext, 0)

        def KW_SYNC(self):
            return self.getToken(jacParser.KW_SYNC, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_walker_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWalker_spawn"):
                listener.enterWalker_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWalker_spawn"):
                listener.exitWalker_spawn(self)

    def walker_spawn(self):

        localctx = jacParser.Walker_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_walker_spawn)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.expression()
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.KW_SYNC:
                self.state = 1061
                self.match(jacParser.KW_SYNC)

            self.state = 1064
            self.walker_ref()
            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
            if la_ == 1:
                self.state = 1065
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_spawnContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_ref(self):
            return self.getTypedRuleContext(jacParser.Type_refContext, 0)

        def spawn_ctx(self):
            return self.getTypedRuleContext(jacParser.Spawn_ctxContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_type_spawn

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_spawn"):
                listener.enterType_spawn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_spawn"):
                listener.exitType_spawn(self)

    def type_spawn(self):

        localctx = jacParser.Type_spawnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_type_spawn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.type_ref()
            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 127, self._ctx)
            if la_ == 1:
                self.state = 1069
                self.spawn_ctx()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def spawn_assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Spawn_assignContext)
            else:
                return self.getTypedRuleContext(jacParser.Spawn_assignContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_ctx"):
                listener.enterSpawn_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_ctx"):
                listener.exitSpawn_ctx(self)

    def spawn_ctx(self):

        localctx = jacParser.Spawn_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_spawn_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(jacParser.LPAREN)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1073
                self.spawn_assign()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1074
                    self.match(jacParser.COMMA)
                    self.state = 1075
                    self.spawn_assign()
                    self.state = 1080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1083
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_ctxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(jacParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(jacParser.RPAREN, 0)

        def filter_compare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(jacParser.Filter_compareContext)
            else:
                return self.getTypedRuleContext(jacParser.Filter_compareContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(jacParser.COMMA)
            else:
                return self.getToken(jacParser.COMMA, i)

        def getRuleIndex(self):
            return jacParser.RULE_filter_ctx

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_ctx"):
                listener.enterFilter_ctx(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_ctx"):
                listener.exitFilter_ctx(self)

    def filter_ctx(self):

        localctx = jacParser.Filter_ctxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_filter_ctx)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(jacParser.LPAREN)
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == jacParser.NAME:
                self.state = 1086
                self.filter_compare()
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == jacParser.COMMA:
                    self.state = 1087
                    self.match(jacParser.COMMA)
                    self.state = 1088
                    self.filter_compare()
                    self.state = 1093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1096
            self.match(jacParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Spawn_assignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def EQ(self):
            return self.getToken(jacParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_spawn_assign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSpawn_assign"):
                listener.enterSpawn_assign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSpawn_assign"):
                listener.exitSpawn_assign(self)

    def spawn_assign(self):

        localctx = jacParser.Spawn_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_spawn_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(jacParser.NAME)
            self.state = 1099
            self.match(jacParser.EQ)
            self.state = 1100
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_compareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(jacParser.NAME, 0)

        def cmp_op(self):
            return self.getTypedRuleContext(jacParser.Cmp_opContext, 0)

        def expression(self):
            return self.getTypedRuleContext(jacParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return jacParser.RULE_filter_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_compare"):
                listener.enterFilter_compare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_compare"):
                listener.exitFilter_compare(self)

    def filter_compare(self):

        localctx = jacParser.Filter_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_filter_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(jacParser.NAME)
            self.state = 1103
            self.cmp_op()
            self.state = 1104
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYP_STRING(self):
            return self.getToken(jacParser.TYP_STRING, 0)

        def TYP_INT(self):
            return self.getToken(jacParser.TYP_INT, 0)

        def TYP_FLOAT(self):
            return self.getToken(jacParser.TYP_FLOAT, 0)

        def TYP_LIST(self):
            return self.getToken(jacParser.TYP_LIST, 0)

        def TYP_DICT(self):
            return self.getToken(jacParser.TYP_DICT, 0)

        def TYP_BOOL(self):
            return self.getToken(jacParser.TYP_BOOL, 0)

        def KW_NODE(self):
            return self.getToken(jacParser.KW_NODE, 0)

        def KW_EDGE(self):
            return self.getToken(jacParser.KW_EDGE, 0)

        def KW_TYPE(self):
            return self.getToken(jacParser.KW_TYPE, 0)

        def getRuleIndex(self):
            return jacParser.RULE_any_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAny_type"):
                listener.enterAny_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAny_type"):
                listener.exitAny_type(self)

    def any_type(self):

        localctx = jacParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_any_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << jacParser.TYP_STRING)
                            | (1 << jacParser.TYP_INT)
                            | (1 << jacParser.TYP_FLOAT)
                            | (1 << jacParser.TYP_LIST)
                            | (1 << jacParser.TYP_DICT)
                            | (1 << jacParser.TYP_BOOL)
                            | (1 << jacParser.KW_TYPE)
                            | (1 << jacParser.KW_NODE)
                            | (1 << jacParser.KW_EDGE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[62] = self.atom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def atom_sempred(self, localctx: AtomContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 6)
