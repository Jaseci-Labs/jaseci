from jaseci.utils.test_core import CoreTest, jac_testcase


class DjsonTest(CoreTest):
    fixture_src = __file__

    @jac_testcase("djson.jac", "parser")
    def test_djson_parse(self, ret):
        self.assertEqual(
            ret["report"],
            [
                "[1]: whole source",
                {"b": {"a": 1}},
                "[2]: whole source cast to string",
                {"b": '{"a": 1}'},
                "[3]: int",
                {"b": 1},
                "[4]: int cast to string",
                {"b": "1"},
                "[5]: int partial",
                {"b": "partial-1"},
                "[6]: string",
                {"b": "1"},
                "[7]: string partial",
                {"b": "partial-1"},
                "[8]: int list",
                {"b": [1]},
                "[9]: int list cast to string",
                {"b": "[1]"},
                "[10]: int list partial",
                {"b": "partial-[1]"},
                "[11]: int list index",
                {"b": 1},
                "[12]: string list",
                {"b": ["1"]},
                "[13]: string list cast to string",
                {"b": '["1"]'},
                "[14]: string list partial",
                {"b": 'partial-["1"]'},
                "[15]: string list index",
                {"b": "1"},
                "[16]: dict",
                {"b": {"test": 1}},
                "[17]: dict cast to string",
                {"b": '{"test": 1}'},
                "[18]: dict partial",
                {"b": 'partial-{"test": 1}'},
                "[19]: nested dict",
                {"b": 1},
                "[20]: nested dict cast to string",
                {"b": "1"},
                "[21]: nested dict partial",
                {"b": "partial-1"},
                "[22]: super nested dict that returns the value",
                3,
                "[23]: string target",
                "1",
                "[24]: string target",
                "1",
                "[25]: string target partial",
                "partial-1",
                "[26]: string source",
                {"b": "testing"},
                "[27]: string source partial",
                {"b": "partial-testing"},
                "[28]: int source",
                {"b": 1},
                "[29]: int source cast",
                {"b": "1"},
                "[30]: int source partial",
                {"b": "partial-1"},
                "[31]: int source string target",
                1,
                "[32]: int source string target cast",
                "1",
                "[33]: not existing",
                {"b": None},
                "[34]: not existing cast to string empty",
                {"b": ""},
                "[35]: string source cast to dict",
                {},
                "[36]: string source cast to int",
                1,
            ],
        )
